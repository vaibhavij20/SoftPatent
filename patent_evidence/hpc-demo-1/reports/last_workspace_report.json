{
  "analysis": {
    "files": {
      "/tmp/cs-hpc-demo-1/setup.py": {
        "functions": [
          "_guard_py_ver",
          "is_building",
          "get_ext_modules",
          "run",
          "initialize_options",
          "run",
          "check_file_at_path"
        ],
        "classes": [
          "build_doc",
          "NumbaBuildExt"
        ],
        "num_lines": 428
      },
      "/tmp/cs-hpc-demo-1/versioneer.py": {
        "functions": [
          "get_root",
          "get_config_from_root",
          "register_vcs_handler",
          "run_command",
          "git_get_keywords",
          "git_versions_from_keywords",
          "git_pieces_from_vcs",
          "do_vcs_install",
          "versions_from_parentdir",
          "versions_from_file",
          "write_to_version_file",
          "plus_or_dot",
          "render_pep440",
          "render_pep440_branch",
          "pep440_split_post",
          "render_pep440_pre",
          "render_pep440_post",
          "render_pep440_post_branch",
          "render_pep440_old",
          "render_git_describe",
          "render_git_describe_long",
          "render",
          "get_versions",
          "get_version",
          "get_cmdclass",
          "do_setup",
          "scan_setup_py",
          "setup_command",
          "decorate",
          "initialize_options",
          "finalize_options",
          "run",
          "run",
          "run",
          "find_sources",
          "run",
          "make_release_tree",
          "run",
          "run"
        ],
        "classes": [
          "VersioneerConfig",
          "NotThisMethod",
          "VersioneerBadRootError",
          "cmd_version",
          "cmd_build_py",
          "cmd_build_ext",
          "cmd_egg_info",
          "cmd_sdist",
          "cmd_build_exe",
          "cmd_py2exe"
        ],
        "num_lines": 2205
      },
      "/tmp/cs-hpc-demo-1/runtests.py": {
        "functions": [],
        "classes": [],
        "num_lines": 22
      },
      "/tmp/cs-hpc-demo-1/numba/_version.py": {
        "functions": [
          "get_keywords",
          "get_config",
          "register_vcs_handler",
          "run_command",
          "versions_from_parentdir",
          "git_get_keywords",
          "git_versions_from_keywords",
          "git_pieces_from_vcs",
          "plus_or_dot",
          "render_pep440",
          "render_pep440_branch",
          "pep440_split_post",
          "render_pep440_pre",
          "render_pep440_post",
          "render_pep440_post_branch",
          "render_pep440_old",
          "render_git_describe",
          "render_git_describe_long",
          "render",
          "get_versions",
          "decorate"
        ],
        "classes": [
          "VersioneerConfig",
          "NotThisMethod"
        ],
        "num_lines": 658
      },
      "/tmp/cs-hpc-demo-1/numba/__init__.py": {
        "functions": [
          "_ensure_critical_deps",
          "test",
          "_ensure_llvm",
          "_try_enable_svml",
          "extract_version"
        ],
        "classes": [],
        "num_lines": 248
      },
      "/tmp/cs-hpc-demo-1/numba/__main__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/runtests.py": {
        "functions": [],
        "classes": [],
        "num_lines": 9
      },
      "/tmp/cs-hpc-demo-1/numba/extending.py": {
        "functions": [],
        "classes": [],
        "num_lines": 3
      },
      "/tmp/cs-hpc-demo-1/maint/towncrier_rst_validator.py": {
        "functions": [
          "list_rst_filename"
        ],
        "classes": [],
        "num_lines": 137
      },
      "/tmp/cs-hpc-demo-1/maint/gitlog2changelog.py": {
        "functions": [
          "get_pr",
          "hyperlink_user"
        ],
        "classes": [],
        "num_lines": 95
      },
      "/tmp/cs-hpc-demo-1/maint/towncrier_checker.py": {
        "functions": [],
        "classes": [],
        "num_lines": 93
      },
      "/tmp/cs-hpc-demo-1/maint/github_weekly_meeting.py": {
        "functions": [
          "fetch",
          "display",
          "main"
        ],
        "classes": [],
        "num_lines": 125
      },
      "/tmp/cs-hpc-demo-1/maint/git-copy.py": {
        "functions": [
          "copy_files"
        ],
        "classes": [],
        "num_lines": 143
      },
      "/tmp/cs-hpc-demo-1/numba/misc/coverage_support.py": {
        "functions": [
          "get_active_coverage",
          "get_registered_loc_notify",
          "_register_coverage_notifier",
          "notify",
          "close",
          "__init__",
          "notify",
          "close",
          "_pack_arcs",
          "start",
          "stop",
          "activity",
          "reset_activity",
          "get_stats",
          "trace"
        ],
        "classes": [
          "NotifyLocBase",
          "NotifyCompilerCoverage",
          "NumbaTracer"
        ],
        "num_lines": 201
      },
      "/tmp/cs-hpc-demo-1/numba/misc/POST.py": {
        "functions": [
          "_check_runtests",
          "_check_cpu_compilation",
          "check",
          "foo"
        ],
        "classes": [],
        "num_lines": 34
      },
      "/tmp/cs-hpc-demo-1/numba/misc/literal.py": {
        "functions": [
          "_ov_literally",
          "literal_unroll_impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 24
      },
      "/tmp/cs-hpc-demo-1/numba/misc/gdb_print_extension.py": {
        "functions": [
          "_create_printers",
          "__init__",
          "to_string",
          "__init__",
          "to_string",
          "__init__",
          "to_string",
          "__init__",
          "to_string",
          "__init__",
          "to_string",
          "dwarr2inttuple"
        ],
        "classes": [
          "NumbaArrayPrinter",
          "NumbaComplexPrinter",
          "NumbaTuplePrinter",
          "NumbaUniTuplePrinter",
          "NumbaUnicodeTypePrinter"
        ],
        "num_lines": 204
      },
      "/tmp/cs-hpc-demo-1/numba/misc/numba_gdbinfo.py": {
        "functions": [
          "collect_gdbinfo",
          "display_gdbinfo",
          "__init__",
          "_run_cmd",
          "gdb_binary",
          "success",
          "check_launch",
          "check_python",
          "check_numpy",
          "check_numpy_version"
        ],
        "classes": [
          "_GDBTestWrapper"
        ],
        "num_lines": 161
      },
      "/tmp/cs-hpc-demo-1/numba/misc/quicksort.py": {
        "functions": [
          "make_quicksort_impl",
          "make_py_quicksort",
          "make_jit_quicksort",
          "default_lt",
          "insertion_sort",
          "partition",
          "partition3",
          "run_quicksort1",
          "_run_quicksort",
          "GET",
          "make_res",
          "GET",
          "run_quicksort",
          "run_quicksort",
          "make_res",
          "make_res"
        ],
        "classes": [],
        "num_lines": 261
      },
      "/tmp/cs-hpc-demo-1/numba/misc/numba_entry.py": {
        "functions": [
          "make_parser",
          "main"
        ],
        "classes": [],
        "num_lines": 72
      },
      "/tmp/cs-hpc-demo-1/numba/misc/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/misc/inspection.py": {
        "functions": [
          "disassemble_elf_to_cfg",
          "get_rendering",
          "_repr_svg_",
          "__repr__"
        ],
        "classes": [
          "DisasmCFG"
        ],
        "num_lines": 103
      },
      "/tmp/cs-hpc-demo-1/numba/misc/cffiimpl.py": {
        "functions": [
          "from_buffer"
        ],
        "classes": [],
        "num_lines": 22
      },
      "/tmp/cs-hpc-demo-1/numba/misc/appdirs.py": {
        "functions": [
          "user_data_dir",
          "site_data_dir",
          "user_config_dir",
          "site_config_dir",
          "user_cache_dir",
          "user_log_dir",
          "_get_win_folder_from_registry",
          "_get_win_folder_with_pywin32",
          "_get_win_folder_with_ctypes",
          "_get_win_folder_with_jna",
          "__init__",
          "user_data_dir",
          "site_data_dir",
          "user_config_dir",
          "site_config_dir",
          "user_cache_dir",
          "user_log_dir"
        ],
        "classes": [
          "AppDirs"
        ],
        "num_lines": 551
      },
      "/tmp/cs-hpc-demo-1/numba/misc/init_utils.py": {
        "functions": [
          "generate_version_info",
          "try_int"
        ],
        "classes": [],
        "num_lines": 44
      },
      "/tmp/cs-hpc-demo-1/numba/misc/firstlinefinder.py": {
        "functions": [
          "_is_docstring",
          "get_func_body_first_lineno",
          "__init__",
          "_visit_children",
          "visit_FunctionDef"
        ],
        "classes": [
          "FindDefFirstLine"
        ],
        "num_lines": 104
      },
      "/tmp/cs-hpc-demo-1/numba/misc/findlib.py": {
        "functions": [
          "get_lib_dirs",
          "find_lib",
          "find_file"
        ],
        "classes": [],
        "num_lines": 63
      },
      "/tmp/cs-hpc-demo-1/numba/misc/numba_sysinfo.py": {
        "functions": [
          "get_os_spec_info",
          "get_sysinfo",
          "display_sysinfo",
          "format",
          "format_optional",
          "parse_error"
        ],
        "classes": [
          "CmdBufferOut",
          "CmdReadFile",
          "DisplayMap",
          "DisplaySeq",
          "DisplaySeqMaps"
        ],
        "num_lines": 706
      },
      "/tmp/cs-hpc-demo-1/numba/misc/gdb_hook.py": {
        "functions": [
          "_confirm_gdb",
          "hook_gdb",
          "hook_gdb_init",
          "init_gdb_codegen",
          "gen_gdb_impl",
          "hook_gdb_breakpoint",
          "gen_bp_impl",
          "impl",
          "impl",
          "gdb_internal",
          "impl",
          "bp_internal",
          "codegen",
          "codegen"
        ],
        "classes": [],
        "num_lines": 228
      },
      "/tmp/cs-hpc-demo-1/numba/misc/llvm_pass_timings.py": {
        "functions": [
          "_adjust_timings",
          "__enter__",
          "__exit__",
          "get",
          "__init__",
          "__enter__",
          "__exit__",
          "get",
          "make_adjuster",
          "chained",
          "__init__",
          "__bool__",
          "get_raw_data",
          "get_total_time",
          "list_records",
          "list_top",
          "summary",
          "_processed",
          "_process",
          "__init__",
          "record_legacy",
          "record",
          "_append",
          "get_total_time",
          "list_longest_first",
          "is_empty",
          "summary",
          "__getitem__",
          "__len__",
          "__str__",
          "adjust",
          "ap",
          "parse"
        ],
        "classes": [
          "RecordLLVMPassTimingsLegacy",
          "RecordLLVMPassTimings",
          "ProcessedPassTimings",
          "PassTimingsCollection"
        ],
        "num_lines": 471
      },
      "/tmp/cs-hpc-demo-1/numba/misc/mergesort.py": {
        "functions": [
          "make_mergesort_impl",
          "make_jit_mergesort",
          "argmergesort_inner",
          "mergesort",
          "argmergesort",
          "lt",
          "lessthan",
          "lessthan"
        ],
        "classes": [],
        "num_lines": 126
      },
      "/tmp/cs-hpc-demo-1/numba/misc/timsort.py": {
        "functions": [
          "make_timsort_impl",
          "make_py_timsort",
          "make_jit_timsort",
          "has_values",
          "merge_init",
          "merge_init_with_values",
          "merge_append",
          "merge_pop",
          "merge_getmem",
          "merge_adjust_gallop",
          "LT",
          "binarysort",
          "count_run",
          "gallop_left",
          "gallop_right",
          "merge_compute_minrun",
          "sortslice_copy",
          "sortslice_copy_down",
          "merge_lo",
          "merge_hi",
          "merge_at",
          "merge_collapse",
          "merge_force_collapse",
          "reverse_slice",
          "run_timsort_with_mergestate",
          "run_timsort",
          "run_timsort_with_values"
        ],
        "classes": [],
        "num_lines": 943
      },
      "/tmp/cs-hpc-demo-1/numba/misc/special.py": {
        "functions": [
          "pndindex",
          "_gdb_python_call_gen",
          "gdb",
          "gdb_breakpoint",
          "gdb_init",
          "literally",
          "literal_unroll",
          "__new__"
        ],
        "classes": [
          "prange"
        ],
        "num_lines": 104
      },
      "/tmp/cs-hpc-demo-1/numba/misc/dump_style.py": {
        "functions": [
          "by_colorscheme"
        ],
        "classes": [
          "NumbaIRLexer"
        ],
        "num_lines": 84
      },
      "/tmp/cs-hpc-demo-1/numba/misc/memoryutils.py": {
        "functions": [
          "get_available_memory",
          "get_memory_usage",
          "__init__",
          "monitor",
          "get_summary",
          "format_bytes"
        ],
        "classes": [
          "MemoryTracker"
        ],
        "num_lines": 196
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/function_type.py": {
        "functions": [
          "typeof_function_type",
          "lower_constant_dispatcher",
          "lower_constant_function_type",
          "_get_wrapper_address",
          "_get_jit_address",
          "_lower_get_address",
          "unbox_function_type",
          "box_function_type",
          "lower_cast_function_type_to_function_type",
          "lower_cast_dispatcher_to_function_type",
          "__init__",
          "__init__"
        ],
        "classes": [
          "FunctionProtoModel",
          "FunctionModel"
        ],
        "num_lines": 332
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/structref.py": {
        "functions": [
          "define_attributes",
          "define_boxing",
          "define_constructor",
          "define_proxy",
          "register",
          "new",
          "structref_is",
          "__init__",
          "new_struct_ref",
          "get_struct_ref",
          "get_data_pointer",
          "get_data_struct",
          "struct_getattr_impl",
          "struct_setattr_impl",
          "box_struct_ref",
          "unbox_struct_ref",
          "codegen",
          "_numba_box_",
          "__new__",
          "_numba_type_",
          "generic_resolve",
          "ctor"
        ],
        "classes": [
          "_Utils",
          "StructRefProxy",
          "StructAttribute"
        ],
        "num_lines": 400
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 1
      },
      "/tmp/cs-hpc-demo-1/numba/types/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 3
      },
      "/tmp/cs-hpc-demo-1/numba/core/fastmathpass.py": {
        "functions": [
          "rewrite_module",
          "__init__",
          "visit_Instruction",
          "__init__",
          "visit_Call"
        ],
        "classes": [
          "FastFloatBinOpVisitor",
          "FastFloatCallVisitor"
        ],
        "num_lines": 44
      },
      "/tmp/cs-hpc-demo-1/numba/core/dispatcher.py": {
        "functions": [
          "__init__",
          "__repr__",
          "_numba_type_",
          "__init__",
          "fold_argument_types",
          "compile",
          "_compile_cached",
          "_compile_core",
          "get_globals_for_reduction",
          "_get_implementation",
          "_customize_flags",
          "__init__",
          "get_globals_for_reduction",
          "_get_implementation",
          "__init__",
          "__enter__",
          "__exit__",
          "__bool__",
          "__init__",
          "_compilation_chain_init_hook",
          "_reset_overloads",
          "_make_finalizer",
          "signatures",
          "nopython_signatures",
          "disable_compile",
          "add_overload",
          "fold_argument_types",
          "get_call_template",
          "get_overload",
          "is_compiling",
          "_compile_for_args",
          "inspect_llvm",
          "inspect_asm",
          "inspect_types",
          "inspect_cfg",
          "inspect_disasm_cfg",
          "get_annotation_info",
          "_explain_ambiguous",
          "_explain_matching_error",
          "_search_new_conversions",
          "__repr__",
          "typeof_pyval",
          "_callback_add_timer",
          "_callback_add_compiler_timer",
          "_callback_add_llvm_timer",
          "_uuid",
          "_set_uuid",
          "__init__",
          "dump",
          "_numba_type_",
          "enable_caching",
          "__get__",
          "_reduce_states",
          "_rebuild",
          "compile",
          "get_compile_result",
          "recompile",
          "stats",
          "parallel_diagnostics",
          "get_metadata",
          "get_function_type",
          "__init__",
          "_reduce_states",
          "_reduce_extras",
          "_rebuild",
          "get_source_location",
          "_pre_compile",
          "compile",
          "_get_dispatcher_for_current_target",
          "_pre_compile",
          "compile",
          "_reduce_extras",
          "_numba_type_",
          "get_call_template",
          "compile",
          "__init__",
          "_numba_type_",
          "get_call_template",
          "_legalize_arg_types",
          "compile",
          "normal_handler",
          "default_handler",
          "stararg_handler",
          "finalizer",
          "error_rewrite",
          "dump",
          "cb_compiler",
          "cb_llvm",
          "cb_compiler",
          "cb_llvm",
          "cb_compiler",
          "cb_llvm",
          "folded"
        ],
        "classes": [
          "OmittedArg",
          "_FunctionCompiler",
          "_GeneratedFunctionCompiler",
          "CompilingCounter",
          "_DispatcherBase",
          "_MemoMixin",
          "Dispatcher",
          "LiftedCode",
          "LiftedLoop",
          "LiftedWith",
          "ObjModeLiftedWith"
        ],
        "num_lines": 1337
      },
      "/tmp/cs-hpc-demo-1/numba/core/serialize.py": {
        "functions": [
          "_rebuild_reduction",
          "_numba_unpickle",
          "dumps",
          "runtime_build_excinfo_struct",
          "_unpickle__CustomPickled",
          "_pickle__CustomPickled",
          "custom_reduce",
          "custom_rebuild",
          "is_serialiable",
          "_no_pickle",
          "disable_pickling",
          "_custom_reduce__custompickled",
          "__init__",
          "_reduce",
          "_rebuild",
          "reducer_override",
          "_reduce_states",
          "_rebuild",
          "_reduce_class",
          "__reduce__",
          "__init__",
          "__call__",
          "__reduce__",
          "_rebuild"
        ],
        "classes": [
          "_CustomPickled",
          "NumbaPickler",
          "ReduceMixin",
          "PickleCallableByPath"
        ],
        "num_lines": 260
      },
      "/tmp/cs-hpc-demo-1/numba/core/funcdesc.py": {
        "functions": [
          "default_mangler",
          "qualifying_prefix",
          "__init__",
          "lookup_globals",
          "lookup_module",
          "lookup_function",
          "llvm_func_name",
          "llvm_cpython_wrapper_name",
          "llvm_cfunc_wrapper_name",
          "__repr__",
          "_get_function_info",
          "_from_python_function",
          "from_specialized_function",
          "from_object_mode_function",
          "__init__",
          "mangler"
        ],
        "classes": [
          "FunctionDescriptor",
          "PythonFunctionDescriptor",
          "ExternalFunctionDescriptor"
        ],
        "num_lines": 230
      },
      "/tmp/cs-hpc-demo-1/numba/core/postproc.py": {
        "functions": [
          "__init__",
          "__init__",
          "get_yield_points",
          "__init__",
          "cfg",
          "usedefs",
          "livemap",
          "deadmaps",
          "__init__",
          "run",
          "_populate_generator_info",
          "_compute_generator_info",
          "_insert_var_dels",
          "_patch_var_dels",
          "remove_dels"
        ],
        "classes": [
          "YieldPoint",
          "GeneratorInfo",
          "VariableLifetime",
          "PostProcessor"
        ],
        "num_lines": 239
      },
      "/tmp/cs-hpc-demo-1/numba/core/options.py": {
        "functions": [
          "include_default_options",
          "finalize",
          "parse_as_flags",
          "_apply",
          "__init__"
        ],
        "classes": [
          "TargetOptions",
          "DefaultOptions",
          "Mapping"
        ],
        "num_lines": 108
      },
      "/tmp/cs-hpc-demo-1/numba/core/transforms.py": {
        "functions": [
          "_extract_loop_lifting_candidates",
          "find_region_inout_vars",
          "_loop_lift_get_candidate_infos",
          "_loop_lift_modify_call_block",
          "_loop_lift_prepare_loop_func",
          "_loop_lift_modify_blocks",
          "_has_multiple_loop_exits",
          "_pre_looplift_transform",
          "loop_lifting",
          "canonicalize_cfg_single_backedge",
          "canonicalize_cfg",
          "with_lifting",
          "_get_with_contextmanager",
          "_legalize_with_head",
          "_cfg_nodes_in_region",
          "find_setupwiths",
          "_rewrite_return",
          "_eliminate_nested_withs",
          "consolidate_multi_exit_withs",
          "_fix_multi_exit_blocks",
          "same_exit_point",
          "one_entry",
          "cannot_yield",
          "new_block_id",
          "has_multiple_backedges",
          "yield_loops_with_multiple_backedges",
          "replace_target",
          "rewrite_single_backedge",
          "dispatcher_factory",
          "get_var_dfn",
          "get_ctxmgr_obj",
          "find_ranges",
          "within_known_range",
          "replace"
        ],
        "classes": [],
        "num_lines": 914
      },
      "/tmp/cs-hpc-demo-1/numba/core/compiler_machinery.py": {
        "functions": [
          "debug_print",
          "__enter__",
          "__exit__",
          "__init__",
          "name",
          "pass_id",
          "pass_id",
          "analysis",
          "analysis",
          "run_initialization",
          "run_pass",
          "run_finalizer",
          "get_analysis_usage",
          "get_analysis",
          "__init__",
          "get_required_set",
          "get_preserved_set",
          "add_required",
          "add_preserved",
          "__str__",
          "__init__",
          "_validate_pass",
          "add_pass",
          "add_pass_after",
          "_debug_init",
          "finalize",
          "finalized",
          "_patch_error",
          "_runPass",
          "run",
          "dependency_analysis",
          "register",
          "is_registered",
          "get",
          "_does_pass_name_alias",
          "find_by_name",
          "dump",
          "parse",
          "check",
          "debug_print",
          "resolve_requires",
          "make_festive",
          "walk"
        ],
        "classes": [
          "SimpleTimer",
          "CompilerPass",
          "SSACompliantMixin",
          "FunctionPass",
          "AnalysisPass",
          "LoweringPass",
          "AnalysisUsage",
          "PassManager",
          "PassRegistry"
        ],
        "num_lines": 462
      },
      "/tmp/cs-hpc-demo-1/numba/core/tracing.py": {
        "functions": [
          "find_function_info",
          "chop",
          "create_events",
          "dotrace",
          "notrace",
          "doevent",
          "noevent",
          "__init__",
          "decorator",
          "decorator",
          "wrapper"
        ],
        "classes": [
          "TLS"
        ],
        "num_lines": 228
      },
      "/tmp/cs-hpc-demo-1/numba/core/event.py": {
        "functions": [
          "_guard_kind",
          "register",
          "unregister",
          "broadcast",
          "install_listener",
          "install_timer",
          "install_recorder",
          "start_event",
          "end_event",
          "trigger_event",
          "_prepare_chrome_trace_data",
          "_setup_chrome_trace_exit_handler",
          "__init__",
          "kind",
          "status",
          "data",
          "is_start",
          "is_end",
          "is_failed",
          "__str__",
          "on_start",
          "on_end",
          "notify",
          "__init__",
          "on_start",
          "on_end",
          "done",
          "duration",
          "__init__",
          "on_start",
          "on_end",
          "_write_chrome_trace",
          "on_exit"
        ],
        "classes": [
          "EventStatus",
          "Event",
          "Listener",
          "TimingListener",
          "RecordingListener"
        ],
        "num_lines": 485
      },
      "/tmp/cs-hpc-demo-1/numba/core/optional.py": {
        "functions": [
          "always_return_true_impl",
          "always_return_false_impl",
          "optional_is_none",
          "optional_getattr",
          "optional_setattr",
          "optional_to_optional",
          "any_to_optional",
          "optional_to_any"
        ],
        "classes": [],
        "num_lines": 121
      },
      "/tmp/cs-hpc-demo-1/numba/core/ccallback.py": {
        "functions": [
          "_customize_flags",
          "__init__",
          "enable_caching",
          "compile",
          "_compile_uncached",
          "native_name",
          "address",
          "cffi",
          "ctypes",
          "inspect_llvm",
          "cache_hits",
          "__repr__",
          "__call__"
        ],
        "classes": [
          "_CFuncCompiler",
          "CFunc"
        ],
        "num_lines": 135
      },
      "/tmp/cs-hpc-demo-1/numba/core/config.py": {
        "functions": [
          "_parse_cc",
          "_os_supports_avx",
          "_process_opt_level",
          "reload_config",
          "__new__",
          "is_opt_max",
          "__repr__",
          "__init__",
          "reset",
          "update",
          "validate",
          "process_environ",
          "_readenv",
          "optional_str",
          "fmt_html_path",
          "avx_default",
          "num_threads_default",
          "which_gdb"
        ],
        "classes": [
          "_OptLevel",
          "_EnvReloader"
        ],
        "num_lines": 602
      },
      "/tmp/cs-hpc-demo-1/numba/core/compiler.py": {
        "functions": [
          "sanitize_compile_result_entries",
          "compile_result",
          "run_frontend",
          "_make_subtarget",
          "compile_extra",
          "compile_ir",
          "compile_internal",
          "_reduce",
          "_find_referenced_environments",
          "_rebuild",
          "codegen",
          "dump",
          "__init__",
          "__repr__",
          "__init__",
          "__getattr__",
          "__setattr__",
          "__init__",
          "compile_extra",
          "compile_ir",
          "define_pipelines",
          "_compile_core",
          "_compile_bytecode",
          "_compile_ir",
          "define_pipelines",
          "define_nopython_pipeline",
          "define_nopython_lowering_pipeline",
          "define_parfor_gufunc_nopython_lowering_pipeline",
          "define_typed_pipeline",
          "define_parfor_gufunc_pipeline",
          "define_untyped_pipeline",
          "define_objectmode_pipeline",
          "compile_local"
        ],
        "classes": [
          "Flags",
          "CompileResult",
          "_CompileStatus",
          "_EarlyPipelineCompletion",
          "StateDict",
          "CompilerBase",
          "Compiler",
          "DefaultPassBuilder"
        ],
        "num_lines": 813
      },
      "/tmp/cs-hpc-demo-1/numba/core/withcontexts.py": {
        "functions": [
          "typeof_contextmanager",
          "_get_var_parent",
          "_clear_blocks",
          "_bypass_with_context",
          "_mutate_with_block_caller",
          "_mutate_with_block_callee",
          "__enter__",
          "__exit__",
          "mutate_with_body",
          "mutate_with_body",
          "mutate_with_body",
          "_legalize_args",
          "_legalize_arg_type",
          "mutate_with_body",
          "__call__",
          "mutate_with_body",
          "__call__",
          "__enter__",
          "__exit__",
          "report_error",
          "strip_var_ver"
        ],
        "classes": [
          "WithContext",
          "_ByPassContextType",
          "_CallContextType",
          "_ObjModeContextType",
          "_ParallelChunksize"
        ],
        "num_lines": 605
      },
      "/tmp/cs-hpc-demo-1/numba/core/analysis.py": {
        "functions": [
          "compute_use_defs",
          "compute_live_map",
          "compute_dead_maps",
          "compute_live_variables",
          "compute_cfg_from_blocks",
          "find_top_level_loops",
          "_fix_loop_exit",
          "dead_branch_prune",
          "rewrite_semantic_constants",
          "find_literally_calls",
          "must_use_alloca",
          "fix_point_progress",
          "fix_point",
          "def_reach",
          "liveness",
          "fix_point_progress",
          "find_branches",
          "do_prune",
          "prune_by_type",
          "prune_by_value",
          "prune_by_predicate",
          "resolve_input_arg_const",
          "rewrite_statement",
          "rewrite_array_ndim",
          "rewrite_tuple_len"
        ],
        "classes": [
          "Unknown"
        ],
        "num_lines": 726
      },
      "/tmp/cs-hpc-demo-1/numba/core/inline_closurecall.py": {
        "functions": [
          "callee_ir_validator",
          "_created_inlined_var_name",
          "check_reduce_func",
          "inline_closure_call",
          "_get_callee_args",
          "_make_debug_print",
          "_debug_dump",
          "_get_all_scopes",
          "_replace_args_with",
          "_replace_freevars",
          "_replace_returns",
          "_add_definitions",
          "_find_arraycall",
          "_find_iter_range",
          "length_of_iterator",
          "_inline_arraycall",
          "_find_unsafe_empty_inferred",
          "_fix_nested_array",
          "_new_definition",
          "_inline_const_arraycall",
          "__init__",
          "run",
          "_inline_reduction",
          "_inline_stencil",
          "_fix_stencil_neighborhood",
          "_fix_stencil_index_offsets",
          "_inline_closure",
          "__init__",
          "inline_ir",
          "inline_function",
          "run_untyped_passes",
          "update_type_and_call_maps",
          "debug_print",
          "is_removed",
          "find_array_def",
          "fix_dependencies",
          "fix_array_assign",
          "__init__",
          "match",
          "apply",
          "inline_array",
          "reduce_func",
          "check",
          "copy_ir",
          "stararg_handler",
          "codegen",
          "__init__",
          "reset",
          "list_var_used",
          "codegen",
          "codegen",
          "codegen",
          "codegen"
        ],
        "classes": [
          "InlineClosureCallPass",
          "InlineWorker",
          "RewriteArrayOfConsts",
          "State"
        ],
        "num_lines": 1684
      },
      "/tmp/cs-hpc-demo-1/numba/core/ir_utils.py": {
        "functions": [
          "mk_unique_var",
          "get_unused_var_name",
          "next_label",
          "mk_alloc",
          "convert_size_to_var",
          "get_np_ufunc_typ",
          "mk_range_block",
          "_mk_range_args",
          "get_global_func_typ",
          "mk_loop_header",
          "legalize_names",
          "get_name_var_table",
          "replace_var_names",
          "replace_var_callback",
          "replace_vars",
          "replace_vars_stmt",
          "replace_vars_inner",
          "visit_vars",
          "visit_vars_stmt",
          "visit_vars_inner",
          "add_offset_to_labels",
          "find_max_label",
          "flatten_labels",
          "remove_dels",
          "remove_args",
          "dead_code_elimination",
          "remove_dead",
          "remove_dead_block",
          "remove_dead_random_call",
          "has_no_side_effect",
          "is_pure",
          "is_const_call",
          "get_canonical_alias",
          "find_potential_aliases",
          "_add_alias",
          "is_immutable_type",
          "copy_propagate",
          "init_copy_propagate_data",
          "get_block_copies",
          "apply_copy_propagate",
          "fix_setitem_type",
          "dprint_func_ir",
          "find_topo_order",
          "get_call_table",
          "get_tuple_table",
          "get_stmt_writes",
          "rename_labels",
          "simplify_CFG",
          "canonicalize_array_math",
          "get_array_accesses",
          "is_slice_index",
          "merge_adjacent_blocks",
          "restore_copy_var_names",
          "simplify",
          "require",
          "guard",
          "get_definition",
          "build_definitions",
          "find_callname",
          "find_build_sequence",
          "find_const",
          "compile_to_numba_ir",
          "_create_function_from_code_obj",
          "get_ir_of_code",
          "replace_arg_nodes",
          "replace_returns",
          "gen_np_call",
          "dump_block",
          "dump_blocks",
          "is_operator_or_getitem",
          "is_get_setitem",
          "is_getitem",
          "is_setitem",
          "index_var_of_get_setitem",
          "set_index_var_of_get_setitem",
          "is_namedtuple_class",
          "fill_block_with_call",
          "fill_callee_prologue",
          "fill_callee_epilogue",
          "find_outer_value",
          "raise_on_unsupported_feature",
          "warn_deprecated",
          "resolve_func_from_module",
          "enforce_no_dels",
          "enforce_no_phis",
          "legalize_single_scope",
          "check_and_legalize_ir",
          "convert_code_obj_to_function",
          "fixup_var_define_in_scope",
          "transfer_scope",
          "is_setup_with",
          "is_terminator",
          "is_raise",
          "is_return",
          "is_pop_block",
          "__init__",
          "next",
          "update",
          "get_name_var_visit",
          "replace_name",
          "find_single_branch",
          "resolve_mod",
          "__init__"
        ],
        "classes": [
          "_MaxLabel",
          "GuardException",
          "DummyPipeline"
        ],
        "num_lines": 2409
      },
      "/tmp/cs-hpc-demo-1/numba/core/registry.py": {
        "functions": [
          "_toplevel_target_context",
          "_toplevel_typing_context",
          "target_context",
          "typing_context",
          "__init__",
          "__getitem__",
          "__setitem__",
          "check"
        ],
        "classes": [
          "CPUTarget",
          "CPUDispatcher",
          "DelayedRegistry"
        ],
        "num_lines": 84
      },
      "/tmp/cs-hpc-demo-1/numba/core/imputils.py": {
        "functions": [
          "_decorate_getattr",
          "_decorate_setattr",
          "fix_returning_optional",
          "user_function",
          "user_generator",
          "iterator_impl",
          "iternext_impl",
          "call_getiter",
          "call_iternext",
          "call_len",
          "for_iter",
          "impl_ret_new_ref",
          "impl_ret_borrowed",
          "impl_ret_untracked",
          "force_error_model",
          "numba_typeref_ctor",
          "__init__",
          "lower",
          "_decorate_attr",
          "lower_getattr",
          "lower_getattr_generic",
          "lower_setattr",
          "lower_setattr_generic",
          "lower_cast",
          "lower_constant",
          "__repr__",
          "imp",
          "imp",
          "wrapper",
          "__init__",
          "set_exhausted",
          "set_valid",
          "yield_",
          "is_valid",
          "yielded_value",
          "outer",
          "do_break",
          "decorate",
          "decorate",
          "decorate",
          "decorate",
          "decorate",
          "res",
          "res",
          "res",
          "res",
          "iternext_wrapper",
          "wrapper"
        ],
        "classes": [
          "Registry",
          "RegistryLoader",
          "_IternextResult",
          "RefType"
        ],
        "num_lines": 469
      },
      "/tmp/cs-hpc-demo-1/numba/core/pylowering.py": {
        "functions": [
          "__repr__",
          "init",
          "pre_lower",
          "post_lower",
          "pre_block",
          "lower_inst",
          "_omitted_typobj",
          "lower_assign",
          "lower_yield",
          "lower_binop",
          "lower_expr",
          "lower_const",
          "lower_global",
          "get_module_dict",
          "get_builtin_obj",
          "builtin_lookup",
          "check_occurred",
          "check_error",
          "check_int_status",
          "is_null",
          "return_exception_raised",
          "init_vars",
          "_getvar",
          "loadvar",
          "delvar",
          "storevar",
          "cleanup_vars",
          "alloca",
          "_alloca_var",
          "incref",
          "decref",
          "_freeze_string"
        ],
        "classes": [
          "_Undefined",
          "PyLower"
        ],
        "num_lines": 672
      },
      "/tmp/cs-hpc-demo-1/numba/core/externals.py": {
        "functions": [
          "_add_missing_symbol",
          "_get_msvcrt_symbol",
          "compile_multi3",
          "install",
          "_do_install"
        ],
        "classes": [
          "_Installer",
          "_ExternalMathFunctions"
        ],
        "num_lines": 155
      },
      "/tmp/cs-hpc-demo-1/numba/core/cpu.py": {
        "functions": [
          "__init__",
          "create_module",
          "init",
          "load_additional_registries",
          "target_data",
          "with_aot_codegen",
          "codegen",
          "call_conv",
          "get_env_body",
          "get_env_manager",
          "get_generator_state",
          "build_list",
          "build_set",
          "build_map",
          "post_lowering",
          "create_cpython_wrapper",
          "create_cfunc_wrapper",
          "get_executable",
          "calc_array_sizeof",
          "get_ufunc_info",
          "finalize"
        ],
        "classes": [
          "ClosureBody",
          "EnvBody",
          "CPUContext",
          "CPUTargetOptions"
        ],
        "num_lines": 325
      },
      "/tmp/cs-hpc-demo-1/numba/core/lowering.py": {
        "functions": [
          "_lit_or_omitted",
          "__init__",
          "call_conv",
          "init",
          "init_pyapi",
          "_compute_def_location",
          "pre_lower",
          "post_lower",
          "pre_block",
          "post_block",
          "return_dynamic_exception",
          "return_exception",
          "set_exception",
          "emit_environment_object",
          "lower",
          "extract_function_arguments",
          "lower_normal_function",
          "lower_function_body",
          "lower_block",
          "create_cpython_wrapper",
          "create_cfunc_wrapper",
          "setup_function",
          "typeof",
          "notify_loc",
          "debug_print",
          "print_variable",
          "init",
          "_disable_sroa_like_opt",
          "_find_singly_assigned_variable",
          "pre_block",
          "post_block",
          "lower_inst",
          "lower_setitem",
          "lower_try_dynamic_raise",
          "lower_dynamic_raise",
          "lower_static_raise",
          "lower_static_try_raise",
          "lower_assign",
          "lower_yield",
          "lower_binop",
          "lower_getitem",
          "_cast_var",
          "fold_call_args",
          "lower_print",
          "lower_call",
          "_lower_call_ObjModeDispatcher",
          "_lower_call_ExternalFunction",
          "_lower_call_ExternalFunctionPointer",
          "_lower_call_RecursiveCall",
          "_lower_call_FunctionType",
          "__call_first_class_function_pointer",
          "__get_first_class_function_pointer",
          "_lower_call_normal",
          "lower_expr",
          "_alloca_var",
          "getvar",
          "loadvar",
          "storevar",
          "delvar",
          "alloca",
          "alloca_lltype",
          "incref",
          "decref",
          "cast_result",
          "try_static_impl",
          "normal_handler",
          "default_handler",
          "stararg_handler"
        ],
        "classes": [
          "BaseLower",
          "Lower"
        ],
        "num_lines": 1652
      },
      "/tmp/cs-hpc-demo-1/numba/core/callconv.py": {
        "functions": [
          "_const_int",
          "create_error_model",
          "__init__",
          "return_optional_value",
          "return_native_none",
          "return_exc",
          "return_stop_iteration",
          "get_return_type",
          "init_call_helper",
          "_get_call_helper",
          "unpack_exception",
          "raise_error",
          "decode_arguments",
          "_get_arg_packer",
          "_make_call_helper",
          "return_value",
          "return_user_exc",
          "return_status_propagate",
          "_return_errcode_raw",
          "_get_return_status",
          "get_function_type",
          "decorate_function",
          "get_arguments",
          "call_function",
          "__init__",
          "_add_exception",
          "get_exception",
          "_make_call_helper",
          "return_value",
          "build_excinfo_struct",
          "set_static_user_exc",
          "return_user_exc",
          "unpack_dynamic_exception",
          "unpack_exception",
          "emit_unwrap_dynamic_exception_fn",
          "emit_wrap_args_insts",
          "set_dynamic_user_exc",
          "return_dynamic_user_exc",
          "_get_try_state",
          "check_try_status",
          "set_try_status",
          "unset_try_status",
          "return_status_propagate",
          "_return_errcode_raw",
          "_get_return_status",
          "get_function_type",
          "decorate_function",
          "get_arguments",
          "_get_return_argument",
          "_get_excinfo_argument",
          "call_function",
          "__init__",
          "fp_zero_division",
          "type_may_always_need_nrt"
        ],
        "classes": [
          "BaseCallConv",
          "MinimalCallConv",
          "_MinimalCallHelper",
          "CPUCallConv",
          "ErrorModel",
          "PythonErrorModel",
          "NumpyErrorModel"
        ],
        "num_lines": 963
      },
      "/tmp/cs-hpc-demo-1/numba/core/object_mode_passes.py": {
        "functions": [
          "__init__",
          "_frontend_looplift",
          "run_pass",
          "__init__",
          "_py_lowering_stage",
          "run_pass",
          "backend_object_mode"
        ],
        "classes": [
          "ObjectModeFrontEnd",
          "ObjectModeBackEnd"
        ],
        "num_lines": 147
      },
      "/tmp/cs-hpc-demo-1/numba/core/sigutils.py": {
        "functions": [
          "is_signature",
          "_parse_signature_string",
          "normalize_signature",
          "check_type"
        ],
        "classes": [],
        "num_lines": 53
      },
      "/tmp/cs-hpc-demo-1/numba/core/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/core/ssa.py": {
        "functions": [
          "reconstruct_ssa",
          "_run_ssa",
          "_fix_ssa_vars",
          "_iterated_domfronts",
          "_compute_phi_locations",
          "_fresh_vars",
          "_get_scope",
          "_find_defs_violators",
          "_run_block_analysis",
          "_run_block_rewrite",
          "_make_states",
          "_run_ssa_block_pass",
          "_warn_about_uninitialized_variable",
          "__init__",
          "get",
          "on_assign",
          "on_other",
          "on_assign",
          "on_other",
          "__init__",
          "on_assign",
          "on_other",
          "__init__",
          "on_assign",
          "on_other",
          "_fix_var",
          "_find_def",
          "_find_def_from_top",
          "_find_def_from_bottom",
          "_stmt_index"
        ],
        "classes": [
          "_CacheListVars",
          "_BaseHandler",
          "_GatherDefsHandler",
          "UndefinedVariable",
          "_FreshVarHandler",
          "_FixSSAVars"
        ],
        "num_lines": 489
      },
      "/tmp/cs-hpc-demo-1/numba/core/ir.py": {
        "functions": [
          "__init__",
          "__eq__",
          "__ne__",
          "from_function_id",
          "__repr__",
          "__str__",
          "_find_definition",
          "_raw_function_name",
          "get_lines",
          "_get_path",
          "strformat",
          "with_lineno",
          "short",
          "__eq__",
          "__le__",
          "__hash__",
          "__eq__",
          "__le__",
          "__hash__",
          "__init__",
          "define",
          "get",
          "__contains__",
          "__len__",
          "__repr__",
          "__hash__",
          "__iter__",
          "__eq__",
          "__ne__",
          "list_vars",
          "_rec_list_vars",
          "list_vars",
          "get_targets",
          "__init__",
          "__getattr__",
          "__setattr__",
          "binop",
          "inplace_binop",
          "unary",
          "call",
          "build_tuple",
          "build_list",
          "build_set",
          "build_map",
          "pair_first",
          "pair_second",
          "getiter",
          "iternext",
          "exhaust_iter",
          "getattr",
          "getitem",
          "typed_getitem",
          "static_getitem",
          "cast",
          "phi",
          "make_function",
          "null",
          "undef",
          "dummy",
          "__repr__",
          "list_vars",
          "infer_constant",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "get_targets",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "__init__",
          "__str__",
          "list_vars",
          "__init__",
          "__str__",
          "list_vars",
          "__init__",
          "__str__",
          "__init__",
          "__repr__",
          "infer_constant",
          "__init__",
          "__repr__",
          "infer_constant",
          "__deepcopy__",
          "__init__",
          "__str__",
          "infer_constant",
          "__deepcopy__",
          "__init__",
          "__str__",
          "infer_constant",
          "__deepcopy__",
          "__init__",
          "__repr__",
          "__str__",
          "is_temp",
          "unversioned_name",
          "versioned_names",
          "all_names",
          "__deepcopy__",
          "__init__",
          "define",
          "get",
          "get_exact",
          "get_or_define",
          "redefine",
          "get_versions_of",
          "make_temp",
          "has_parent",
          "__repr__",
          "__init__",
          "copy",
          "find_exprs",
          "find_insts",
          "find_variable_assignment",
          "prepend",
          "append",
          "remove",
          "clear",
          "dump",
          "terminator",
          "is_terminated",
          "verify",
          "insert_after",
          "insert_before_terminator",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "__repr__",
          "__init__",
          "equal_ir",
          "diff_str",
          "_reset_analysis_variables",
          "derive",
          "copy",
          "get_block_entry_vars",
          "infer_constant",
          "get_definition",
          "get_assignee",
          "dump",
          "dump_to_string",
          "dump_generator_info",
          "render_dot",
          "__new__",
          "__repr__",
          "walk",
          "count_spaces",
          "fixup",
          "get_pad"
        ],
        "classes": [
          "Loc",
          "SlotEqualityCheckMixin",
          "EqualityCheckMixin",
          "VarMap",
          "AbstractRHS",
          "Inst",
          "Stmt",
          "Terminator",
          "Expr",
          "SetItem",
          "StaticSetItem",
          "DelItem",
          "SetAttr",
          "DelAttr",
          "StoreMap",
          "Del",
          "Raise",
          "StaticRaise",
          "DynamicRaise",
          "TryRaise",
          "StaticTryRaise",
          "DynamicTryRaise",
          "Return",
          "Jump",
          "Branch",
          "Assign",
          "Print",
          "Yield",
          "EnterWith",
          "PopBlock",
          "Arg",
          "Const",
          "Global",
          "FreeVar",
          "Var",
          "Scope",
          "Block",
          "Loop",
          "With",
          "FunctionIR",
          "UndefinedType"
        ],
        "num_lines": 1702
      },
      "/tmp/cs-hpc-demo-1/numba/core/itanium_mangler.py": {
        "functions": [
          "_escape_string",
          "_fix_lead_digit",
          "_len_encoded",
          "mangle_abi_tag",
          "mangle_identifier",
          "mangle_type_or_value",
          "mangle_templated_ident",
          "mangle_args",
          "mangle",
          "prepend_namespace",
          "_split_mangled_ident",
          "repl"
        ],
        "classes": [],
        "num_lines": 225
      },
      "/tmp/cs-hpc-demo-1/numba/core/removerefctpass.py": {
        "functions": [
          "_rewrite_function",
          "_legalize",
          "remove_unnecessary_nrt_usage",
          "__init__",
          "visit_Call",
          "valid_output",
          "valid_input"
        ],
        "classes": [
          "_MarkNrtCallVisitor"
        ],
        "num_lines": 120
      },
      "/tmp/cs-hpc-demo-1/numba/core/boxing.py": {
        "functions": [
          "box_bool",
          "unbox_boolean",
          "box_literal_integer",
          "box_integer",
          "unbox_integer",
          "box_float",
          "unbox_float",
          "box_complex",
          "unbox_complex",
          "box_none",
          "unbox_none",
          "box_npdatetime",
          "unbox_npdatetime",
          "box_nptimedelta",
          "unbox_nptimedelta",
          "box_raw_pointer",
          "box_enum",
          "unbox_enum",
          "box_undefvar",
          "box_record",
          "unbox_record",
          "box_unicodecharseq",
          "unbox_unicodecharseq",
          "box_bytes",
          "box_charseq",
          "unbox_charseq",
          "box_optional",
          "unbox_optional",
          "unbox_slice",
          "box_slice_literal",
          "unbox_string_literal",
          "box_array",
          "unbox_buffer",
          "unbox_array",
          "box_tuple",
          "box_namedtuple",
          "unbox_tuple",
          "box_list",
          "_python_list_to_native",
          "unbox_list",
          "reflect_list",
          "_python_set_to_native",
          "unbox_set",
          "_native_set_to_python_list",
          "box_set",
          "reflect_set",
          "box_generator",
          "unbox_generator",
          "box_dtype",
          "unbox_dtype",
          "box_number_class",
          "unbox_number_class",
          "box_pyobject",
          "unbox_pyobject",
          "unbox_funcptr",
          "box_deferred",
          "unbox_deferred",
          "unbox_dispatcher",
          "box_pyobject",
          "unbox_unsupported",
          "box_unsupported",
          "box_literal",
          "box_meminfo_pointer",
          "unbox_meminfo_pointer",
          "unbox_typeref",
          "box_LiteralStrKeyDict",
          "unbox_numpy_random_bitgenerator",
          "unbox_numpy_random_generator",
          "box_numpy_random_generator",
          "cleanup",
          "cleanup",
          "__init__",
          "__enter__",
          "__exit__",
          "typeof",
          "check_element_type",
          "cleanup",
          "cleanup",
          "clear_extra_refs",
          "handle_failure",
          "cleanup",
          "object_getattr_safely",
          "wire_in_fnptrs",
          "cleanup"
        ],
        "classes": [
          "_NumbaTypeHelper"
        ],
        "num_lines": 1313
      },
      "/tmp/cs-hpc-demo-1/numba/core/consts.py": {
        "functions": [
          "__init__",
          "infer_constant",
          "_fail",
          "_do_infer",
          "_infer_expr",
          "_infer_call",
          "_infer_getattr"
        ],
        "classes": [
          "ConstantInference"
        ],
        "num_lines": 118
      },
      "/tmp/cs-hpc-demo-1/numba/core/intrinsics.py": {
        "functions": [
          "fix_divmod",
          "visit_Instruction"
        ],
        "classes": [
          "_DivmodFixer"
        ],
        "num_lines": 101
      },
      "/tmp/cs-hpc-demo-1/numba/core/generators.py": {
        "functions": [
          "from_generator_fndesc",
          "llvm_finalizer_name",
          "__init__",
          "call_conv",
          "get_args_ptr",
          "get_resume_index_ptr",
          "get_state_ptr",
          "lower_init_func",
          "lower_next_func",
          "lower_finalize_func",
          "return_from_generator",
          "create_resumption_block",
          "debug_print",
          "get_generator_type",
          "box_generator_struct",
          "lower_finalize_func_body",
          "get_generator_type",
          "box_generator_struct",
          "init_generator_state",
          "lower_finalize_func_body",
          "__init__",
          "lower_yield_suspend",
          "lower_yield_resume"
        ],
        "classes": [
          "GeneratorDescriptor",
          "BaseGeneratorLower",
          "GeneratorLower",
          "PyGeneratorLower",
          "LowerYield"
        ],
        "num_lines": 360
      },
      "/tmp/cs-hpc-demo-1/numba/core/descriptors.py": {
        "functions": [
          "__init__",
          "typing_context",
          "target_context"
        ],
        "classes": [
          "TargetDescriptor"
        ],
        "num_lines": 21
      },
      "/tmp/cs-hpc-demo-1/numba/core/targetconfig.py": {
        "functions": [
          "__init__",
          "type",
          "default",
          "doc",
          "top_or_none",
          "__init__",
          "top",
          "__len__",
          "enter",
          "__init__",
          "find_options",
          "__repr__",
          "__init__",
          "__repr__",
          "__hash__",
          "__eq__",
          "values",
          "is_set",
          "discard",
          "inherit_if_not_set",
          "copy",
          "summary",
          "_guard_option",
          "_summary_args",
          "_make_compression_dictionary",
          "get_mangle_string",
          "demangle",
          "make_prop",
          "repl",
          "getter",
          "setter",
          "delter"
        ],
        "classes": [
          "Option",
          "_FlagsStack",
          "ConfigStack",
          "_MetaTargetConfig",
          "_NotSetType",
          "TargetConfig"
        ],
        "num_lines": 322
      },
      "/tmp/cs-hpc-demo-1/numba/core/interpreter.py": {
        "functions": [
          "_remove_assignment_definition",
          "_call_function_ex_replace_kws_small",
          "_call_function_ex_replace_kws_large",
          "_call_function_ex_replace_args_small",
          "_call_function_ex_replace_args_large",
          "peep_hole_call_function_ex_to_call_function_kw",
          "peep_hole_list_to_tuple",
          "peep_hole_delete_with_exit",
          "peep_hole_fuse_dict_add_updates",
          "peep_hole_split_at_pop_block",
          "_build_new_build_map",
          "__init__",
          "__repr__",
          "__init__",
          "assign",
          "get_assignment_source",
          "__init__",
          "interpret",
          "post_process",
          "_end_try_blocks",
          "_legalize_exception_vars",
          "init_first_block",
          "_iter_inst",
          "_start_new_block",
          "_end_current_block",
          "_inject_call",
          "_insert_try_block_begin",
          "_insert_try_block_end",
          "_insert_exception_variables",
          "_insert_exception_check",
          "_remove_unused_temporaries",
          "_var_used_in_binop",
          "_insert_outgoing_phis",
          "get_global_value",
          "get_closure_value",
          "current_scope",
          "code_consts",
          "code_locals",
          "code_names",
          "code_cellvars",
          "code_freevars",
          "_dispatch",
          "store",
          "get",
          "insert_block",
          "op_NOP",
          "op_RESUME",
          "op_CACHE",
          "op_PRECALL",
          "op_PUSH_NULL",
          "op_RETURN_GENERATOR",
          "op_PRINT_ITEM",
          "op_PRINT_NEWLINE",
          "op_UNPACK_SEQUENCE",
          "op_FORMAT_SIMPLE",
          "op_FORMAT_VALUE",
          "op_BUILD_STRING",
          "op_BUILD_SLICE",
          "op_SLICE_0",
          "op_SLICE_1",
          "op_SLICE_2",
          "op_SLICE_3",
          "op_STORE_SLICE_0",
          "op_STORE_SLICE_1",
          "op_STORE_SLICE_2",
          "op_STORE_SLICE_3",
          "op_DELETE_SLICE_0",
          "op_DELETE_SLICE_1",
          "op_DELETE_SLICE_2",
          "op_DELETE_SLICE_3",
          "_op_LOAD_FAST",
          "op_STORE_FAST",
          "op_DELETE_FAST",
          "op_DUP_TOPX",
          "op_STORE_ATTR",
          "op_DELETE_ATTR",
          "op_LOAD_ATTR",
          "op_LOAD_CONST",
          "op_COPY_FREE_VARS",
          "op_SETUP_LOOP",
          "op_SETUP_WITH",
          "op_SETUP_FINALLY",
          "op_WITH_CLEANUP",
          "op_WITH_CLEANUP_START",
          "op_WITH_CLEANUP_FINISH",
          "op_END_FINALLY",
          "op_BEGIN_FINALLY",
          "op_CALL",
          "op_CALL_FUNCTION",
          "op_CALL_FUNCTION_KW",
          "op_CALL_FUNCTION_EX",
          "_build_tuple_unpack",
          "op_BUILD_TUPLE_UNPACK_WITH_CALL",
          "op_BUILD_TUPLE_UNPACK",
          "op_LIST_TO_TUPLE",
          "op_BUILD_CONST_KEY_MAP",
          "op_GET_ITER",
          "op_FOR_ITER",
          "op_STORE_SUBSCR",
          "op_DELETE_SUBSCR",
          "op_BUILD_TUPLE",
          "op_BUILD_LIST",
          "op_BUILD_SET",
          "op_SET_ADD",
          "op_SET_UPDATE",
          "op_DICT_UPDATE",
          "op_BUILD_MAP",
          "op_STORE_MAP",
          "op_UNARY_NEGATIVE",
          "op_UNARY_POSITIVE",
          "op_UNARY_INVERT",
          "op_UNARY_NOT",
          "_binop",
          "_inplace_binop",
          "op_BINARY_OP",
          "op_BINARY_ADD",
          "op_BINARY_SUBTRACT",
          "op_BINARY_MULTIPLY",
          "op_BINARY_DIVIDE",
          "op_BINARY_TRUE_DIVIDE",
          "op_BINARY_FLOOR_DIVIDE",
          "op_BINARY_MODULO",
          "op_BINARY_POWER",
          "op_BINARY_MATRIX_MULTIPLY",
          "op_BINARY_LSHIFT",
          "op_BINARY_RSHIFT",
          "op_BINARY_AND",
          "op_BINARY_OR",
          "op_BINARY_XOR",
          "op_INPLACE_ADD",
          "op_INPLACE_SUBTRACT",
          "op_INPLACE_MULTIPLY",
          "op_INPLACE_DIVIDE",
          "op_INPLACE_TRUE_DIVIDE",
          "op_INPLACE_FLOOR_DIVIDE",
          "op_INPLACE_MODULO",
          "op_INPLACE_POWER",
          "op_INPLACE_MATRIX_MULTIPLY",
          "op_INPLACE_LSHIFT",
          "op_INPLACE_RSHIFT",
          "op_INPLACE_AND",
          "op_INPLACE_OR",
          "op_INPLACE_XOR",
          "op_JUMP_ABSOLUTE",
          "op_JUMP_FORWARD",
          "op_JUMP_BACKWARD",
          "op_POP_BLOCK",
          "op_RETURN_VALUE",
          "op_COMPARE_OP",
          "op_IS_OP",
          "op_CONTAINS_OP",
          "op_BREAK_LOOP",
          "_op_JUMP_IF",
          "op_JUMP_IF_FALSE",
          "op_JUMP_IF_TRUE",
          "_jump_if_none",
          "op_POP_JUMP_FORWARD_IF_NONE",
          "op_POP_JUMP_FORWARD_IF_NOT_NONE",
          "op_POP_JUMP_BACKWARD_IF_NONE",
          "op_POP_JUMP_BACKWARD_IF_NOT_NONE",
          "op_POP_JUMP_FORWARD_IF_FALSE",
          "op_POP_JUMP_FORWARD_IF_TRUE",
          "op_POP_JUMP_BACKWARD_IF_FALSE",
          "op_POP_JUMP_BACKWARD_IF_TRUE",
          "op_POP_JUMP_IF_FALSE",
          "op_POP_JUMP_IF_TRUE",
          "op_JUMP_IF_FALSE_OR_POP",
          "op_JUMP_IF_TRUE_OR_POP",
          "op_CHECK_EXC_MATCH",
          "op_JUMP_IF_NOT_EXC_MATCH",
          "op_RERAISE",
          "op_RAISE_VARARGS",
          "op_YIELD_VALUE",
          "op_MAKE_FUNCTION",
          "op_MAKE_CLOSURE",
          "op_LIST_APPEND",
          "op_LIST_EXTEND",
          "op_MAP_ADD",
          "op_LOAD_METHOD",
          "op_CALL_METHOD",
          "op_BINARY_SLICE",
          "op_STORE_SLICE",
          "op_LOAD_FAST",
          "op_LOAD_FAST_LOAD_FAST",
          "op_STORE_FAST_LOAD_FAST",
          "op_STORE_FAST_STORE_FAST",
          "op_LOAD_FAST_AND_CLEAR",
          "process_slice",
          "process_args",
          "op_LOAD_SMALL_INT",
          "op_LOAD_GLOBAL",
          "op_LOAD_DEREF",
          "op_MAKE_CELL",
          "op_STORE_DEREF",
          "op_CALL_KW",
          "resolve_const",
          "get_literals",
          "op_RETURN_CONST",
          "op_TO_BOOL",
          "op_POP_JUMP_IF_NONE",
          "op_POP_JUMP_IF_NOT_NONE",
          "op_LOAD_CLOSURE",
          "op_CALL_INTRINSIC_1",
          "op_LOAD_SPECIAL",
          "op_LOAD_COMMON_CONSTANT",
          "find_postive_region",
          "op_LOAD_GLOBAL",
          "op_LOAD_DEREF",
          "op_STORE_DEREF",
          "op_BEFORE_WITH",
          "op_BINARY_SUBSCR",
          "op_LOAD_CLOSURE",
          "op_LOAD_ASSERTION_ERROR",
          "append_and_fix",
          "do_change"
        ],
        "classes": [
          "_UNKNOWN_VALUE",
          "Assigner",
          "Interpreter",
          "INTRINSIC_STOPITERATION_ERROR"
        ],
        "num_lines": 3556
      },
      "/tmp/cs-hpc-demo-1/numba/core/caching.py": {
        "functions": [
          "_cache_log",
          "make_library_cache",
          "cache_path",
          "load_overload",
          "save_overload",
          "enable",
          "disable",
          "flush",
          "cache_path",
          "load_overload",
          "save_overload",
          "enable",
          "disable",
          "flush",
          "ensure_cache_path",
          "get_cache_path",
          "get_source_stamp",
          "get_disambiguator",
          "from_function",
          "get_suitable_cache_subpath",
          "get_source_stamp",
          "get_disambiguator",
          "from_function",
          "__init__",
          "get_cache_path",
          "from_function",
          "__init__",
          "get_cache_path",
          "get_source_stamp",
          "__init__",
          "get_cache_path",
          "from_function",
          "__init__",
          "get_cache_path",
          "get_source_stamp",
          "get_disambiguator",
          "from_function",
          "__init__",
          "_split_zip_path",
          "get_cache_path",
          "get_source_stamp",
          "from_function",
          "__init__",
          "get_filename_base",
          "filename_base",
          "locator",
          "reduce",
          "rebuild",
          "check_cachable",
          "reduce",
          "rebuild",
          "check_cachable",
          "reduce",
          "rebuild",
          "check_cachable",
          "get_filename_base",
          "__init__",
          "flush",
          "save",
          "load",
          "_load_index",
          "_save_index",
          "_load_data",
          "_save_data",
          "_data_name",
          "_data_path",
          "_dump",
          "_open_for_write",
          "__init__",
          "__repr__",
          "cache_path",
          "enable",
          "disable",
          "flush",
          "load_overload",
          "_load_overload",
          "save_overload",
          "_save_overload",
          "_guard_against_spurious_io_errors",
          "_index_key"
        ],
        "classes": [
          "_Cache",
          "NullCache",
          "_CacheLocator",
          "_SourceFileBackedLocatorMixin",
          "UserProvidedCacheLocator",
          "InTreeCacheLocator",
          "InTreeCacheLocatorFsAgnostic",
          "UserWideCacheLocator",
          "IPythonCacheLocator",
          "ZipCacheLocator",
          "CacheImpl",
          "CompileResultCacheImpl",
          "CodeLibraryCacheImpl",
          "IndexDataCacheFile",
          "Cache",
          "FunctionCache",
          "CustomCodeLibraryCacheImpl",
          "LibraryCache"
        ],
        "num_lines": 817
      },
      "/tmp/cs-hpc-demo-1/numba/core/utils.py": {
        "functions": [
          "erase_traceback",
          "safe_relpath",
          "_at_shutdown",
          "shutting_down",
          "order_by_target_specificity",
          "runonce",
          "bit_length",
          "stream_list",
          "format_time",
          "benchmark",
          "chain_exception",
          "get_nargs_range",
          "unify_function_types",
          "unified_function_type",
          "get_hashable_key",
          "dump_llvm",
          "__init_subclass__",
          "__init__",
          "push",
          "pop",
          "top",
          "__len__",
          "enter",
          "__init__",
          "set",
          "unset",
          "_check_attr",
          "__getattr__",
          "__setattr__",
          "__repr__",
          "copy",
          "__eq__",
          "__ne__",
          "__hash__",
          "key",
          "__init__",
          "__contains__",
          "__iter__",
          "__len__",
          "add",
          "discard",
          "__init__",
          "__len__",
          "__iter__",
          "__contains__",
          "add",
          "discard",
          "update",
          "__init__",
          "__getitem__",
          "__len__",
          "__iter__",
          "__init__",
          "__getitem__",
          "__setitem__",
          "__delitem__",
          "__len__",
          "__iter__",
          "__setitem__",
          "inner",
          "sublist_iterator",
          "__init__",
          "__repr__",
          "__init__",
          "__reduce__",
          "__init__",
          "__get__",
          "__init__",
          "__str__",
          "default"
        ],
        "classes": [
          "ThreadLocalStack",
          "ConfigOptions",
          "OrderedSet",
          "MutableSortedSet",
          "SortedMap",
          "MutableSortedMap",
          "UniqueDict",
          "BenchmarkResult",
          "_RedirectSubpackage",
          "threadsafe_cached_property",
          "_lazy_pformat",
          "_LazyJSONEncoder"
        ],
        "num_lines": 783
      },
      "/tmp/cs-hpc-demo-1/numba/core/debuginfo.py": {
        "functions": [
          "suspend_emission",
          "mark_variable",
          "mark_location",
          "mark_subprogram",
          "initialize",
          "finalize",
          "__init__",
          "mark_variable",
          "mark_location",
          "mark_subprogram",
          "initialize",
          "finalize",
          "__init__",
          "initialize",
          "_var_type",
          "mark_variable",
          "mark_location",
          "mark_subprogram",
          "finalize",
          "_set_module_flags",
          "_add_subprogram",
          "_add_location",
          "_const_int",
          "_const_bool",
          "_di_file",
          "_di_compile_unit",
          "_di_subroutine_type",
          "_di_subprogram",
          "_di_location"
        ],
        "classes": [
          "AbstractDIBuilder",
          "DummyDIBuilder",
          "DIBuilder"
        ],
        "num_lines": 456
      },
      "/tmp/cs-hpc-demo-1/numba/core/cpu_options.py": {
        "functions": [
          "encode",
          "__repr__",
          "__init__",
          "__bool__",
          "encode",
          "__eq__",
          "__init__",
          "_get_values",
          "__eq__",
          "encode",
          "__init__",
          "is_never_inline",
          "is_always_inline",
          "has_cost_model",
          "value",
          "__eq__",
          "encode"
        ],
        "classes": [
          "AbstractOptionValue",
          "FastMathOptions",
          "ParallelOptions",
          "InlineOptions"
        ],
        "num_lines": 181
      },
      "/tmp/cs-hpc-demo-1/numba/core/entrypoints.py": {
        "functions": [
          "init_all",
          "load_ep"
        ],
        "classes": [],
        "num_lines": 46
      },
      "/tmp/cs-hpc-demo-1/numba/core/typeinfer.py": {
        "functions": [
          "fold_arg_vars",
          "_is_array_not_precise",
          "register_dispatcher",
          "__init__",
          "add_type",
          "lock",
          "union",
          "__repr__",
          "defined",
          "get",
          "getone",
          "__len__",
          "__init__",
          "append",
          "propagate",
          "__init__",
          "__call__",
          "refine",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "resolve",
          "_add_refine_map",
          "refine",
          "get_call_signature",
          "__call__",
          "__init__",
          "__call__",
          "refine",
          "__repr__",
          "_refine_target_type",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "get_call_signature",
          "__init__",
          "__call__",
          "get_call_signature",
          "set_context",
          "__getitem__",
          "__setitem__",
          "__init__",
          "copy",
          "_mangle_arg_name",
          "_get_return_vars",
          "get_argument_types",
          "seed_argument",
          "seed_type",
          "seed_return",
          "build_constraint",
          "return_types_from_partial",
          "propagate",
          "add_type",
          "add_calltype",
          "copy_type",
          "lock_type",
          "propagate_refined_type",
          "unify",
          "get_generator_type",
          "get_function_types",
          "_unify_return_types",
          "get_return_type",
          "get_state_token",
          "constrain_statement",
          "typeof_setitem",
          "typeof_storemap",
          "typeof_static_setitem",
          "typeof_delitem",
          "typeof_setattr",
          "typeof_print",
          "typeof_assign",
          "resolve_value_type",
          "typeof_arg",
          "typeof_const",
          "typeof_yield",
          "sentry_modified_builtin",
          "resolve_call",
          "typeof_global",
          "typeof_expr",
          "typeof_call",
          "typeof_intrinsic_call",
          "propagate_started",
          "propagate_finished",
          "unify_finished",
          "__init__",
          "_dump_state",
          "propagate_started",
          "propagate_finished",
          "unify_finished",
          "find_offender",
          "diagnose_imprecision",
          "check_var",
          "check_undef_var_in_calls",
          "mark_array_ro",
          "check",
          "check_type"
        ],
        "classes": [
          "NOTSET",
          "TypeVar",
          "ConstraintNetwork",
          "Propagate",
          "ArgConstraint",
          "BuildTupleConstraint",
          "_BuildContainerConstraint",
          "BuildListConstraint",
          "BuildSetConstraint",
          "BuildMapConstraint",
          "ExhaustIterConstraint",
          "PairFirstConstraint",
          "PairSecondConstraint",
          "StaticGetItemConstraint",
          "TypedGetItemConstraint",
          "CallConstraint",
          "IntrinsicCallConstraint",
          "GetAttrConstraint",
          "SetItemRefinement",
          "SetItemConstraint",
          "StaticSetItemConstraint",
          "DelItemConstraint",
          "SetAttrConstraint",
          "PrintConstraint",
          "TypeVarMap",
          "TypeInferer",
          "NullDebug",
          "TypeInferDebug"
        ],
        "num_lines": 1797
      },
      "/tmp/cs-hpc-demo-1/numba/core/llvm_bindings.py": {
        "functions": [
          "_inlining_threshold",
          "create_pass_builder"
        ],
        "classes": [],
        "num_lines": 48
      },
      "/tmp/cs-hpc-demo-1/numba/core/environment.py": {
        "functions": [
          "_rebuild_env",
          "lookup_environment",
          "from_fndesc",
          "can_cache",
          "__reduce__",
          "__del__",
          "__repr__"
        ],
        "classes": [
          "Environment"
        ],
        "num_lines": 64
      },
      "/tmp/cs-hpc-demo-1/numba/core/errors.py": {
        "functions": [
          "_is_numba_core_config_loaded",
          "deprecated",
          "_format_msg",
          "new_error_context",
          "__init__",
          "__init__",
          "code",
          "errmsg",
          "filename",
          "indicate",
          "highlight",
          "reset",
          "__init__",
          "code",
          "errmsg",
          "filename",
          "indicate",
          "highlight",
          "reset",
          "termcolor",
          "decorator",
          "__init__",
          "catch_warnings",
          "flush",
          "__enter__",
          "__exit__",
          "__init__",
          "contexts",
          "add_context",
          "patch_message",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "bind_fold_arguments",
          "combine",
          "__or__",
          "termcolor",
          "__init__",
          "__enter__",
          "__exit__",
          "__init__",
          "__enter__",
          "__exit__",
          "__init__",
          "_markup",
          "code",
          "errmsg",
          "filename",
          "indicate",
          "highlight",
          "reset",
          "wrapper",
          "key",
          "highlight",
          "__init__",
          "code",
          "errmsg",
          "filename",
          "indicate",
          "highlight",
          "reset",
          "highlight"
        ],
        "classes": [
          "NumbaWarning",
          "NumbaPerformanceWarning",
          "NumbaDeprecationWarning",
          "NumbaPendingDeprecationWarning",
          "NumbaParallelSafetyWarning",
          "NumbaTypeSafetyWarning",
          "NumbaExperimentalFeatureWarning",
          "NumbaInvalidConfigWarning",
          "NumbaPedanticWarning",
          "NumbaIRAssumptionWarning",
          "NumbaDebugInfoWarning",
          "NumbaSystemWarning",
          "_ColorScheme",
          "_DummyColorScheme",
          "WarningsFixer",
          "NumbaError",
          "UnsupportedError",
          "UnsupportedBytecodeError",
          "UnsupportedRewriteError",
          "IRError",
          "RedefinedError",
          "NotDefinedError",
          "VerificationError",
          "DeprecationError",
          "LoweringError",
          "UnsupportedParforsError",
          "ForbiddenConstruct",
          "TypingError",
          "UntypedAttributeError",
          "ByteCodeSupportError",
          "CompilerError",
          "ConstantInferenceError",
          "InternalError",
          "InternalTargetMismatchError",
          "NonexistentTargetError",
          "RequireLiteralValue",
          "ForceLiteralArg",
          "LiteralTypingError",
          "NumbaValueError",
          "NumbaTypeError",
          "NumbaAttributeError",
          "NumbaAssertionError",
          "NumbaNotImplementedError",
          "NumbaKeyError",
          "NumbaIndexError",
          "NumbaRuntimeError",
          "ColorShell",
          "reset_terminal",
          "HighlightColorScheme",
          "NOPColorScheme"
        ],
        "num_lines": 875
      },
      "/tmp/cs-hpc-demo-1/numba/core/typed_passes.py": {
        "functions": [
          "fallback_context",
          "type_inference_stage",
          "_reload_parfors",
          "__init__",
          "run_pass",
          "__init__",
          "get_analysis_usage",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "lowering_class",
          "run_pass",
          "lowering_class",
          "lowering_class",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "_get_attr_info",
          "_get_callable_info",
          "_do_work_expr",
          "_run_inliner",
          "_add_method_self_arg",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "_strip_phi_nodes",
          "_simplify_conditionally_defined_variable",
          "legalize_return_type",
          "get_func_type",
          "select_template",
          "unver_or_undef",
          "legalize_all_versioned_names"
        ],
        "classes": [
          "BaseTypeInference",
          "NopythonTypeInference",
          "PartialTypeInference",
          "AnnotateTypes",
          "NopythonRewrites",
          "PreParforPass",
          "ParforPass",
          "ParforFusionPass",
          "ParforPreLoweringPass",
          "DumpParforDiagnostics",
          "BaseNativeLowering",
          "NativeLowering",
          "NativeParforLowering",
          "NoPythonSupportedFeatureValidation",
          "IRLegalization",
          "NoPythonBackend",
          "InlineOverloads",
          "DeadCodeElimination",
          "PreLowerStripPhis"
        ],
        "num_lines": 1041
      },
      "/tmp/cs-hpc-demo-1/numba/core/bytecode.py": {
        "functions": [
          "get_function_object",
          "get_code_object",
          "_as_opcodes",
          "_patched_opargs",
          "_fix_LOAD_GLOBAL_arg",
          "__init__",
          "is_jump",
          "is_terminator",
          "get_jump_target",
          "__repr__",
          "block_effect",
          "_unpack_opargs",
          "__init__",
          "__iter__",
          "_fetch_opcode",
          "next",
          "read_arg",
          "__init__",
          "_compute_lineno",
          "__iter__",
          "__getitem__",
          "__contains__",
          "dump",
          "_compute_used_globals",
          "get_used_globals",
          "__init__",
          "fixup_eh",
          "find_exception_entry",
          "__init__",
          "ordered_offsets",
          "remove_build_list_swap_pattern",
          "from_function",
          "derive",
          "_reduce_states",
          "_rebuild",
          "_unpack_opargs",
          "label_marker",
          "pop_and_merge_exceptions"
        ],
        "classes": [
          "ByteCodeInst",
          "ByteCodeIter",
          "_ByteCode",
          "ByteCodePy311",
          "ByteCodePy312",
          "FunctionIdentity"
        ],
        "num_lines": 688
      },
      "/tmp/cs-hpc-demo-1/numba/core/byteflow.py": {
        "functions": [
          "_is_null_temp_reg",
          "adapt_state_infos",
          "_flatten_inst_regs",
          "__init__",
          "__hash__",
          "__lt__",
          "__eq__",
          "__repr__",
          "__init__",
          "run",
          "_build_cfg",
          "_prune_phis",
          "_is_implicit_new_block",
          "__init__",
          "get_debug_loc",
          "dispatch",
          "_adjust_except_stack",
          "op_NOP",
          "op_RESUME",
          "op_CACHE",
          "op_PRECALL",
          "op_PUSH_NULL",
          "op_RETURN_GENERATOR",
          "op_FORMAT_VALUE",
          "op_BUILD_STRING",
          "op_POP_TOP",
          "op_COPY_FREE_VARS",
          "op_MAKE_CELL",
          "op_LOAD_DEREF",
          "op_LOAD_CONST",
          "op_LOAD_ATTR",
          "op_LOAD_FAST",
          "op_DELETE_FAST",
          "op_DELETE_ATTR",
          "op_STORE_ATTR",
          "op_STORE_DEREF",
          "op_STORE_FAST",
          "op_SLICE_1",
          "op_SLICE_2",
          "op_SLICE_3",
          "op_STORE_SLICE_0",
          "op_STORE_SLICE_1",
          "op_STORE_SLICE_2",
          "op_STORE_SLICE_3",
          "op_DELETE_SLICE_0",
          "op_DELETE_SLICE_1",
          "op_DELETE_SLICE_2",
          "op_DELETE_SLICE_3",
          "op_BUILD_SLICE",
          "_op_POP_JUMP_IF",
          "_op_JUMP_IF_OR_POP",
          "op_POP_JUMP_FORWARD_IF_NONE",
          "op_POP_JUMP_FORWARD_IF_NOT_NONE",
          "op_POP_JUMP_BACKWARD_IF_NONE",
          "op_POP_JUMP_BACKWARD_IF_NOT_NONE",
          "op_POP_JUMP_FORWARD_IF_FALSE",
          "op_POP_JUMP_FORWARD_IF_TRUE",
          "op_POP_JUMP_BACKWARD_IF_FALSE",
          "op_POP_JUMP_BACKWARD_IF_TRUE",
          "op_JUMP_FORWARD",
          "op_JUMP_BACKWARD",
          "op_JUMP_ABSOLUTE",
          "op_BREAK_LOOP",
          "op_RETURN_VALUE",
          "op_YIELD_VALUE",
          "op_BEGIN_FINALLY",
          "op_END_FINALLY",
          "op_POP_FINALLY",
          "op_CALL_FINALLY",
          "op_WITH_EXCEPT_START",
          "op_WITH_CLEANUP_START",
          "op_WITH_CLEANUP_FINISH",
          "op_SETUP_LOOP",
          "op_SETUP_WITH",
          "_setup_try",
          "op_PUSH_EXC_INFO",
          "op_SETUP_FINALLY",
          "op_POP_BLOCK",
          "op_STORE_SUBSCR",
          "op_DELETE_SUBSCR",
          "op_CALL",
          "op_KW_NAMES",
          "op_CALL_FUNCTION",
          "op_CALL_FUNCTION_KW",
          "_dup_topx",
          "op_DUP_TOPX",
          "op_DUP_TOP",
          "op_DUP_TOP_TWO",
          "op_COPY",
          "op_SWAP",
          "op_ROT_TWO",
          "op_ROT_THREE",
          "op_ROT_FOUR",
          "op_UNPACK_SEQUENCE",
          "op_BUILD_TUPLE",
          "_build_tuple_unpack",
          "op_BUILD_TUPLE_UNPACK_WITH_CALL",
          "op_BUILD_TUPLE_UNPACK",
          "op_LIST_TO_TUPLE",
          "op_BUILD_CONST_KEY_MAP",
          "op_BUILD_LIST",
          "op_LIST_APPEND",
          "op_LIST_EXTEND",
          "op_BUILD_MAP",
          "op_MAP_ADD",
          "op_BUILD_SET",
          "op_SET_ADD",
          "op_SET_UPDATE",
          "op_DICT_UPDATE",
          "op_GET_ITER",
          "op_FOR_ITER",
          "op_GEN_START",
          "op_BINARY_OP",
          "_unaryop",
          "_binaryop",
          "op_MAKE_FUNCTION",
          "op_SET_FUNCTION_ATTRIBUTE",
          "op_MAKE_CLOSURE",
          "op_LOAD_CLOSURE",
          "op_CHECK_EXC_MATCH",
          "op_JUMP_IF_NOT_EXC_MATCH",
          "op_CALL_METHOD",
          "__init__",
          "__repr__",
          "get_identity",
          "__hash__",
          "__lt__",
          "__eq__",
          "pc_initial",
          "instructions",
          "outgoing_edges",
          "outgoing_phis",
          "blockstack_initial",
          "stack_depth",
          "find_initial_try_block",
          "has_terminated",
          "get_inst",
          "advance_pc",
          "make_temp",
          "append",
          "get_tos",
          "peek",
          "push",
          "pop",
          "swap",
          "push_block",
          "reset_stack",
          "make_block",
          "pop_block",
          "pop_block_and_above",
          "get_top_block",
          "get_top_block_either",
          "has_active_try",
          "get_varname",
          "get_varname_by_arg",
          "terminate",
          "fork",
          "split_new_block",
          "get_outgoing_states",
          "get_outgoing_edgepushed",
          "__init__",
          "pop_kw_names",
          "set_kw_names",
          "is_in_exception",
          "get_exception",
          "in_with",
          "make_null",
          "__init__",
          "set_function_attribute",
          "get_function_attributes",
          "__init__",
          "infos",
          "process_function_attributes",
          "__init__",
          "graph",
          "backbone",
          "blocks",
          "iterliveblocks",
          "dump",
          "__init__",
          "_run_handle_exception",
          "get_used_phis_per_state",
          "find_use_defs",
          "propagate_phi_map",
          "apply_changes",
          "_guard_with_as",
          "op_FORMAT_SIMPLE",
          "op_TO_BOOL",
          "op_LOAD_GLOBAL",
          "op_LOAD_SMALL_INT",
          "op_LOAD_FAST_LOAD_FAST",
          "op_STORE_FAST_LOAD_FAST",
          "op_STORE_FAST_STORE_FAST",
          "op_BINARY_SLICE",
          "op_STORE_SLICE",
          "op_RETURN_CONST",
          "op_RAISE_VARARGS",
          "op_END_FOR",
          "op_POP_EXCEPT",
          "op_CALL_KW",
          "op_CALL_FUNCTION_EX",
          "op_CALL_INTRINSIC_1",
          "op_RERAISE",
          "op_LOAD_SPECIAL",
          "op_LOAD_COMMON_CONSTANT",
          "_run_handle_exception",
          "_guard_with_as",
          "op_LOAD_GLOBAL",
          "op_RAISE_VARARGS",
          "op_END_FOR",
          "op_BEFORE_WITH",
          "op_POP_EXCEPT",
          "op_BINARY_SUBSCR",
          "op_CALL_FUNCTION_EX",
          "op_LOAD_ASSERTION_ERROR",
          "op_RERAISE",
          "op_LOAD_METHOD",
          "op_LOAD_GLOBAL",
          "op_CALL_FUNCTION_EX",
          "op_LOAD_METHOD"
        ],
        "classes": [
          "BlockKind",
          "Flow",
          "TraceRunner",
          "_State",
          "StatePy311",
          "StatePy313",
          "AdaptDFA",
          "AdaptCFA",
          "AdaptCFBlock",
          "CALL_INTRINSIC_1_Operand"
        ],
        "num_lines": 2453
      },
      "/tmp/cs-hpc-demo-1/numba/core/untyped_passes.py": {
        "functions": [
          "fallback_context",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "get_analysis_usage",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "_do_work",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "_split_exit_block",
          "__init__",
          "run_pass",
          "_split_entry_block",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "analyse_tuple",
          "add_offset_to_labels_w_ignore",
          "inject_loop_body",
          "gen_switch",
          "apply_transform",
          "unroll_loop",
          "run_pass",
          "__init__",
          "assess_loop",
          "transform",
          "run_pass",
          "__init__",
          "get_analysis_usage",
          "run_pass",
          "__init__",
          "run_pass",
          "get_analysis_usage",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "_patch_locals",
          "__init__",
          "run_pass",
          "get_call_args",
          "find_unroll_loops",
          "ensure_no_nested_unroll",
          "collect_literal_unroll_info",
          "get_range"
        ],
        "classes": [
          "ExtractByteCode",
          "TranslateByteCode",
          "FixupArgs",
          "IRProcessing",
          "RewriteSemanticConstants",
          "DeadBranchPrune",
          "InlineClosureLikes",
          "GenericRewrites",
          "WithLifting",
          "InlineInlinables",
          "PreserveIR",
          "FindLiterallyCalls",
          "CanonicalizeLoopExit",
          "CanonicalizeLoopEntry",
          "PrintIRCFG",
          "MakeFunctionToJitFunction",
          "TransformLiteralUnrollConstListToTuple",
          "MixedContainerUnroller",
          "IterLoopCanonicalization",
          "PropagateLiterals",
          "LiteralPropagationSubPipelinePass",
          "LiteralUnroll",
          "SimplifyCFG",
          "ReconstructSSA",
          "RewriteDynamicRaises"
        ],
        "num_lines": 1815
      },
      "/tmp/cs-hpc-demo-1/numba/core/callwrapper.py": {
        "functions": [
          "__init__",
          "add_arg",
          "emit_cleanup",
          "__init__",
          "emit_cleanup",
          "__init__",
          "build",
          "build_wrapper",
          "get_env",
          "_simplified_return_type",
          "debug_print",
          "cleanup_arg"
        ],
        "classes": [
          "_ArgManager",
          "_GilManager",
          "PyCallWrapper"
        ],
        "num_lines": 226
      },
      "/tmp/cs-hpc-demo-1/numba/core/codegen.py": {
        "functions": [
          "_is_x86",
          "_parse_refprune_flags",
          "dump",
          "_proxy",
          "initialize_llvm",
          "get_host_cpu_features",
          "__init__",
          "pretty_printer",
          "display",
          "_repr_svg_",
          "__repr__",
          "__init__",
          "has_dynamic_globals",
          "recorded_timings",
          "codegen",
          "name",
          "__repr__",
          "_raise_if_finalized",
          "_ensure_finalized",
          "create_ir_module",
          "add_linking_library",
          "add_ir_module",
          "finalize",
          "get_function",
          "get_llvm_str",
          "get_asm_str",
          "enable_object_caching",
          "_get_compiled_object",
          "_set_compiled_object",
          "__init__",
          "_optimize_functions",
          "_optimize_final_module",
          "_get_module_for_linking",
          "add_linking_library",
          "add_ir_module",
          "add_llvm_module",
          "finalize",
          "_finalize_dynamic_globals",
          "_verify_declare_only_symbols",
          "_finalize_final_module",
          "get_defined_functions",
          "get_function",
          "_sentry_cache_disable_inspection",
          "get_llvm_str",
          "get_asm_str",
          "get_function_cfg",
          "get_disasm_cfg",
          "_dump_elf",
          "_object_compiled_hook",
          "_object_getbuffer_hook",
          "serialize_using_bitcode",
          "serialize_using_object_code",
          "_unserialize",
          "emit_native_object",
          "emit_bitcode",
          "_finalize_specific",
          "get_pointer_to_function",
          "_finalize_specific",
          "__init__",
          "scan_unresolved_symbols",
          "scan_defined_symbols",
          "resolve",
          "wrapper",
          "__init__",
          "is_symbol_defined",
          "_load_defined_symbols",
          "add_module",
          "add_global_mapping",
          "_create_empty_module",
          "_add_module",
          "target_data",
          "create_library",
          "unserialize_library",
          "__init__",
          "_init",
          "_create_empty_module",
          "_module_pass_manager",
          "_function_pass_manager",
          "_pass_builder",
          "_check_llvm_bugs",
          "magic_tuple",
          "_scan_and_fix_unresolved_refs",
          "insert_unresolved_ref",
          "_get_host_cpu_name",
          "_get_host_cpu_features",
          "__init__",
          "_customize_tm_options",
          "_customize_tm_features",
          "_add_module",
          "_customize_tm_options",
          "_customize_tm_features",
          "_add_module",
          "set_env",
          "parse_config",
          "get_metadata",
          "init_digraph",
          "wrap",
          "clean",
          "printer",
          "metadata_interleave"
        ],
        "classes": [
          "_CFG",
          "CodeLibrary",
          "CPUCodeLibrary",
          "AOTCodeLibrary",
          "JITCodeLibrary",
          "RuntimeLinker",
          "JitEngine",
          "Codegen",
          "CPUCodegen",
          "AOTCPUCodegen",
          "JITCPUCodegen"
        ],
        "num_lines": 1441
      },
      "/tmp/cs-hpc-demo-1/numba/core/target_extension.py": {
        "functions": [
          "current_target",
          "get_local_target",
          "resolve_target_str",
          "resolve_dispatcher_from_str",
          "_get_local_target_checked",
          "__getitem__",
          "__init__",
          "__enter__",
          "__exit__",
          "__call__",
          "inherits_from"
        ],
        "classes": [
          "_TargetRegistry",
          "target_override",
          "JitDecorator",
          "Target",
          "Generic",
          "CPU",
          "GPU",
          "CUDA",
          "NPyUfunc"
        ],
        "num_lines": 169
      },
      "/tmp/cs-hpc-demo-1/numba/core/controlflow.py": {
        "functions": [
          "__init__",
          "__repr__",
          "__iter__",
          "__eq__",
          "__hash__",
          "__eq__",
          "__ne__",
          "_non_empty_items",
          "__init__",
          "add_node",
          "add_edge",
          "successors",
          "predecessors",
          "set_entry_point",
          "process",
          "dominators",
          "post_dominators",
          "immediate_dominators",
          "dominance_frontier",
          "dominator_tree",
          "_exit_points",
          "_doms",
          "_back_edges",
          "_topo_order",
          "_descs",
          "_loops",
          "_in_loops",
          "_post_doms",
          "_idom",
          "_df",
          "_domtree",
          "descendents",
          "entry_point",
          "exit_points",
          "backbone",
          "loops",
          "in_loops",
          "dead_nodes",
          "nodes",
          "topo_order",
          "topo_sort",
          "dump",
          "render_dot",
          "_add_edge",
          "_remove_node_edges",
          "_dfs",
          "_eliminate_dead_blocks",
          "_find_exit_points",
          "_find_postorder",
          "_find_immediate_dominators",
          "_find_dominator_tree",
          "_find_dominance_frontier",
          "_find_dominators_internal",
          "_find_dominators",
          "_find_post_dominators",
          "_find_back_edges",
          "_find_topo_order",
          "_find_descendents",
          "_find_loops",
          "_find_in_loops",
          "_dump_adj_lists",
          "__eq__",
          "__ne__",
          "__init__",
          "iterblocks",
          "iterliveblocks",
          "incoming_blocks",
          "dump",
          "run",
          "jump",
          "_iter_inst",
          "_use_new_block",
          "_start_new_block",
          "_guard_with_as",
          "op_SETUP_LOOP",
          "op_SETUP_WITH",
          "op_POP_BLOCK",
          "op_FOR_ITER",
          "_op_ABSOLUTE_JUMP_IF",
          "_op_ABSOLUTE_JUMP_OR_POP",
          "op_JUMP_ABSOLUTE",
          "op_JUMP_FORWARD",
          "op_RETURN_VALUE",
          "op_RAISE_VARARGS",
          "op_BREAK_LOOP",
          "dfs_rec",
          "intersect",
          "push_state",
          "_dfs_rec",
          "op_RETURN_CONST"
        ],
        "classes": [
          "CFBlock",
          "Loop",
          "_DictOfContainers",
          "CFGraph",
          "ControlFlowAnalysis"
        ],
        "num_lines": 979
      },
      "/tmp/cs-hpc-demo-1/numba/core/base.py": {
        "functions": [
          "_load_global_helpers",
          "_has_loc",
          "_initialize_llvm_lock_event",
          "__init__",
          "find",
          "_find",
          "_select_compatible",
          "_best_signature",
          "_sort_signatures",
          "_match_arglist",
          "_match",
          "append",
          "enable_boundscheck",
          "enable_boundscheck",
          "__init__",
          "init",
          "refresh",
          "load_additional_registries",
          "mangler",
          "get_env_name",
          "declare_env_global",
          "get_arg_packer",
          "get_data_packer",
          "target_data",
          "nonconst_module_attrs",
          "nrt",
          "subtarget",
          "install_registry",
          "insert_func_defn",
          "_insert_getattr_defn",
          "_insert_setattr_defn",
          "_insert_cast_defn",
          "_insert_get_constant_defn",
          "insert_user_function",
          "insert_generator",
          "remove_user_function",
          "get_external_function_type",
          "declare_function",
          "declare_external_function",
          "insert_const_string",
          "insert_const_bytes",
          "insert_unique_const",
          "get_argument_type",
          "get_return_type",
          "get_data_type",
          "get_value_type",
          "pack_value",
          "unpack_value",
          "get_constant_generic",
          "get_constant",
          "get_constant_undef",
          "get_constant_null",
          "get_function",
          "get_generator_desc",
          "get_generator_impl",
          "get_bound_function",
          "get_getattr",
          "get_setattr",
          "get_argument_value",
          "get_returned_value",
          "get_return_value",
          "get_value_as_argument",
          "get_value_as_data",
          "get_data_as_value",
          "pair_first",
          "pair_second",
          "cast",
          "generic_compare",
          "make_optional_none",
          "make_optional_value",
          "is_true",
          "get_c_value",
          "call_external_function",
          "get_function_pointer_type",
          "call_function_pointer",
          "print_string",
          "debug_print",
          "printf",
          "get_struct_type",
          "get_dummy_value",
          "get_dummy_type",
          "_compile_subroutine_no_cache",
          "compile_subroutine",
          "compile_internal",
          "call_internal",
          "call_internal_no_propagate",
          "call_unresolved",
          "get_executable",
          "get_python_api",
          "sentry_record_alignment",
          "get_helper_class",
          "_make_helper",
          "make_helper",
          "make_data_helper",
          "make_array",
          "populate_array",
          "make_complex",
          "make_tuple",
          "make_constant_array",
          "add_dynamic_addr",
          "get_abi_sizeof",
          "get_abi_alignment",
          "get_preferred_array_alignment",
          "post_lowering",
          "create_module",
          "active_code_library",
          "push_code_library",
          "add_linking_libs",
          "get_ufunc_info",
          "__init__",
          "__call__",
          "__getattr__",
          "__repr__",
          "__init__",
          "__call__",
          "__repr__",
          "enter_fn",
          "exit_fn",
          "wrap_setattr",
          "wrapped",
          "wrapper",
          "imp"
        ],
        "classes": [
          "OverloadSelector",
          "BaseContext",
          "_wrap_impl",
          "_wrap_missing_loc"
        ],
        "num_lines": 1261
      },
      "/tmp/cs-hpc-demo-1/numba/core/cgutils.py": {
        "functions": [
          "as_bool_bit",
          "make_anonymous_struct",
          "make_bytearray",
          "create_struct_proxy",
          "copy_struct",
          "alloca_once",
          "sizeof",
          "alloca_once_value",
          "insert_pure_function",
          "get_or_insert_function",
          "get_or_insert_named_metadata",
          "add_global_variable",
          "terminate",
          "get_null_value",
          "is_null",
          "is_not_null",
          "if_unlikely",
          "if_likely",
          "ifnot",
          "increment_index",
          "for_range",
          "for_range_slice",
          "for_range_slice_generic",
          "loop_nest",
          "_loop_nest",
          "pack_array",
          "pack_struct",
          "unpack_tuple",
          "get_item_pointer",
          "do_boundscheck",
          "get_item_pointer2",
          "_scalar_pred_against_zero",
          "is_scalar_zero",
          "is_not_scalar_zero",
          "is_scalar_zero_or_nan",
          "is_scalar_neg",
          "early_exit_if",
          "early_exit_if_null",
          "guard_null",
          "guard_memory_error",
          "if_zero",
          "is_pointer",
          "get_record_member",
          "is_neg_int",
          "gep_inbounds",
          "gep",
          "pointer_add",
          "memset",
          "memset_padding",
          "global_constant",
          "divmod_by_constant",
          "cbranch_or_continue",
          "memcpy",
          "_raw_memcpy",
          "raw_memcpy",
          "raw_memmove",
          "muladd_with_overflow",
          "printf",
          "snprintf",
          "snprintf_stackbuffer",
          "normalize_ir_text",
          "hexdump",
          "is_nonelike",
          "is_empty_tuple",
          "create_constant_array",
          "__init__",
          "_make_refs",
          "_get_be_type",
          "_cast_member_to_value",
          "_cast_member_from_value",
          "_get_ptr_by_index",
          "_get_ptr_by_name",
          "__getattr__",
          "__setattr__",
          "__getitem__",
          "__setitem__",
          "__len__",
          "_getpointer",
          "_getvalue",
          "_setvalue",
          "_get_be_type",
          "_cast_member_to_value",
          "_cast_member_from_value",
          "_get_be_type",
          "_cast_member_to_value",
          "_cast_member_from_value",
          "__init__",
          "_get_ptr_by_index",
          "_get_ptr_by_name",
          "__getattr__",
          "__setattr__",
          "__getitem__",
          "__setitem__",
          "__len__",
          "_getpointer",
          "_getvalue",
          "_setvalue",
          "do_break",
          "cm_cond",
          "_dbg"
        ],
        "classes": [
          "_StructProxy",
          "ValueStructProxy",
          "DataStructProxy",
          "Structure"
        ],
        "num_lines": 1241
      },
      "/tmp/cs-hpc-demo-1/numba/core/pythonapi.py": {
        "functions": [
          "__init__",
          "register",
          "lookup",
          "box",
          "unbox",
          "set_error",
          "box",
          "reflect",
          "__init__",
          "__init__",
          "add_const",
          "read_const",
          "__init__",
          "get_env_manager",
          "emit_environment_sentry",
          "incref",
          "decref",
          "get_type",
          "parse_tuple_and_keywords",
          "parse_tuple",
          "unpack_tuple",
          "err_occurred",
          "err_clear",
          "err_set_string",
          "err_format",
          "raise_object",
          "err_set_object",
          "err_set_none",
          "err_write_unraisable",
          "err_fetch",
          "err_restore",
          "err_push",
          "get_c_object",
          "raise_missing_global_error",
          "raise_missing_name_error",
          "fatal_error",
          "dict_getitem_string",
          "dict_getitem",
          "dict_new",
          "dict_setitem",
          "dict_setitem_string",
          "dict_pack",
          "float_from_double",
          "number_as_ssize_t",
          "number_long",
          "long_as_ulonglong",
          "long_as_longlong",
          "long_as_voidptr",
          "_long_from_native_int",
          "long_from_long",
          "long_from_ulong",
          "long_from_ssize_t",
          "long_from_longlong",
          "long_from_ulonglong",
          "long_from_signed_int",
          "long_from_unsigned_int",
          "_get_number_operator",
          "_call_number_operator",
          "number_add",
          "number_subtract",
          "number_multiply",
          "number_truedivide",
          "number_floordivide",
          "number_remainder",
          "number_matrix_multiply",
          "number_lshift",
          "number_rshift",
          "number_and",
          "number_or",
          "number_xor",
          "number_power",
          "number_negative",
          "number_positive",
          "number_float",
          "number_invert",
          "float_as_double",
          "bool_from_bool",
          "bool_from_long",
          "complex_from_doubles",
          "complex_real_as_double",
          "complex_imag_as_double",
          "slice_as_ints",
          "sequence_getslice",
          "sequence_tuple",
          "sequence_concat",
          "list_new",
          "list_size",
          "list_append",
          "list_setitem",
          "list_getitem",
          "list_setslice",
          "tuple_getitem",
          "tuple_pack",
          "tuple_size",
          "tuple_new",
          "tuple_setitem",
          "set_new",
          "set_add",
          "set_clear",
          "set_size",
          "set_update",
          "set_next_entry",
          "set_iterate",
          "gil_ensure",
          "gil_release",
          "save_thread",
          "restore_thread",
          "object_get_private_data",
          "object_set_private_data",
          "object_reset_private_data",
          "import_module",
          "call_function_objargs",
          "call_method",
          "call",
          "object_type",
          "object_istrue",
          "object_not",
          "object_richcompare",
          "iter_next",
          "object_getiter",
          "object_getattr_string",
          "object_getattr",
          "object_setattr_string",
          "object_setattr",
          "object_delattr_string",
          "object_delattr",
          "object_getitem",
          "object_setitem",
          "object_delitem",
          "string_as_string",
          "string_as_string_and_size",
          "string_as_string_size_and_kind",
          "string_from_string_and_size",
          "string_from_string",
          "string_from_kind_and_data",
          "bytes_as_string",
          "bytes_as_string_and_size",
          "bytes_from_string_and_size",
          "object_hash",
          "object_str",
          "make_none",
          "borrow_none",
          "sys_write_stdout",
          "object_dump",
          "nrt_adapt_ndarray_to_python",
          "nrt_meminfo_new_from_pyobject",
          "nrt_meminfo_as_pyobject",
          "nrt_meminfo_from_pyobject",
          "nrt_adapt_ndarray_from_python",
          "nrt_adapt_buffer_from_python",
          "_get_function",
          "alloca_obj",
          "alloca_buffer",
          "if_object_ok",
          "print_object",
          "print_string",
          "get_null_object",
          "return_none",
          "list_pack",
          "unserialize",
          "build_dynamic_excinfo_struct",
          "serialize_uncached",
          "serialize_object",
          "c_api_error",
          "to_native_value",
          "from_native_return",
          "from_native_value",
          "reflect_native_value",
          "to_native_generator",
          "from_native_generator",
          "numba_array_adaptor",
          "numba_buffer_adaptor",
          "complex_adaptor",
          "extract_record_data",
          "get_buffer",
          "release_buffer",
          "extract_np_datetime",
          "extract_np_timedelta",
          "create_np_datetime",
          "create_np_timedelta",
          "recreate_record",
          "string_from_constant_string",
          "call_jit_code",
          "__init__",
          "load_dispatcher",
          "_call_objmode_dispatcher",
          "decorator",
          "do_break"
        ],
        "classes": [
          "_Registry",
          "_BoxContext",
          "_UnboxContext",
          "_ReflectContext",
          "NativeValue",
          "EnvironmentManager",
          "PythonAPI",
          "ObjModeUtils"
        ],
        "num_lines": 1725
      },
      "/tmp/cs-hpc-demo-1/numba/core/extending.py": {
        "functions": [
          "type_callable",
          "overload",
          "register_jitable",
          "overload_attribute",
          "_overload_method_common",
          "overload_method",
          "overload_classmethod",
          "make_attribute_wrapper",
          "intrinsic",
          "get_cython_function_address",
          "include_path",
          "sentry_literal_args",
          "is_jitted",
          "decorate",
          "decorate",
          "wrap",
          "decorate",
          "decorate",
          "get_attr_fe_type",
          "struct_getattr_impl",
          "__init__",
          "_uuid",
          "_set_uuid",
          "_register",
          "__call__",
          "__repr__",
          "__deepcopy__",
          "_reduce_states",
          "_rebuild",
          "_intrinsic",
          "for_function",
          "for_pysig",
          "bind",
          "generic",
          "ov_wrap",
          "generic_resolve",
          "wrapper",
          "folded"
        ],
        "classes": [
          "_Intrinsic",
          "SentryLiteralArgs",
          "BoundLiteralArgs",
          "StructAttribute"
        ],
        "num_lines": 596
      },
      "/tmp/cs-hpc-demo-1/numba/core/compiler_lock.py": {
        "functions": [
          "require_global_compiler_lock",
          "__init__",
          "acquire",
          "release",
          "__enter__",
          "__exit__",
          "is_locked",
          "__call__",
          "_is_owned",
          "_acquire_compile_lock"
        ],
        "classes": [
          "_CompilerLock"
        ],
        "num_lines": 56
      },
      "/tmp/cs-hpc-demo-1/numba/core/decorators.py": {
        "functions": [
          "jit",
          "_jit",
          "njit",
          "cfunc",
          "jit_module",
          "wrapper",
          "wrapper"
        ],
        "classes": [],
        "num_lines": 305
      },
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/cloudpickle.py": {
        "functions": [
          "_get_or_create_tracker_id",
          "_lookup_class_or_track",
          "register_pickle_by_value",
          "unregister_pickle_by_value",
          "list_registry_pickle_by_value",
          "_is_registered_pickle_by_value",
          "_whichmodule",
          "_should_pickle_by_reference",
          "_lookup_module_and_qualname",
          "_extract_code_globals",
          "_find_imported_submodules",
          "_builtin_type",
          "_walk_global_ops",
          "_extract_class_dict",
          "is_tornado_coroutine",
          "subimport",
          "dynamic_subimport",
          "_get_cell_contents",
          "instance",
          "_make_function",
          "_make_empty_cell",
          "_make_cell",
          "_make_skeleton_class",
          "_make_skeleton_enum",
          "_make_typevar",
          "_decompose_typevar",
          "_typevar_reduce",
          "_get_bases",
          "_make_dict_keys",
          "_make_dict_values",
          "_make_dict_items",
          "_class_getnewargs",
          "_enum_getnewargs",
          "_file_reconstructor",
          "_function_getstate",
          "_class_getstate",
          "_enum_getstate",
          "_code_reduce",
          "_cell_reduce",
          "_classmethod_reduce",
          "_file_reduce",
          "_getset_descriptor_reduce",
          "_mappingproxy_reduce",
          "_memoryview_reduce",
          "_module_reduce",
          "_method_reduce",
          "_logger_reduce",
          "_root_logger_reduce",
          "_property_reduce",
          "_weakset_reduce",
          "_dynamic_class_reduce",
          "_class_reduce",
          "_dict_keys_reduce",
          "_dict_values_reduce",
          "_dict_items_reduce",
          "_odict_keys_reduce",
          "_odict_values_reduce",
          "_odict_items_reduce",
          "_dataclass_field_base_reduce",
          "_function_setstate",
          "_class_setstate",
          "_get_dataclass_field_type_sentinel",
          "dump",
          "dumps",
          "_getattribute",
          "_getattribute",
          "__reduce__",
          "_dynamic_function_reduce",
          "_function_reduce",
          "_function_getnewargs",
          "dump",
          "__init__",
          "reducer_override",
          "_save_reduce_pickle5",
          "save_global",
          "save_function",
          "save_pypy_builtin_func"
        ],
        "classes": [
          "_empty_cell_value",
          "Pickler"
        ],
        "num_lines": 1562
      },
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 18
      },
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/cloudpickle_fast.py": {
        "functions": [
          "__getattr__"
        ],
        "classes": [],
        "num_lines": 14
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/dispatcher.py": {
        "functions": [
          "__init__",
          "library",
          "type_annotation",
          "_find_referenced_environments",
          "codegen",
          "argument_types",
          "_rebuild",
          "_reduce_states",
          "bind",
          "regs_per_thread",
          "const_mem_size",
          "shared_mem_per_block",
          "max_threads_per_block",
          "local_mem_per_thread",
          "inspect_llvm",
          "inspect_asm",
          "inspect_sass_cfg",
          "inspect_sass",
          "inspect_types",
          "max_cooperative_grid_blocks",
          "launch",
          "_prepare_args",
          "__init__",
          "__call__",
          "_compute_thread_per_block",
          "__init__",
          "__call__",
          "reduce",
          "rebuild",
          "check_cachable",
          "load_overload",
          "__init__",
          "_numba_type_",
          "enable_caching",
          "configure",
          "__getitem__",
          "forall",
          "extensions",
          "__call__",
          "call",
          "_compile_for_args",
          "typeof_pyval",
          "specialize",
          "specialized",
          "get_regs_per_thread",
          "get_const_mem_size",
          "get_shared_mem_per_block",
          "get_max_threads_per_block",
          "get_local_mem_per_thread",
          "get_call_template",
          "compile_device",
          "add_overload",
          "compile",
          "inspect_llvm",
          "inspect_asm",
          "inspect_sass_cfg",
          "inspect_sass",
          "inspect_types",
          "_rebuild",
          "_reduce_states",
          "load_symbol"
        ],
        "classes": [
          "_Kernel",
          "ForAll",
          "_LaunchConfiguration",
          "CUDACacheImpl",
          "CUDACache",
          "CUDADispatcher"
        ],
        "num_lines": 1057
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/descriptor.py": {
        "functions": [
          "__init__",
          "typing_context",
          "target_context"
        ],
        "classes": [
          "CUDATargetOptions",
          "CUDATarget"
        ],
        "num_lines": 33
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/printimpl.py": {
        "functions": [
          "print_item",
          "int_print_impl",
          "real_print_impl",
          "const_print_impl",
          "print_varargs"
        ],
        "classes": [],
        "num_lines": 86
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevice.py": {
        "functions": [
          "abs",
          "acos",
          "acosf",
          "acosh",
          "acoshf",
          "asin",
          "asinf",
          "asinh",
          "asinhf",
          "atan",
          "atan2",
          "atan2f",
          "atanf",
          "atanh",
          "atanhf",
          "brev",
          "brevll",
          "byte_perm",
          "cbrt",
          "cbrtf",
          "ceil",
          "ceilf",
          "clz",
          "clzll",
          "copysign",
          "copysignf",
          "cos",
          "cosf",
          "cosh",
          "coshf",
          "cospi",
          "cospif",
          "dadd_rd",
          "dadd_rn",
          "dadd_ru",
          "dadd_rz",
          "ddiv_rd",
          "ddiv_rn",
          "ddiv_ru",
          "ddiv_rz",
          "dmul_rd",
          "dmul_rn",
          "dmul_ru",
          "dmul_rz",
          "double2float_rd",
          "double2float_rn",
          "double2float_ru",
          "double2float_rz",
          "double2hiint",
          "double2int_rd",
          "double2int_rn",
          "double2int_ru",
          "double2int_rz",
          "double2ll_rd",
          "double2ll_rn",
          "double2ll_ru",
          "double2ll_rz",
          "double2loint",
          "double2uint_rd",
          "double2uint_rn",
          "double2uint_ru",
          "double2uint_rz",
          "double2ull_rd",
          "double2ull_rn",
          "double2ull_ru",
          "double2ull_rz",
          "double_as_longlong",
          "drcp_rd",
          "drcp_rn",
          "drcp_ru",
          "drcp_rz",
          "dsqrt_rd",
          "dsqrt_rn",
          "dsqrt_ru",
          "dsqrt_rz",
          "erf",
          "erfc",
          "erfcf",
          "erfcinv",
          "erfcinvf",
          "erfcx",
          "erfcxf",
          "erff",
          "erfinv",
          "erfinvf",
          "exp",
          "exp10",
          "exp10f",
          "exp2",
          "exp2f",
          "expf",
          "expm1",
          "expm1f",
          "fabs",
          "fabsf",
          "fadd_rd",
          "fadd_rn",
          "fadd_ru",
          "fadd_rz",
          "fast_cosf",
          "fast_exp10f",
          "fast_expf",
          "fast_fdividef",
          "fast_log10f",
          "fast_log2f",
          "fast_logf",
          "fast_powf",
          "fast_sincosf",
          "fast_sinf",
          "fast_tanf",
          "fdim",
          "fdimf",
          "fdiv_rd",
          "fdiv_rn",
          "fdiv_ru",
          "fdiv_rz",
          "ffs",
          "ffsll",
          "finitef",
          "float2half_rn",
          "float2int_rd",
          "float2int_rn",
          "float2int_ru",
          "float2int_rz",
          "float2ll_rd",
          "float2ll_rn",
          "float2ll_ru",
          "float2ll_rz",
          "float2uint_rd",
          "float2uint_rn",
          "float2uint_ru",
          "float2uint_rz",
          "float2ull_rd",
          "float2ull_rn",
          "float2ull_ru",
          "float2ull_rz",
          "float_as_int",
          "floor",
          "floorf",
          "fma",
          "fma_rd",
          "fma_rn",
          "fma_ru",
          "fma_rz",
          "fmaf",
          "fmaf_rd",
          "fmaf_rn",
          "fmaf_ru",
          "fmaf_rz",
          "fmax",
          "fmaxf",
          "fmin",
          "fminf",
          "fmod",
          "fmodf",
          "fmul_rd",
          "fmul_rn",
          "fmul_ru",
          "fmul_rz",
          "frcp_rd",
          "frcp_rn",
          "frcp_ru",
          "frcp_rz",
          "frexp",
          "frexpf",
          "frsqrt_rn",
          "fsqrt_rd",
          "fsqrt_rn",
          "fsqrt_ru",
          "fsqrt_rz",
          "fsub_rd",
          "fsub_rn",
          "fsub_ru",
          "fsub_rz",
          "hadd",
          "half2float",
          "hiloint2double",
          "hypot",
          "hypotf",
          "ilogb",
          "ilogbf",
          "int2double_rn",
          "int2float_rd",
          "int2float_rn",
          "int2float_ru",
          "int2float_rz",
          "int_as_float",
          "isfinited",
          "isinfd",
          "isinff",
          "isnand",
          "isnanf",
          "j0",
          "j0f",
          "j1",
          "j1f",
          "jn",
          "jnf",
          "ldexp",
          "ldexpf",
          "lgamma",
          "lgammaf",
          "ll2double_rd",
          "ll2double_rn",
          "ll2double_ru",
          "ll2double_rz",
          "ll2float_rd",
          "ll2float_rn",
          "ll2float_ru",
          "ll2float_rz",
          "llabs",
          "llmax",
          "llmin",
          "llrint",
          "llrintf",
          "llround",
          "llroundf",
          "log",
          "log10",
          "log10f",
          "log1p",
          "log1pf",
          "log2",
          "log2f",
          "logb",
          "logbf",
          "logf",
          "longlong_as_double",
          "max",
          "min",
          "modf",
          "modff",
          "mul24",
          "mul64hi",
          "mulhi",
          "nearbyint",
          "nearbyintf",
          "nextafter",
          "nextafterf",
          "normcdf",
          "normcdff",
          "normcdfinv",
          "normcdfinvf",
          "popc",
          "popcll",
          "pow",
          "powf",
          "powi",
          "powif",
          "rcbrt",
          "rcbrtf",
          "remainder",
          "remainderf",
          "remquo",
          "remquof",
          "rhadd",
          "rint",
          "rintf",
          "round",
          "roundf",
          "rsqrt",
          "rsqrtf",
          "sad",
          "saturatef",
          "scalbn",
          "scalbnf",
          "signbitd",
          "signbitf",
          "sin",
          "sincos",
          "sincosf",
          "sincospi",
          "sincospif",
          "sinf",
          "sinh",
          "sinhf",
          "sinpi",
          "sinpif",
          "sqrt",
          "sqrtf",
          "tan",
          "tanf",
          "tanh",
          "tanhf",
          "tgamma",
          "tgammaf",
          "trunc",
          "truncf",
          "uhadd",
          "uint2double_rn",
          "uint2float_rd",
          "uint2float_rn",
          "uint2float_ru",
          "uint2float_rz",
          "ull2double_rd",
          "ull2double_rn",
          "ull2double_ru",
          "ull2double_rz",
          "ull2float_rd",
          "ull2float_rn",
          "ull2float_ru",
          "ull2float_rz",
          "ullmax",
          "ullmin",
          "umax",
          "umin",
          "umul24",
          "umul64hi",
          "umulhi",
          "urhadd",
          "usad",
          "y0",
          "y0f",
          "y1",
          "y1f",
          "yn",
          "ynf"
        ],
        "classes": [],
        "num_lines": 3382
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/deviceufunc.py": {
        "functions": [
          "_broadcast_axis",
          "_pairwise_broadcast",
          "_multi_broadcast",
          "to_dtype",
          "_determine_gufunc_outer_types",
          "expand_gufunc_template",
          "_gen_src_for_indexing",
          "_gen_src_index",
          "__init__",
          "_fill_arrays",
          "_fill_argtypes",
          "_resolve_signature",
          "_get_actual_args",
          "_broadcast",
          "get_arguments",
          "get_function",
          "is_device_array",
          "as_device_array",
          "broadcast_device",
          "force_array_layout",
          "call",
          "to_device",
          "to_host",
          "allocate_device_array",
          "launch",
          "__init__",
          "pyfunc",
          "add",
          "build_ufunc",
          "_get_kernel_source",
          "_compile_core",
          "_get_globals",
          "_compile_kernel",
          "__init__",
          "pyfunc",
          "add",
          "_compile_kernel",
          "_get_globals",
          "from_signature",
          "__init__",
          "schedule",
          "__init__",
          "__str__",
          "__init__",
          "__call__",
          "_schedule",
          "_search_matching_signature",
          "_broadcast",
          "_broadcast_array",
          "_broadcast_add_axis",
          "_broadcast_scalar_input",
          "launch_kernel",
          "is_device_array",
          "as_device_array",
          "to_device",
          "allocate_device_array",
          "__init__",
          "adjust_input_types",
          "prepare_outputs",
          "prepare_inputs",
          "post_process_outputs",
          "attempt_ravel",
          "normalize_arg",
          "ensure_device",
          "pos_argn"
        ],
        "classes": [
          "UFuncMechanism",
          "DeviceVectorize",
          "DeviceGUFuncVectorize",
          "GUFuncEngine",
          "GUFuncSchedule",
          "GeneralizedUFunc",
          "GUFuncCallSteps"
        ],
        "num_lines": 919
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cg.py": {
        "functions": [
          "this_grid",
          "_this_grid",
          "_ol_this_grid",
          "_grid_group_sync",
          "_ol_grid_group_sync",
          "sync",
          "codegen",
          "impl",
          "codegen",
          "impl"
        ],
        "classes": [
          "GridGroup"
        ],
        "num_lines": 62
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/device_init.py": {
        "functions": [
          "is_available",
          "is_supported_version",
          "cuda_error"
        ],
        "classes": [],
        "num_lines": 89
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/compiler.py": {
        "functions": [
          "_nvvm_options_type",
          "cuda_compile_result",
          "compile_cuda",
          "cabi_wrap_function",
          "compile",
          "compile_for_current_device",
          "compile_ptx",
          "compile_ptx_for_current_device",
          "declare_device_function",
          "declare_device_function_template",
          "entry_point",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "define_pipelines",
          "define_cuda_lowering_pipeline",
          "__init__"
        ],
        "classes": [
          "CUDAFlags",
          "CUDACompileResult",
          "CUDABackend",
          "CreateLibrary",
          "CUDACompiler",
          "ExternFunction",
          "device_function_template"
        ],
        "num_lines": 422
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/models.py": {
        "functions": [
          "__init__",
          "__init__",
          "__init__"
        ],
        "classes": [
          "Dim3Model",
          "GridGroupModel",
          "FloatModel"
        ],
        "num_lines": 48
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/intrinsic_wrapper.py": {
        "functions": [
          "all_sync",
          "any_sync",
          "eq_sync",
          "ballot_sync",
          "shfl_sync",
          "shfl_up_sync",
          "shfl_down_sync",
          "shfl_xor_sync"
        ],
        "classes": [],
        "num_lines": 77
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/mathimpl.py": {
        "functions": [
          "math_isinf_isnan_int",
          "maybe_fast_truediv",
          "math_isfinite_int",
          "fp16_sin_impl",
          "fp16_cos_impl",
          "fp16_log_impl",
          "fp16_log10_impl",
          "fp16_log2_impl",
          "fp16_exp_impl",
          "fp16_floor_impl",
          "fp16_ceil_impl",
          "fp16_sqrt_impl",
          "fp16_fabs_impl",
          "fp16_trunc_impl",
          "impl_boolean",
          "get_lower_unary_impl",
          "get_unary_impl_for_fn_and_ty",
          "impl_unary",
          "impl_unary_int",
          "get_lower_binary_impl",
          "get_binary_impl_for_fn_and_ty",
          "impl_binary",
          "impl_binary_int",
          "impl_pow_int",
          "impl_modf",
          "impl_frexp",
          "impl_ldexp",
          "impl_tanh",
          "cpow_implement",
          "fp16_sin",
          "fp16_cos",
          "fp16_log",
          "fp16_log10",
          "fp16_log2",
          "fp16_exp",
          "fp16_floor",
          "fp16_ceil",
          "fp16_sqrt",
          "fp16_fabs",
          "fp16_trunc",
          "lower_boolean_impl",
          "lower_unary_impl",
          "lower_unary_int_impl",
          "lower_binary_impl",
          "lower_binary_int_impl",
          "lower_pow_impl_int",
          "lower_modf_impl",
          "lower_frexp_impl",
          "lower_ldexp_impl",
          "lower_tanh_impl",
          "core",
          "get_compute_capability",
          "tanh_impl_libdevice",
          "tanhf_impl_fastmath",
          "cpow_internal"
        ],
        "classes": [],
        "num_lines": 448
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/initialize.py": {
        "functions": [
          "initialize_all"
        ],
        "classes": [],
        "num_lines": 13
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/vector_types.py": {
        "functions": [
          "make_vector_type",
          "enable_vector_type_ctor",
          "build_constructor_overloads",
          "_initialize",
          "__init__",
          "base_type",
          "attr_names",
          "num_elements",
          "user_facing_object",
          "make_lowering",
          "__init__",
          "lowering"
        ],
        "classes": [
          "VectorType",
          "_VectorType",
          "VectorTypeModel",
          "CtorTemplate"
        ],
        "num_lines": 209
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cuda_paths.py": {
        "functions": [
          "_find_valid_path",
          "_get_libdevice_path_decision",
          "_nvvm_lib_dir",
          "_get_nvvm_path_decision",
          "_get_libdevice_paths",
          "_cudalib_path",
          "_cuda_home_static_cudalib_path",
          "_get_cudalib_dir_path_decision",
          "_get_static_cudalib_dir_path_decision",
          "_get_cudalib_dir",
          "_get_static_cudalib_dir",
          "get_system_ctk",
          "get_conda_ctk",
          "get_nvidia_nvvm_ctk",
          "get_nvidia_libdevice_ctk",
          "get_nvidia_cudalib_ctk",
          "get_nvidia_static_cudalib_ctk",
          "get_cuda_home",
          "_get_nvvm_path",
          "get_cuda_paths",
          "get_debian_pkg_libdevice"
        ],
        "classes": [],
        "num_lines": 258
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevicefuncs.py": {
        "functions": [
          "create_signature",
          "generate_stubs",
          "argname"
        ],
        "classes": [],
        "num_lines": 1057
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator_init.py": {
        "functions": [
          "is_available",
          "cuda_error"
        ],
        "classes": [],
        "num_lines": 17
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/ufuncs.py": {
        "functions": [
          "get_ufunc_info",
          "ufunc_db",
          "np_unary_impl",
          "np_binary_impl",
          "np_real_log_impl",
          "np_real_log2_impl",
          "np_real_log10_impl",
          "np_real_sin_impl",
          "np_real_cos_impl",
          "np_real_tan_impl",
          "np_real_asin_impl",
          "np_real_acos_impl",
          "np_real_atan_impl",
          "np_real_atan2_impl",
          "np_real_hypot_impl",
          "np_real_sinh_impl",
          "np_complex_sinh_impl",
          "np_real_cosh_impl",
          "np_complex_cosh_impl",
          "np_real_tanh_impl",
          "np_complex_tanh_impl",
          "np_real_asinh_impl",
          "np_real_acosh_impl",
          "np_real_atanh_impl"
        ],
        "classes": [],
        "num_lines": 662
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/__init__.py": {
        "functions": [
          "test"
        ],
        "classes": [],
        "num_lines": 22
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/types.py": {
        "functions": [
          "__init__",
          "__init__"
        ],
        "classes": [
          "Dim3",
          "GridGroup",
          "CUDADispatcher"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/random.py": {
        "functions": [
          "init_xoroshiro128p_state",
          "rotl",
          "xoroshiro128p_next",
          "xoroshiro128p_jump",
          "uint64_to_unit_float64",
          "uint64_to_unit_float32",
          "xoroshiro128p_uniform_float32",
          "xoroshiro128p_uniform_float64",
          "xoroshiro128p_normal_float32",
          "xoroshiro128p_normal_float64",
          "init_xoroshiro128p_states_cpu",
          "init_xoroshiro128p_states",
          "create_xoroshiro128p_states"
        ],
        "classes": [],
        "num_lines": 292
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/intrinsics.py": {
        "functions": [
          "_type_grid_function",
          "grid",
          "gridsize",
          "_warpsize",
          "cuda_warpsize",
          "syncthreads",
          "_syncthreads_predicate",
          "syncthreads_count",
          "syncthreads_and",
          "syncthreads_or",
          "codegen",
          "_nthreads_for_dim",
          "codegen",
          "codegen",
          "get",
          "codegen",
          "codegen"
        ],
        "classes": [],
        "num_lines": 198
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/api.py": {
        "functions": [
          "from_cuda_array_interface",
          "as_cuda_array",
          "is_cuda_array",
          "is_float16_supported",
          "to_device",
          "device_array",
          "managed_array",
          "pinned_array",
          "mapped_array",
          "open_ipc_array",
          "synchronize",
          "_contiguous_strides_like_array",
          "_order_like_array",
          "device_array_like",
          "mapped_array_like",
          "pinned_array_like",
          "stream",
          "default_stream",
          "legacy_default_stream",
          "per_thread_default_stream",
          "external_stream",
          "pinned",
          "mapped",
          "event",
          "select_device",
          "get_current_device",
          "list_devices",
          "close",
          "_auto_device",
          "detect",
          "defer_cleanup"
        ],
        "classes": [],
        "num_lines": 525
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/stubs.py": {
        "functions": [
          "stub_function",
          "make_vector_type_stubs",
          "map_vector_type_stubs_to_alias",
          "__new__",
          "__repr__",
          "wrapped",
          "x",
          "y",
          "z",
          "array",
          "array",
          "array_like"
        ],
        "classes": [
          "Stub",
          "Dim3",
          "threadIdx",
          "blockIdx",
          "blockDim",
          "gridDim",
          "warpsize",
          "laneid",
          "shared",
          "local",
          "const",
          "syncwarp",
          "shfl_sync_intrinsic",
          "vote_sync_intrinsic",
          "match_any_sync",
          "match_all_sync",
          "activemask",
          "lanemask_lt",
          "threadfence_block",
          "threadfence_system",
          "threadfence",
          "popc",
          "brev",
          "clz",
          "ffs",
          "selp",
          "fma",
          "cbrt",
          "atomic",
          "nanosleep",
          "fp16",
          "add",
          "sub",
          "and_",
          "or_",
          "xor",
          "inc",
          "dec",
          "exch",
          "max",
          "min",
          "nanmax",
          "nanmin",
          "compare_and_swap",
          "cas",
          "hadd",
          "hsub",
          "hmul",
          "hdiv",
          "hfma",
          "hneg",
          "habs",
          "hsin",
          "hcos",
          "hlog",
          "hlog10",
          "hlog2",
          "hexp",
          "hexp10",
          "hexp2",
          "hfloor",
          "hceil",
          "hsqrt",
          "hrsqrt",
          "hrcp",
          "hrint",
          "htrunc",
          "heq",
          "hne",
          "hge",
          "hgt",
          "hle",
          "hlt",
          "hmax",
          "hmin"
        ],
        "num_lines": 902
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/vectorizers.py": {
        "functions": [
          "__init__",
          "__call__",
          "reduce",
          "__reduce",
          "__init__",
          "is_device_array",
          "as_device_array",
          "to_device",
          "to_host",
          "allocate_device_array",
          "launch_kernel",
          "__init__",
          "_call_steps",
          "_broadcast_scalar_input",
          "_broadcast_add_axis",
          "launch",
          "is_device_array",
          "as_device_array",
          "to_device",
          "to_host",
          "allocate_device_array",
          "broadcast_device",
          "_compile_core",
          "_get_globals",
          "_compile_kernel",
          "build_ufunc",
          "_kernel_template",
          "build_ufunc",
          "_compile_kernel",
          "_kernel_template",
          "_get_globals"
        ],
        "classes": [
          "CUDAUFuncDispatcher",
          "_CUDAGUFuncCallSteps",
          "CUDAGeneralizedUFunc",
          "CUDAUFuncMechanism",
          "CUDAVectorize",
          "CUDAGUFuncVectorize"
        ],
        "num_lines": 252
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/args.py": {
        "functions": [
          "wrap_arg",
          "__init__",
          "to_device",
          "_numba_type_",
          "to_device",
          "to_device",
          "to_device"
        ],
        "classes": [
          "ArgHint",
          "In",
          "Out",
          "InOut"
        ],
        "num_lines": 77
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/target.py": {
        "functions": [
          "load_additional_registries",
          "resolve_value_type",
          "__init__",
          "DIBuilder",
          "enable_boundscheck",
          "create_module",
          "init",
          "load_additional_registries",
          "codegen",
          "target_data",
          "nonconst_module_attrs",
          "call_conv",
          "mangler",
          "prepare_cuda_kernel",
          "generate_kernel_wrapper",
          "make_constant_array",
          "insert_const_string",
          "insert_string_const_addrspace",
          "optimize_function",
          "get_ufunc_info",
          "_make_call_helper",
          "return_value",
          "return_user_exc",
          "return_status_propagate",
          "get_function_type",
          "decorate_function",
          "get_arguments",
          "call_function",
          "get_return_type",
          "define_error_gv"
        ],
        "classes": [
          "CUDATypingContext",
          "CUDATargetContext",
          "CUDACallConv",
          "CUDACABICallConv"
        ],
        "num_lines": 440
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudamath.py": {
        "functions": [],
        "classes": [
          "Math_unary",
          "Math_unary_with_fp16",
          "Math_atan2",
          "Math_hypot",
          "Math_binary",
          "Math_remainder",
          "Math_pow",
          "Math_frexp",
          "Math_ldexp",
          "Math_isnan",
          "Math_modf"
        ],
        "num_lines": 140
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/libdeviceimpl.py": {
        "functions": [
          "libdevice_implement",
          "libdevice_implement_multiple_returns",
          "core",
          "core"
        ],
        "classes": [],
        "num_lines": 83
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/errors.py": {
        "functions": [
          "normalize_kernel_dimensions",
          "__init__",
          "check_dim"
        ],
        "classes": [
          "KernelRuntimeError",
          "CudaLoweringError"
        ],
        "num_lines": 59
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudaimpl.py": {
        "functions": [
          "initialize_dim3",
          "cuda_threadIdx",
          "cuda_blockDim",
          "cuda_blockIdx",
          "cuda_gridDim",
          "cuda_laneid",
          "dim3_x",
          "dim3_y",
          "dim3_z",
          "cuda_const_array_like",
          "_get_unique_smem_id",
          "cuda_shared_array_integer",
          "cuda_shared_array_tuple",
          "cuda_local_array_integer",
          "ptx_lmem_alloc_array",
          "ptx_threadfence_block",
          "ptx_threadfence_system",
          "ptx_threadfence_device",
          "ptx_syncwarp",
          "ptx_syncwarp_mask",
          "ptx_shfl_sync_i32",
          "ptx_vote_sync",
          "ptx_match_any_sync",
          "ptx_match_all_sync",
          "ptx_activemask",
          "ptx_lanemask_lt",
          "ptx_popc",
          "ptx_fma",
          "float16_float_ty_constraint",
          "float16_to_float_cast",
          "float_to_float16_cast",
          "float16_int_constraint",
          "float16_to_integer_cast",
          "integer_to_float16_cast",
          "lower_fp16_binary",
          "ptx_fp16_hneg",
          "operator_hneg",
          "ptx_fp16_habs",
          "operator_habs",
          "ptx_hfma",
          "fp16_div_impl",
          "_gen_fp16_cmp",
          "lower_fp16_minmax",
          "ptx_cbrt",
          "ptx_brev_u4",
          "ptx_brev_u8",
          "ptx_clz",
          "ptx_ffs_32",
          "ptx_ffs_64",
          "ptx_selp",
          "ptx_max_f4",
          "ptx_max_f8",
          "ptx_min_f4",
          "ptx_min_f8",
          "ptx_round",
          "round_to_impl",
          "gen_deg_rad",
          "_normalize_indices",
          "_atomic_dispatcher",
          "ptx_atomic_add_tuple",
          "ptx_atomic_sub",
          "ptx_atomic_inc",
          "ptx_atomic_dec",
          "ptx_atomic_bitwise",
          "ptx_atomic_exch",
          "ptx_atomic_max",
          "ptx_atomic_min",
          "ptx_atomic_nanmax",
          "ptx_atomic_nanmin",
          "ptx_atomic_compare_and_swap",
          "ptx_atomic_cas",
          "ptx_nanosleep",
          "_generic_array",
          "cuda_dispatcher_const",
          "ptx_fp16_binary",
          "fp16_div",
          "ptx_fp16_comparison",
          "ptx_fp16_minmax",
          "round_ndigits",
          "impl",
          "imp",
          "impl_ptx_atomic"
        ],
        "classes": [],
        "num_lines": 1055
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/nvvmutils.py": {
        "functions": [
          "declare_atomic_cas_int",
          "atomic_cmpxchg",
          "declare_atomic_add_float32",
          "declare_atomic_add_float64",
          "declare_atomic_sub_float32",
          "declare_atomic_sub_float64",
          "declare_atomic_inc_int32",
          "declare_atomic_inc_int64",
          "declare_atomic_dec_int32",
          "declare_atomic_dec_int64",
          "declare_atomic_max_float32",
          "declare_atomic_max_float64",
          "declare_atomic_min_float32",
          "declare_atomic_min_float64",
          "declare_atomic_nanmax_float32",
          "declare_atomic_nanmax_float64",
          "declare_atomic_nanmin_float32",
          "declare_atomic_nanmin_float64",
          "declare_cudaCGGetIntrinsicHandle",
          "declare_cudaCGSynchronize",
          "declare_string",
          "declare_vprint",
          "call_sreg",
          "get_global_id",
          "__init__",
          "tid",
          "ctaid",
          "ntid",
          "nctaid",
          "getdim"
        ],
        "classes": [
          "SRegBuilder"
        ],
        "num_lines": 235
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/testing.py": {
        "functions": [
          "ensure_supported_ccs_initialized",
          "skip_on_cudasim",
          "skip_unless_cudasim",
          "skip_unless_conda_cudatoolkit",
          "skip_if_external_memmgr",
          "skip_under_cuda_memcheck",
          "skip_without_nvdisasm",
          "skip_with_nvdisasm",
          "skip_on_arm",
          "skip_if_cuda_includes_missing",
          "skip_if_mvc_enabled",
          "skip_if_mvc_libraries_unavailable",
          "cc_X_or_above",
          "skip_unless_cc_50",
          "skip_unless_cc_53",
          "skip_unless_cc_60",
          "skip_unless_cc_75",
          "xfail_unless_cudasim",
          "skip_with_cuda_python",
          "cudadevrt_missing",
          "skip_if_cudadevrt_missing",
          "setUp",
          "tearDown",
          "skip_if_lto",
          "tearDown",
          "__init__"
        ],
        "classes": [
          "CUDATestCase",
          "ContextResettingTestCase",
          "ForeignArray"
        ],
        "num_lines": 202
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadecl.py": {
        "functions": [
          "_genfp16_unary",
          "_genfp16_unary_operator",
          "_genfp16_binary",
          "_genfp16_binary_comparison",
          "_fp16_binary_operator",
          "_genfp16_comparison_operator",
          "_genfp16_binary_operator",
          "_resolve_wrapped_unary",
          "_resolve_wrapped_binary",
          "_gen",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "resolve_x",
          "resolve_y",
          "resolve_z",
          "resolve_array",
          "resolve_array_like",
          "resolve_array",
          "resolve_add",
          "resolve_sub",
          "resolve_and_",
          "resolve_or_",
          "resolve_xor",
          "resolve_inc",
          "resolve_dec",
          "resolve_exch",
          "resolve_max",
          "resolve_min",
          "resolve_nanmin",
          "resolve_nanmax",
          "resolve_compare_and_swap",
          "resolve_cas",
          "resolve_hadd",
          "resolve_hsub",
          "resolve_hmul",
          "resolve_hdiv",
          "resolve_hneg",
          "resolve_habs",
          "resolve_hfma",
          "resolve_hsin",
          "resolve_hcos",
          "resolve_hlog",
          "resolve_hlog10",
          "resolve_hlog2",
          "resolve_hexp",
          "resolve_hexp10",
          "resolve_hexp2",
          "resolve_hfloor",
          "resolve_hceil",
          "resolve_hsqrt",
          "resolve_hrsqrt",
          "resolve_hrcp",
          "resolve_hrint",
          "resolve_htrunc",
          "resolve_heq",
          "resolve_hne",
          "resolve_hge",
          "resolve_hgt",
          "resolve_hle",
          "resolve_hlt",
          "resolve_hmax",
          "resolve_hmin",
          "resolve_cg",
          "resolve_threadIdx",
          "resolve_blockIdx",
          "resolve_blockDim",
          "resolve_gridDim",
          "resolve_laneid",
          "resolve_shared",
          "resolve_popc",
          "resolve_brev",
          "resolve_clz",
          "resolve_ffs",
          "resolve_fma",
          "resolve_cbrt",
          "resolve_threadfence",
          "resolve_threadfence_block",
          "resolve_threadfence_system",
          "resolve_syncwarp",
          "resolve_shfl_sync_intrinsic",
          "resolve_vote_sync_intrinsic",
          "resolve_match_any_sync",
          "resolve_match_all_sync",
          "resolve_activemask",
          "resolve_lanemask_lt",
          "resolve_selp",
          "resolve_nanosleep",
          "resolve_atomic",
          "resolve_fp16",
          "resolve_const",
          "resolve_local",
          "typer",
          "typer",
          "generic",
          "generic",
          "generic"
        ],
        "classes": [
          "Cuda_array_decl",
          "Cuda_shared_array",
          "Cuda_local_array",
          "Cuda_const_array_like",
          "Cuda_threadfence_device",
          "Cuda_threadfence_block",
          "Cuda_threadfence_system",
          "Cuda_syncwarp",
          "Cuda_shfl_sync_intrinsic",
          "Cuda_vote_sync_intrinsic",
          "Cuda_match_any_sync",
          "Cuda_match_all_sync",
          "Cuda_activemask",
          "Cuda_lanemask_lt",
          "Cuda_popc",
          "Cuda_fma",
          "Cuda_hfma",
          "Cuda_cbrt",
          "Cuda_brev",
          "Cuda_clz",
          "Cuda_ffs",
          "Cuda_selp",
          "Float",
          "Cuda_atomic_compare_and_swap",
          "Cuda_atomic_cas",
          "Cuda_nanosleep",
          "Dim3_attrs",
          "CudaSharedModuleTemplate",
          "CudaConstModuleTemplate",
          "CudaLocalModuleTemplate",
          "CudaAtomicTemplate",
          "CudaFp16Template",
          "CudaModuleTemplate",
          "Cuda_fp16_unary",
          "Cuda_fp16_unary",
          "Cuda_fp16_binary",
          "Cuda_fp16_cmp",
          "Cuda_fp16_operator",
          "Cuda_atomic"
        ],
        "num_lines": 806
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/codegen.py": {
        "functions": [
          "run_nvdisasm",
          "disassemble_cubin",
          "disassemble_cubin_for_cfg",
          "__init__",
          "llvm_strs",
          "get_llvm_str",
          "_ensure_cc",
          "get_asm_str",
          "get_ltoir",
          "get_cubin",
          "get_cufunc",
          "get_linkerinfo",
          "get_sass",
          "get_sass_cfg",
          "add_ir_module",
          "add_linking_library",
          "add_linking_file",
          "get_function",
          "modules",
          "linking_libraries",
          "finalize",
          "_reduce_states",
          "_rebuild",
          "__init__",
          "_create_empty_module",
          "_add_module",
          "magic_tuple"
        ],
        "classes": [
          "CUDACodeLibrary",
          "JITCUDACodegen"
        ],
        "num_lines": 378
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevicedecl.py": {
        "functions": [
          "libdevice_declare"
        ],
        "classes": [
          "Libdevice_function"
        ],
        "num_lines": 17
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/api_util.py": {
        "functions": [
          "prepare_shape_strides_dtype",
          "_fill_stride_by_order"
        ],
        "classes": [],
        "num_lines": 30
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/extending.py": {
        "functions": [],
        "classes": [],
        "num_lines": 7
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/decorators.py": {
        "functions": [
          "jit",
          "declare_device",
          "_jit",
          "jitwrapper",
          "autojitwrapper",
          "autojitwrapper"
        ],
        "classes": [],
        "num_lines": 191
      },
      "/tmp/cs-hpc-demo-1/numba/stencils/stencil.py": {
        "functions": [
          "raise_if_incompatible_array_sizes",
          "slice_addition",
          "stencil",
          "_stencil",
          "stencil_dummy_lower",
          "__init__",
          "__call__",
          "__init__",
          "replace_return_with_setitem",
          "add_indices_to_kernel",
          "get_return_type",
          "_install_type",
          "compile_for_argtys",
          "_type_me",
          "copy_ir_with_calltypes",
          "_stencil_wrapper",
          "__call__",
          "decorated",
          "cval_as_str"
        ],
        "classes": [
          "StencilFuncLowerer",
          "StencilFunc"
        ],
        "num_lines": 836
      },
      "/tmp/cs-hpc-demo-1/numba/stencils/stencilparfor.py": {
        "functions": [
          "_compute_last_ind",
          "get_stencil_ir",
          "_get_const_index_expr",
          "_get_const_index_expr_inner",
          "_get_const_two_irs",
          "_get_const_unary_expr",
          "_get_const_binary_expr",
          "__init__",
          "run",
          "replace_return_with_setitem",
          "_mk_stencil_parfor",
          "_get_stencil_last_ind",
          "_get_stencil_start_ind",
          "_replace_stencil_accesses",
          "_add_index_offsets",
          "_add_offset_to_slice",
          "__init__",
          "get_start_ind",
          "handle_border",
          "f"
        ],
        "classes": [
          "StencilPass",
          "DummyPipeline"
        ],
        "num_lines": 957
      },
      "/tmp/cs-hpc-demo-1/numba/stencils/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/cc.py": {
        "functions": [
          "__init__",
          "name",
          "output_file",
          "output_file",
          "output_dir",
          "output_dir",
          "use_nrt",
          "use_nrt",
          "target_cpu",
          "target_cpu",
          "verbose",
          "verbose",
          "export",
          "_export_entries",
          "_get_mixin_sources",
          "_get_mixin_defines",
          "_get_extra_cflags",
          "_get_extra_ldflags",
          "_compile_mixins",
          "_compile_object_files",
          "compile",
          "distutils_extension",
          "_prepare_object_files",
          "monkey_patch_distutils",
          "decorator",
          "build_extension"
        ],
        "classes": [
          "CC",
          "_CCExtension",
          "_CC_build_ext"
        ],
        "num_lines": 309
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/compiler.py": {
        "functions": [
          "get_header",
          "__init__",
          "__repr__",
          "__init__",
          "_mangle_method_symbol",
          "_emit_python_wrapper",
          "_cull_exports",
          "write_llvm_bitcode",
          "write_native_object",
          "emit_type",
          "emit_header",
          "_emit_method_array",
          "_emit_environment_array",
          "_emit_envgvs_array",
          "_emit_module_init_code",
          "module_create_definition",
          "module_init_definition",
          "_emit_python_wrapper"
        ],
        "classes": [
          "ExportEntry",
          "_ModuleCompiler",
          "ModuleCompiler"
        ],
        "num_lines": 512
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/llvm_types.py": {
        "functions": [],
        "classes": [],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 29
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/platform.py": {
        "functions": [
          "get_configs",
          "_gentmpfile",
          "external_compiler_works",
          "_quote_arg",
          "_is_sequence",
          "__init__",
          "verbose",
          "verbose",
          "_raise_external_compiler_error",
          "compile_objects",
          "link_shared",
          "get_python_libraries",
          "get_python_library_dirs",
          "get_python_include_dirs",
          "get_ext_filename"
        ],
        "classes": [
          "_DummyExtension",
          "Toolchain"
        ],
        "num_lines": 218
      },
      "/tmp/cs-hpc-demo-1/numba/pycc/decorators.py": {
        "functions": [
          "export",
          "exportmany",
          "process_input_files",
          "clear_export_registry",
          "parse_prototype",
          "wrappped",
          "wrapped"
        ],
        "classes": [],
        "num_lines": 72
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_support.py": {
        "functions": [
          "eq",
          "ne",
          "test_types",
          "test_int_values",
          "test_bool_values",
          "test_abs_tol_parse",
          "test_float_values",
          "test_float64_values",
          "test_float32_values",
          "test_float64_values_inexact",
          "test_float32_values_inexact",
          "test_complex_values",
          "test_complex128_values_inexact",
          "test_complex64_values_inexact",
          "test_enums",
          "test_arrays",
          "test_npdatetime",
          "test_nptimedelta",
          "test_assertRefCount",
          "test_forbid_codegen",
          "assert_succeed",
          "assert_fail",
          "f"
        ],
        "classes": [
          "TestAssertPreciseEqual",
          "TestMisc"
        ],
        "num_lines": 346
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_map_filter_reduce.py": {
        "functions": [
          "test_basic_map_external_func",
          "test_basic_map_closure",
          "test_basic_map_closure_multiple_iterator",
          "test_basic_filter_external_func",
          "test_basic_filter_closure",
          "test_basic_filter_none_func",
          "test_basic_reduce_external_func",
          "test_basic_reduce_closure",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "func"
        ],
        "classes": [
          "TestMap",
          "TestFilter",
          "TestReduce"
        ],
        "num_lines": 91
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_llvm_version_check.py": {
        "functions": [
          "test_llvmlite_version",
          "cleanup"
        ],
        "classes": [
          "TestLlvmVersion"
        ],
        "num_lines": 42
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_builtins.py": {
        "functions": [
          "abs_usecase",
          "all_usecase",
          "any_usecase",
          "bool_usecase",
          "complex_usecase",
          "divmod_usecase",
          "enumerate_usecase",
          "enumerate_start_usecase",
          "enumerate_invalid_start_usecase",
          "filter_usecase",
          "float_usecase",
          "float_inf_usecase",
          "format_usecase",
          "globals_usecase",
          "hex_usecase",
          "str_usecase",
          "int_usecase",
          "iter_next_usecase",
          "locals_usecase",
          "long_usecase",
          "map_usecase",
          "max_usecase1",
          "max_usecase2",
          "max_usecase3",
          "max_usecase4",
          "min_usecase1",
          "min_usecase2",
          "min_usecase3",
          "min_usecase4",
          "oct_usecase",
          "reduce_usecase",
          "round_usecase1",
          "round_usecase2",
          "sum_usecase",
          "type_unary_usecase",
          "truth_usecase",
          "unichr_usecase",
          "zip_usecase",
          "zip_0_usecase",
          "zip_1_usecase",
          "zip_3_usecase",
          "zip_first_exhausted",
          "pow_op_usecase",
          "pow_usecase",
          "sum_usecase",
          "sum_kwarg_usecase",
          "isinstance_usecase",
          "isinstance_dict",
          "isinstance_usecase_numba_types",
          "isinstance_usecase_numba_types_2",
          "invalid_isinstance_usecase",
          "isinstance_usecase_invalid_type",
          "invalid_isinstance_usecase_phi_nopropagate",
          "invalid_isinstance_usecase_phi_nopropagate2",
          "invalid_isinstance_optional_usecase",
          "invalid_isinstance_unsupported_type_usecase",
          "impl",
          "run_nullary_func",
          "test_abs",
          "test_abs_npm",
          "test_all",
          "test_all_npm",
          "test_any",
          "test_any_npm",
          "test_bool",
          "test_bool_npm",
          "test_bool_nonnumber",
          "test_bool_nonnumber_npm",
          "test_complex",
          "test_complex_npm",
          "test_divmod_ints",
          "test_divmod_ints_npm",
          "test_divmod_floats",
          "test_divmod_floats_npm",
          "test_enumerate",
          "test_enumerate_npm",
          "test_enumerate_start",
          "test_enumerate_start_npm",
          "test_enumerate_start_invalid_start_type",
          "test_enumerate_start_invalid_start_type_npm",
          "test_filter",
          "test_filter_npm",
          "test_float",
          "test_float_npm",
          "test_float_string_literal",
          "test_format",
          "test_format_npm",
          "test_globals",
          "test_globals_npm",
          "test_globals_jit",
          "test_globals_jit_npm",
          "test_hex",
          "test_hex_npm",
          "test_int_str",
          "test_int",
          "test_int_npm",
          "test_iter_next",
          "test_iter_next_npm",
          "test_locals",
          "test_locals_forceobj",
          "test_locals_npm",
          "test_map",
          "test_map_npm",
          "check_minmax_1",
          "test_max_1",
          "test_min_1",
          "test_max_npm_1",
          "test_min_npm_1",
          "check_minmax_2",
          "test_max_2",
          "test_min_2",
          "test_max_npm_2",
          "test_min_npm_2",
          "check_minmax_3",
          "test_max_3",
          "test_min_3",
          "test_max_npm_3",
          "test_min_npm_3",
          "check_min_max_invalid_types",
          "test_max_1_invalid_types",
          "test_max_1_invalid_types_npm",
          "test_min_1_invalid_types",
          "test_min_1_invalid_types_npm",
          "check_minmax_bool1",
          "test_max_bool1",
          "test_min_bool1",
          "check_min_max_unary_non_iterable",
          "test_max_unary_non_iterable",
          "test_max_unary_non_iterable_npm",
          "test_min_unary_non_iterable",
          "test_min_unary_non_iterable_npm",
          "check_min_max_empty_tuple",
          "test_max_empty_tuple",
          "test_min_empty_tuple",
          "test_oct",
          "test_oct_npm",
          "test_reduce",
          "test_reduce_npm",
          "test_round1",
          "test_round1_npm",
          "test_round2",
          "test_round2_npm",
          "test_sum_objmode",
          "test_sum",
          "test_sum_exceptions",
          "test_truth",
          "test_type_unary",
          "test_zip",
          "test_zip_npm",
          "test_zip_1",
          "test_zip_1_npm",
          "test_zip_3",
          "test_zip_3_npm",
          "test_zip_0",
          "test_zip_0_npm",
          "test_zip_first_exhausted",
          "test_zip_first_exhausted_npm",
          "test_pow_op_usecase",
          "test_pow_usecase",
          "_check_min_max",
          "test_min_max_iterable_input",
          "test_eq_ne",
          "test_cmp",
          "test_isinstance",
          "test_isinstance_dict",
          "test_isinstance_issue9125",
          "test_isinstance_numba_types",
          "test_isinstance_numba_types_2",
          "test_isinstance_invalid_type",
          "test_isinstance_exceptions",
          "test_combinations",
          "test_numba_types",
          "test_python_numpy_scalar_alias_problem",
          "test_branch_prune",
          "test_branch_prune_and_bind_to_sig",
          "test_branch_prune_non_tuples_as_star_arg",
          "test_branch_prune_literal_as_star_arg",
          "test_getattr_func_retty",
          "test_getattr_value_retty",
          "test_getattr_module_obj",
          "test_getattr_module_obj_not_implemented",
          "test_getattr_raises_attribute_error",
          "test_getattr_with_default",
          "test_getattr_non_literal_str",
          "test_getattr_no_optional_type_generated",
          "test_hasattr",
          "test_hasattr_non_const_attr",
          "test_str_default",
          "test_str_object_kwarg",
          "test_str_calls_dunder_str",
          "test_str_falls_back_to_repr",
          "test_repr",
          "test_repr_fallback",
          "truncate_result",
          "check",
          "sum_range",
          "args",
          "args_kws",
          "check",
          "frange",
          "sample_functions",
          "gen_w_arg",
          "gen_w_arg",
          "foo",
          "bar",
          "foo",
          "f",
          "call_f",
          "f",
          "g",
          "call_f",
          "f",
          "g",
          "call_f",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "default_hash",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "ol_dummy_string",
          "ol_dummy_repr",
          "foo",
          "ol_dummy_repr",
          "foo",
          "box_dummy",
          "foo",
          "func",
          "func",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "TestBuiltins",
          "TestOperatorMixedTypes",
          "TestIsinstanceBuiltin",
          "TestGetattrBuiltin",
          "TestHasattrBuiltin",
          "TestStrAndReprBuiltin"
        ],
        "num_lines": 1682
      },
      "/tmp/cs-hpc-demo-1/numba/tests/chained_assign_usecases.py": {
        "functions": [
          "inc",
          "inc1",
          "inc2",
          "chain1",
          "chain2",
          "unpack1",
          "unpack2",
          "chain3",
          "unpack3",
          "unpack4",
          "unpack5",
          "unpack6"
        ],
        "classes": [],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_jitmethod.py": {
        "functions": [
          "test_bound_jit_method_with_loop_lift",
          "test_unbound_jit_method",
          "test_decorated_function",
          "test_decorated_function_with_kwargs",
          "__init__",
          "method",
          "__init__",
          "method",
          "method",
          "method"
        ],
        "classes": [
          "TestJITMethod",
          "TestDisabledJIT",
          "Something",
          "Something"
        ],
        "num_lines": 70
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_inlining.py": {
        "functions": [
          "gen_pipeline",
          "__init__",
          "run_pass",
          "define_pipelines",
          "make_pattern",
          "assert_has_pattern",
          "assert_not_has_pattern",
          "test_inner_function",
          "test_multiple_inner_functions",
          "test_inline_call_after_parfor",
          "test_inline_update_target_def",
          "test_inline_var_dict_ret",
          "test_inline_call_branch_pruning",
          "test_impl",
          "test_impl",
          "g",
          "test_impl",
          "foo",
          "test_impl",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "InlineTestPass",
          "InlineTestPipeline",
          "TestInlining",
          "PruningInlineTestPass",
          "InlineTestPipelinePrune"
        ],
        "num_lines": 279
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_manipulation.py": {
        "functions": [
          "from_generic",
          "array_reshape",
          "numpy_array_reshape",
          "numpy_broadcast_to",
          "numpy_broadcast_shapes",
          "numpy_broadcast_arrays",
          "numpy_broadcast_to_indexing",
          "flatten_array",
          "ravel_array",
          "ravel_array_size",
          "numpy_ravel_array",
          "transpose_array",
          "numpy_transpose_array",
          "numpy_transpose_array_axes_kwarg",
          "numpy_transpose_array_axes_kwarg_copy",
          "array_transpose_axes",
          "array_transpose_axes_copy",
          "transpose_issue_4708",
          "squeeze_array",
          "expand_dims",
          "atleast_1d",
          "atleast_2d",
          "atleast_3d",
          "as_strided1",
          "as_strided2",
          "sliding_window_view",
          "bad_index",
          "bad_float_index",
          "numpy_fill_diagonal",
          "numpy_shape",
          "numpy_size",
          "numpy_flatnonzero",
          "numpy_argwhere",
          "numpy_resize",
          "decorator",
          "test_array_reshape",
          "test_array_transpose_axes",
          "test_numpy_resize_basic",
          "test_numpy_resize_exception",
          "test_expand_dims",
          "test_expand_dims_exceptions",
          "check_atleast_nd",
          "test_atleast_1d",
          "test_atleast_2d",
          "test_atleast_3d",
          "check_as_strided",
          "test_as_strided",
          "test_as_strided_stride_none",
          "test_sliding_window_view",
          "test_sliding_window_view_errors",
          "test_flatten_array",
          "test_flatten_array_npm",
          "test_ravel_array",
          "test_ravel_array_size",
          "test_ravel_array_npm",
          "test_ravel_array_size_npm",
          "test_transpose_array",
          "test_transpose_array_npm",
          "test_squeeze_array",
          "test_squeeze_array_npm",
          "test_add_axis",
          "test_bad_index_npm",
          "test_bad_float_index_npm",
          "test_fill_diagonal_basic",
          "test_fill_diagonal_exception_cases",
          "test_broadcast_to",
          "test_broadcast_to_0d_array",
          "test_broadcast_to_raises",
          "test_broadcast_to_corner_cases",
          "test_broadcast_to_change_view",
          "test_broadcast_to_indexing",
          "test_broadcast_to_array_attrs",
          "test_broadcast_shapes",
          "test_broadcast_shapes_raises",
          "test_broadcast_shapes_negative_dimension",
          "test_broadcast_shapes_invalid_type",
          "test_shape",
          "test_size",
          "test_flatnonzero_basic",
          "test_argwhere_basic",
          "array_like_variations",
          "test_flatnonzero_array_like",
          "test_argwhere_array_like",
          "broadcast_arrays_assert_correct_shape",
          "test_broadcast_arrays_same_input_shapes",
          "test_broadcast_arrays_two_compatible_by_ones_input_shapes",
          "test_broadcast_arrays_two_compatible_by_prepending_ones_input_shapes",
          "test_broadcast_arrays_scalar_input",
          "test_broadcast_arrays_tuple_input",
          "test_broadcast_arrays_non_array_input",
          "test_broadcast_arrays_invalid_mixed_input_types",
          "test_broadcast_arrays_invalid_input",
          "test_broadcast_arrays_incompatible_shapes_raise_valueerror",
          "test_readonly_after_flatten",
          "test_readonly_after_ravel",
          "test_mutability_after_ravel",
          "result",
          "generic_run",
          "check",
          "check_only_shape",
          "check_err_shape",
          "check_err_size",
          "check_err_multiple_negative",
          "check_empty",
          "check",
          "check_err_axis_repeated",
          "check_err_axis_oob",
          "check_err_invalid_args",
          "check_issue_4708",
          "inputs",
          "check",
          "check_all_axes",
          "check_result",
          "check_single",
          "check_tuple",
          "check",
          "foo",
          "check",
          "_raises",
          "_typing_error",
          "generic_check",
          "check",
          "check",
          "np_new_axis_getitem",
          "np_new_axis_setitem",
          "_shape_variations",
          "_val_variations",
          "_multi_dimensional_array_variations",
          "_multi_dimensional_array_variations_strided",
          "_check_fill_diagonal",
          "_assert_raises",
          "_broadcast_to_1",
          "foo",
          "check",
          "check",
          "a_variations",
          "a_variations",
          "unfold_flatten",
          "unfold_ravel",
          "try_ravel_w_copy"
        ],
        "classes": [
          "TestArrayManipulation"
        ],
        "num_lines": 1588
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dictobject.py": {
        "functions": [
          "test_dict_bool",
          "test_dict_create",
          "test_dict_get",
          "test_dict_get_with_default",
          "test_dict_getitem",
          "test_dict_popitem",
          "test_dict_popitem_many",
          "test_dict_pop",
          "test_dict_pop_many",
          "test_dict_delitem",
          "test_dict_clear",
          "test_dict_items",
          "test_dict_keys",
          "test_dict_keys_len",
          "test_dict_values",
          "test_dict_values_len",
          "test_dict_items_len",
          "test_dict_iter",
          "test_dict_contains",
          "test_dict_copy",
          "test_dict_setdefault",
          "test_dict_equality",
          "test_dict_equality_more",
          "test_dict_equality_diff_type",
          "test_dict_to_from_meminfo",
          "test_001_cannot_downcast_key",
          "test_002_cannot_downcast_default",
          "test_003_cannot_downcast_key",
          "test_004_cannot_downcast_key",
          "test_005_cannot_downcast_value",
          "test_006_cannot_downcast_key",
          "test_007_collision_checks",
          "test_008_lifo_popitem",
          "test_010_cannot_downcast_default",
          "test_011_cannot_downcast_key",
          "test_012_cannot_downcast_key",
          "test_013_contains_empty_dict",
          "test_014_not_contains_empty_dict",
          "test_015_dict_clear",
          "test_016_cannot_downcast_key",
          "test_017_cannot_downcast_default",
          "test_018_keys_iter_are_views",
          "test_019",
          "test_020_string_key",
          "test_021_long_str_key",
          "test_022_references_juggle",
          "test_023_closure",
          "test_024_unicode_getitem_keys",
          "test_issue6570_alignment_padding",
          "test_dict_update",
          "check_good",
          "check_bad",
          "test_cast_int_to",
          "test_cast_float_to",
          "test_cast_bool_to",
          "test_basic",
          "test_copy_from_dict",
          "test_compiled",
          "test_gh7908",
          "check_stringify",
          "test_repr",
          "test_str",
          "test_iterable_type_constructor",
          "setUp",
          "test_exception_no_iterable_arg",
          "test_exception_dict_mapping",
          "test_exception_setitem",
          "setUp",
          "test_exception_nargs",
          "test_exception_mapping_ctor",
          "test_exception_non_iterable_arg",
          "test_exception_setitem",
          "test_str_key",
          "test_str_val",
          "test_str_key_array_value",
          "test_dict_of_dict_int_keyval",
          "test_dict_of_dict_npm",
          "test_delitem",
          "test_getitem_return_type",
          "test_storage_model_mismatch",
          "assert_disallow",
          "assert_disallow_key",
          "assert_disallow_value",
          "test_disallow_list",
          "test_disallow_set",
          "test_simple_literal",
          "test_simple_args",
          "test_simple_upcast",
          "test_conflicting_value_type",
          "test_conflicting_key_type",
          "test_conflict_key_type_non_number",
          "test_ifelse_filled_both_branches",
          "test_ifelse_empty_one_branch",
          "test_loop",
          "test_unused",
          "test_define_after_use",
          "test_dict_of_dict",
          "test_comprehension_basic",
          "test_comprehension_basic_mixed_type",
          "test_comprehension_involved",
          "test_comprehension_fail_mixed_type",
          "test_check_untyped_dict_ops",
          "test_getitem",
          "test_setdefault",
          "__init__",
          "__hash__",
          "test_jitclass_as_value",
          "test_dict_create_no_jit_using_new_dict",
          "test_dict_create_no_jit_using_Dict",
          "test_dict_create_no_jit_using_empty",
          "test_dict_iterator",
          "test_homogeneous_and_literal",
          "test_heterogeneous_but_castable_to_homogeneous",
          "test_heterogeneous_but_not_castable_to_homogeneous",
          "test_mutation_not_carried",
          "test_mutation_not_carried_single_function",
          "test_unify_across_function_call",
          "test_basic_const_lowering_boxing",
          "test_basic_nonconst_in_scope",
          "test_basic_nonconst_freevar",
          "test_literal_value",
          "test_list_and_array_as_value",
          "test_repeated_key_literal_value",
          "test_read_only",
          "test_mutation_failure",
          "test_get",
          "test_dict_keys",
          "test_dict_values",
          "test_dict_items",
          "test_dict_return",
          "test_dict_unify",
          "test_dict_not_unify",
          "test_dict_value_coercion",
          "test_build_map_op_code",
          "test_dict_as_arg",
          "test_dict_with_single_literallist_value",
          "test_tuple_not_in_mro",
          "test_const_key_not_in_dict",
          "test_uncommon_identifiers",
          "test_update_error",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "core",
          "foo",
          "foo",
          "foo",
          "core",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "make_content",
          "boxer",
          "unboxer",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "f1",
          "f2",
          "producer",
          "consumer",
          "func1",
          "func2",
          "func3",
          "func4",
          "func5",
          "func6",
          "func7",
          "func8",
          "_get_dict",
          "ctor",
          "ctor",
          "ctor",
          "foo",
          "foo",
          "inner_numba_dict",
          "usecase",
          "inner_numba_dict",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "fun1",
          "fun2",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "nop",
          "bar",
          "foo",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "_len",
          "static_getitem",
          "contains",
          "copy",
          "setitem",
          "delitem",
          "popitem",
          "pop",
          "clear",
          "setdefault",
          "get",
          "getitem",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "key_mismatch",
          "value_type_mismatch",
          "bar",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "bar",
          "specific_ty",
          "baz",
          "bar",
          "ol_bar",
          "foo",
          "impl",
          "impl",
          "impl",
          "impl",
          "ol_bar",
          "foo",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "TestDictObject",
          "TestDictTypeCasting",
          "TestTypedDict",
          "DictIterableCtor",
          "TestDictIterableCtorJit",
          "TestDictIterableCtorNoJit",
          "TestDictRefctTypes",
          "TestDictForbiddenTypes",
          "TestDictInferred",
          "TestNonCompiledInfer",
          "Bag",
          "TestDictWithJitclass",
          "TestNoJit",
          "TestDictIterator",
          "TestTypedDictInitialValues",
          "TestLiteralStrKeyDict"
        ],
        "num_lines": 2561
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_linalg.py": {
        "functions": [
          "dot2",
          "dot3",
          "vdot",
          "invert_matrix",
          "cholesky_matrix",
          "eig_matrix",
          "eigvals_matrix",
          "eigh_matrix",
          "eigvalsh_matrix",
          "svd_matrix",
          "qr_matrix",
          "lstsq_system",
          "solve_system",
          "pinv_matrix",
          "slogdet_matrix",
          "det_matrix",
          "norm_matrix",
          "cond_matrix",
          "matrix_rank_matrix",
          "matrix_power_matrix",
          "trace_matrix",
          "trace_matrix_no_offset",
          "outer_matrix",
          "kron_matrix",
          "setUp",
          "sample_vector",
          "sample_matrix",
          "check_contiguity_warning",
          "check_func",
          "_aligned_copy",
          "check_func_out",
          "assert_mismatching_sizes",
          "assert_mismatching_dtypes",
          "check_dot_vv",
          "test_dot_vv",
          "test_vdot",
          "check_dot_vm",
          "test_dot_vm",
          "check_dot_mm",
          "test_dot_mm",
          "test_matmul_vv",
          "test_matmul_vm",
          "test_matmul_mm",
          "test_contiguity_warnings",
          "setUp",
          "sample_vector",
          "specific_sample_matrix",
          "assert_error",
          "assert_non_square",
          "assert_wrong_dtype",
          "assert_wrong_dimensions",
          "assert_no_nan_or_inf",
          "assert_contig_sanity",
          "assert_raise_on_singular",
          "assert_is_identity_matrix",
          "assert_invalid_norm_kind",
          "assert_raise_on_empty",
          "test_specific_sample_matrix",
          "test_linalg_inv",
          "test_no_input_mutation",
          "sample_matrix",
          "assert_not_pd",
          "test_linalg_cholesky",
          "sample_matrix",
          "assert_no_domain_change",
          "_check_worker",
          "checker_for_linalg_eig",
          "test_linalg_eig",
          "test_linalg_eigvals",
          "test_linalg_eigh",
          "test_linalg_eigvalsh",
          "test_no_input_mutation",
          "check_reconstruction",
          "test_linalg_svd",
          "test_no_input_mutation",
          "test_linalg_qr",
          "test_no_input_mutation",
          "assert_wrong_dimensions_1D",
          "assert_dimensionally_invalid",
          "assert_homogeneous_dtypes",
          "test_linalg_lstsq",
          "test_issue3368",
          "test_linalg_solve",
          "test_no_input_mutation",
          "test_linalg_pinv",
          "test_issue5870",
          "check_det",
          "check_slogdet",
          "do_test",
          "test_linalg_det",
          "test_linalg_slogdet",
          "test_no_input_mutation",
          "test_linalg_norm",
          "test_linalg_cond",
          "test_linalg_matrix_rank",
          "test_no_input_mutation",
          "assert_int_exponenent",
          "test_linalg_matrix_power",
          "setUp",
          "assert_int_offset",
          "test_trace",
          "test_trace_w_optional_input",
          "_assert_wrong_dim",
          "_gen_input",
          "_get_input",
          "test_outer",
          "test_kron",
          "test_copy_to_fortran_order",
          "samples",
          "samples",
          "check_error",
          "check",
          "ainv",
          "check",
          "check",
          "check",
          "func",
          "check",
          "func",
          "check",
          "inner_test_loop_fn",
          "f2",
          "check",
          "func",
          "check",
          "some_fn",
          "func",
          "check",
          "check",
          "check",
          "func",
          "check",
          "check",
          "tested",
          "check",
          "check",
          "check",
          "direct_call",
          "slice_to_any",
          "expected_slice_to_any",
          "func"
        ],
        "classes": [
          "TestProduct",
          "TestLinalgBase",
          "TestTestLinalgBase",
          "TestLinalgInv",
          "TestLinalgCholesky",
          "TestLinalgEigenSystems",
          "TestLinalgSvd",
          "TestLinalgQr",
          "TestLinalgSystems",
          "TestLinalgLstsq",
          "TestLinalgSolve",
          "TestLinalgPinv",
          "TestLinalgDetAndSlogdet",
          "TestLinalgNorm",
          "TestLinalgCond",
          "TestLinalgMatrixRank",
          "TestLinalgMatrixPower",
          "TestTrace",
          "TestBasics",
          "TestHelpers"
        ],
        "num_lines": 2696
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_function_type.py": {
        "functions": [
          "dump",
          "mk_cfunc_func",
          "njit_func",
          "mk_njit_with_sig_func",
          "mk_ctypes_func",
          "mk_wap_func",
          "cfunc_func",
          "njit_with_sig_func",
          "ctypes_func",
          "__init__",
          "__wrapper_address__",
          "signature",
          "__call__",
          "wap_func",
          "test_in__",
          "test_in_call__",
          "test_in_call_out",
          "test_in_seq_call",
          "test_in_ns_seq_call",
          "test_ns_call",
          "test_ns_out",
          "test_ns_call_out",
          "test_in_overload",
          "test_ns_overload",
          "test_in_choose",
          "test_ns_choose",
          "test_in_choose_out",
          "test_in_choose_func_value",
          "test_in_pick_func_call",
          "test_in_iter_func_call",
          "test_experimental_feature_warning",
          "test_wrapper_address_protocol_libm",
          "test_compilation_results",
          "test_issue_3405_using_cfunc",
          "test_issue_3405_using_njit",
          "test_pr4967_example",
          "test_pr4967_array",
          "test_reference_example",
          "test_apply_function_in_function",
          "test_function_with_none_argument",
          "test_constant_functions",
          "test_generators",
          "test_jit_support",
          "test_signature_mismatch",
          "test_unique_dispatcher",
          "test_zero_address",
          "test_issue_5470",
          "test_issue_5540",
          "test_issue_5615",
          "test_issue_5685",
          "test_basic",
          "test_basic2",
          "test_basic3",
          "test_basic4",
          "test_basic5",
          "test_base",
          "count_num_bb_in_cfg",
          "test_inlining_global_dispatcher",
          "test_not_inlining_dispatcher_args",
          "test_exception_raising",
          "test_exception_ignored_in_cfunc",
          "a",
          "foo",
          "a_i64",
          "a_f64",
          "a_str",
          "foo",
          "a",
          "foo",
          "a",
          "b",
          "foo",
          "a",
          "b",
          "mkfoo",
          "a",
          "mkfoo",
          "a",
          "mkfoo",
          "a",
          "mkfoo",
          "a",
          "foo",
          "a",
          "mkfoo",
          "a",
          "b",
          "foo",
          "a",
          "b",
          "mkfoo",
          "a",
          "b",
          "foo",
          "a",
          "b",
          "foo",
          "a",
          "b",
          "foo",
          "a",
          "b",
          "foo",
          "more",
          "less",
          "foo",
          "myeval",
          "add_template",
          "foo",
          "foo_obj",
          "a",
          "b",
          "g",
          "a",
          "b",
          "g",
          "a",
          "b",
          "foo",
          "foo1",
          "foo2",
          "bar",
          "composition",
          "a",
          "b",
          "foo",
          "f_inner",
          "f",
          "a",
          "foo",
          "a",
          "b",
          "foo",
          "gen",
          "con",
          "gen_",
          "foo",
          "a",
          "a2",
          "b",
          "f1",
          "f2",
          "foo",
          "foo_template",
          "test",
          "foo",
          "foo_good",
          "foo_bad",
          "foo_bad2good",
          "foo1",
          "foo2",
          "bar_scalar",
          "bar",
          "bar",
          "foo",
          "bar_bad",
          "bar_good",
          "foo1",
          "foo2",
          "bar",
          "foo1",
          "foo2",
          "foo3",
          "bar",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo1",
          "foo2",
          "bar",
          "foo1",
          "foo2",
          "bar",
          "foo1",
          "foo2",
          "bar1",
          "bar2",
          "bar",
          "caller",
          "callee_int",
          "callee_array",
          "add",
          "callme",
          "bar",
          "add",
          "callme",
          "add",
          "callme",
          "bar",
          "add",
          "callme",
          "c_add",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "__init__",
          "__repr__",
          "__wrapper_address__",
          "signature",
          "__wrapper_address__",
          "signature",
          "__wrapper_address__",
          "signature",
          "__wrapper_address__",
          "signature"
        ],
        "classes": [
          "WAP",
          "TestFunctionType",
          "TestFunctionTypeExtensions",
          "TestMiscIssues",
          "TestBasicSubtyping",
          "TestMultiFunctionType",
          "TestInliningFunctionType",
          "TestExceptionInFunctionType",
          "LibM",
          "Good",
          "Bad",
          "BadToGood",
          "MyError",
          "MyError"
        ],
        "num_lines": 1408
      },
      "/tmp/cs-hpc-demo-1/numba/tests/parfors_cache_usecases.py": {
        "functions": [
          "arrayexprs_case",
          "prange_case",
          "caller_case",
          "self_test",
          "self_run",
          "check_module",
          "run_module"
        ],
        "classes": [
          "_TestModule"
        ],
        "num_lines": 66
      },
      "/tmp/cs-hpc-demo-1/numba/tests/typedlist_usecases.py": {
        "functions": [
          "catch_global"
        ],
        "classes": [],
        "num_lines": 14
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_threadsafety.py": {
        "functions": [
          "foo",
          "ufunc_foo",
          "gufunc_foo",
          "run_jit",
          "run_compile",
          "test_concurrent_jit",
          "test_concurrent_jit_cache",
          "run_vectorize",
          "test_concurrent_vectorize",
          "test_concurrent_vectorize_cache",
          "run_guvectorize",
          "test_concurrent_guvectorize",
          "test_concurrent_guvectorize_cache",
          "test_concurrent_mix_use",
          "runner",
          "runner",
          "runner",
          "chooser"
        ],
        "classes": [
          "TestThreadSafety"
        ],
        "num_lines": 97
      },
      "/tmp/cs-hpc-demo-1/numba/tests/cfunc_cache_usecases.py": {
        "functions": [
          "add_usecase",
          "add_nocache_usecase",
          "div_usecase",
          "inner",
          "outer",
          "self_test",
          "check_module"
        ],
        "classes": [
          "_TestModule"
        ],
        "num_lines": 70
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb_support.py": {
        "functions": [
          "__init__",
          "_drive",
          "supports_python",
          "supports_numpy",
          "_captured_expect",
          "assert_output",
          "assert_regex_output",
          "_run_command",
          "run",
          "cont",
          "quit",
          "next",
          "step",
          "set_breakpoint",
          "check_hit_breakpoint",
          "stack_list_arguments",
          "stack_list_variables",
          "interpreter_exec",
          "_list_features_raw",
          "list_features"
        ],
        "classes": [
          "GdbMIDriver"
        ],
        "num_lines": 197
      },
      "/tmp/cs-hpc-demo-1/numba/tests/overload_usecases.py": {
        "functions": [
          "impl4",
          "impl5",
          "var_positional_impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 28
      },
      "/tmp/cs-hpc-demo-1/numba/tests/enum_usecases.py": {
        "functions": [],
        "classes": [
          "Color",
          "Shake",
          "Planet",
          "HeterogeneousEnum",
          "Shape",
          "RequestError",
          "IntEnumWithNegatives"
        ],
        "num_lines": 55
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_debuginfo.py": {
        "functions": [
          "_getasm",
          "_check",
          "test_no_debuginfo_in_asm",
          "test_debuginfo_in_asm",
          "test_environment_override",
          "test_llvm_inliner_flag_conflict",
          "_get_llvmir",
          "_get_metadata",
          "_get_metadata_map",
          "_get_lines_from_debuginfo",
          "test_DW_LANG",
          "test_DILocation",
          "test_DILocation_entry_blk",
          "test_DILocation_decref",
          "test_DILocation_undefined",
          "test_DILocation_versioned_variables",
          "test_numeric_scalars",
          "test_arrays",
          "test_debug_optnone",
          "test_omitted_arg",
          "test_missing_source",
          "test_irregularly_indented_source",
          "test_no_if_op_bools_declared",
          "foo",
          "foo",
          "bar",
          "baz",
          "foo",
          "foo",
          "foo",
          "foo",
          "sink",
          "foo",
          "foo",
          "foo",
          "foo",
          "get_debug_lines",
          "get_func_attrs",
          "foo",
          "foo",
          "foo",
          "choice",
          "foo",
          "bar",
          "foo"
        ],
        "classes": [
          "TestDebugInfo",
          "TestDebugInfoEmission"
        ],
        "num_lines": 775
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_func_lifetime.py": {
        "functions": [
          "global_usecase1",
          "global_usecase2",
          "__add__",
          "get_impl",
          "check_local_func_lifetime",
          "test_local_func_lifetime",
          "test_local_func_lifetime_npm",
          "check_global_func_lifetime",
          "test_global_func_lifetime",
          "test_global_func_lifetime_npm",
          "check_global_obj_lifetime",
          "test_global_obj_lifetime",
          "check_inner_function_lifetime",
          "test_inner_function_lifetime",
          "test_inner_function_lifetime_npm",
          "test_double_free",
          "f",
          "mult_10",
          "do_math",
          "is_point_in_polygons",
          "dummy"
        ],
        "classes": [
          "Dummy",
          "TestFuncLifetime",
          "TestLifeTimeIssue"
        ],
        "num_lines": 164
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeinfer.py": {
        "functions": [
          "issue_797",
          "issue_1080",
          "list_unify_usecase1",
          "list_unify_usecase2",
          "range_unify_usecase",
          "issue_1394",
          "get_func_typing_errs",
          "test_arg_ret_casting",
          "test_arg_ret_mismatch",
          "test_invalid_arg_type_forcing",
          "assert_unify",
          "assert_unify_failure",
          "test_integer",
          "test_bool",
          "unify_number_pair_test",
          "test_unify_number_pair",
          "test_none_to_optional",
          "test_none",
          "test_optional",
          "test_tuple",
          "test_optional_tuple",
          "test_arrays",
          "test_list",
          "test_set",
          "test_range",
          "assert_can_convert",
          "assert_cannot_convert",
          "test_convert_number_types",
          "test_tuple",
          "test_arrays",
          "test_optional",
          "assert_resolve_overload",
          "test_non_ambiguous_match",
          "test_ambiguous_match",
          "test_ambiguous_error",
          "_actually_test_complex_unify",
          "test_complex_unify_issue599",
          "test_complex_unify_issue599_multihash",
          "test_int_tuple_unify",
          "test_issue_797",
          "test_issue_1080",
          "test_list_unify1",
          "test_list_unify2",
          "test_range_unify",
          "test_issue_1394",
          "test_issue_6293",
          "test_issue_9162",
          "test_load_fast_and_clear",
          "test_load_fast_and_clear_variant_2",
          "test_load_fast_and_clear_variant_3",
          "test_load_fast_and_clear_variant_4",
          "check_fold_arguments_list_inputs",
          "test_fold_arguments_list_inputs",
          "__init__",
          "run_pass",
          "define_pipelines",
          "test_partial_typing_error",
          "mock_callstack_register",
          "test_fail_cache",
          "test_config_to_disable_fail_cache",
          "foo",
          "foo",
          "foo",
          "check",
          "check",
          "pyfunc",
          "foo",
          "confuse_typer",
          "ol_aabbcc",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "make_tuple",
          "impl",
          "func",
          "impl"
        ],
        "classes": [
          "TestArgRetCasting",
          "TestUnify",
          "TestTypeConversion",
          "TestResolveOverload",
          "TestUnifyUseCases",
          "TestMiscIssues",
          "TestFoldArguments",
          "DummyCR",
          "TyperCompiler",
          "TestPartialTypingErrors",
          "TestTypeInferFailCache"
        ],
        "num_lines": 980
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode.py": {
        "functions": [
          "isascii",
          "literal_usecase",
          "passthrough_usecase",
          "eq_usecase",
          "len_usecase",
          "bool_usecase",
          "getitem_usecase",
          "getitem_check_kind_usecase",
          "zfill_usecase",
          "concat_usecase",
          "repeat_usecase",
          "inplace_concat_usecase",
          "in_usecase",
          "lt_usecase",
          "le_usecase",
          "gt_usecase",
          "ge_usecase",
          "partition_usecase",
          "find_usecase",
          "find_with_start_only_usecase",
          "find_with_start_end_usecase",
          "rpartition_usecase",
          "count_usecase",
          "count_with_start_usecase",
          "count_with_start_end_usecase",
          "rfind_usecase",
          "rfind_with_start_only_usecase",
          "rfind_with_start_end_usecase",
          "replace_usecase",
          "replace_with_count_usecase",
          "rindex_usecase",
          "rindex_with_start_only_usecase",
          "rindex_with_start_end_usecase",
          "index_usecase",
          "index_with_start_only_usecase",
          "index_with_start_end_usecase",
          "startswith_usecase",
          "endswith_usecase",
          "expandtabs_usecase",
          "expandtabs_with_tabsize_usecase",
          "expandtabs_with_tabsize_kwarg_usecase",
          "startswith_with_start_only_usecase",
          "startswith_with_start_end_usecase",
          "endswith_with_start_only_usecase",
          "endswith_with_start_end_usecase",
          "split_usecase",
          "split_with_maxsplit_usecase",
          "split_with_maxsplit_kwarg_usecase",
          "split_whitespace_usecase",
          "splitlines_usecase",
          "splitlines_with_keepends_usecase",
          "splitlines_with_keepends_kwarg_usecase",
          "rsplit_usecase",
          "rsplit_with_maxsplit_usecase",
          "rsplit_with_maxsplit_kwarg_usecase",
          "rsplit_whitespace_usecase",
          "lstrip_usecase",
          "lstrip_usecase_chars",
          "rstrip_usecase",
          "rstrip_usecase_chars",
          "strip_usecase",
          "strip_usecase_chars",
          "join_usecase",
          "join_empty_usecase",
          "center_usecase",
          "center_usecase_fillchar",
          "ljust_usecase",
          "ljust_usecase_fillchar",
          "rjust_usecase",
          "rjust_usecase_fillchar",
          "istitle_usecase",
          "iter_usecase",
          "title",
          "literal_iter_usecase",
          "enumerated_iter_usecase",
          "iter_stopiteration_usecase",
          "literal_iter_stopiteration_usecase",
          "islower_usecase",
          "lower_usecase",
          "ord_usecase",
          "chr_usecase",
          "setUp",
          "test_literal",
          "test_passthrough",
          "test_eq",
          "test_eq_optional",
          "_check_ordering_op",
          "test_lt",
          "test_le",
          "test_gt",
          "test_ge",
          "test_len",
          "test_bool",
          "test_expandtabs",
          "test_expandtabs_with_tabsize",
          "test_expandtabs_exception_noninteger_tabsize",
          "test_startswith_default",
          "test_startswith_with_start",
          "test_startswith_with_start_end",
          "test_startswith_exception_invalid_args",
          "test_startswith_tuple",
          "test_startswith_tuple_args",
          "test_endswith_default",
          "test_endswith_with_start",
          "test_endswith_with_start_end",
          "test_endswith_tuple",
          "test_endswith_tuple_args",
          "test_in",
          "test_partition_exception_invalid_sep",
          "test_partition",
          "test_find",
          "test_find_with_start_only",
          "test_find_with_start_end",
          "test_find_exception_noninteger_start_end",
          "test_rpartition_exception_invalid_sep",
          "test_rpartition",
          "test_count",
          "test_count_with_start",
          "test_count_with_start_end",
          "test_count_arg_type_check",
          "test_count_optional_arg_type_check",
          "test_rfind",
          "test_rfind_with_start_only",
          "test_rfind_with_start_end",
          "test_rfind_wrong_substr",
          "test_rfind_wrong_start_end",
          "test_rfind_wrong_start_end_optional",
          "test_rindex",
          "test_index",
          "test_index_rindex_with_start_only",
          "test_index_rindex_with_start_end",
          "test_index_rindex_exception_substring_not_found",
          "test_index_rindex_exception_noninteger_start_end",
          "test_getitem",
          "test_getitem_scalar_kind",
          "test_getitem_error",
          "test_slice2",
          "test_slice2_error",
          "test_getitem_slice2_kind",
          "test_slice3",
          "test_getitem_slice3_kind",
          "test_slice3_error",
          "test_slice_ascii_flag",
          "test_zfill",
          "test_concat",
          "test_repeat",
          "test_repeat_exception_float",
          "test_split_exception_empty_sep",
          "test_split_exception_noninteger_maxsplit",
          "test_split",
          "test_split_with_maxsplit",
          "test_split_whitespace",
          "test_split_exception_invalid_keepends",
          "test_splitlines",
          "test_splitlines_with_keepends",
          "test_rsplit_exception_empty_sep",
          "test_rsplit_exception_noninteger_maxsplit",
          "test_rsplit",
          "test_rsplit_with_maxsplit",
          "test_rsplit_whitespace",
          "test_join_empty",
          "test_join_non_string_exception",
          "test_join",
          "test_join_interleave_str",
          "test_justification",
          "test_justification_fillchar",
          "test_justification_fillchar_exception",
          "test_inplace_concat",
          "test_isidentifier",
          "test_strip",
          "test_isspace",
          "test_istitle",
          "test_isprintable",
          "test_pointless_slice",
          "test_walk_backwards",
          "test_stride_slice",
          "test_basic_lt",
          "test_basic_gt",
          "test_comparison",
          "test_literal_concat",
          "test_literal_comparison",
          "test_literal_len",
          "test_literal_getitem",
          "test_literal_in",
          "test_literal_xyzwith",
          "test_literal_find",
          "test_not",
          "test_capitalize",
          "test_isupper",
          "test_upper",
          "test_casefold",
          "test_isalpha",
          "test_isascii",
          "test_title",
          "test_swapcase",
          "test_islower",
          "test_isalnum",
          "test_lower",
          "test_isnumeric",
          "test_isdigit",
          "test_isdecimal",
          "test_replace",
          "test_replace_with_count",
          "test_replace_unsupported",
          "test_const_unicode_in_tuple",
          "test_const_unicode_in_hetero_tuple",
          "test_ascii_flag_unbox",
          "test_ascii_flag_join",
          "test_ascii_flag_getitem",
          "test_ascii_flag_add_mul",
          "test_unicode_iter",
          "test_unicode_literal_iter",
          "test_unicode_enumerate_iter",
          "test_unicode_stopiteration_iter",
          "test_unicode_literal_stopiteration_iter",
          "test_ord",
          "test_ord_invalid",
          "test_chr",
          "test_chr_invalid",
          "test_unicode_type_mro",
          "test_f_strings",
          "foo",
          "try_compile_bad_optional",
          "try_compile_wrong_start_optional",
          "try_compile_wrong_end_optional",
          "f",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "bar",
          "ol_bar",
          "foo",
          "impl1",
          "impl2",
          "impl3",
          "impl4",
          "impl5",
          "try_compile_bad_optional"
        ],
        "classes": [
          "BaseTest",
          "TestUnicode",
          "TestUnicodeInTuple",
          "TestUnicodeIteration",
          "TestUnicodeAuxillary"
        ],
        "num_lines": 2717
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_asnumbatype.py": {
        "functions": [
          "test_simple_types",
          "test_numba_types",
          "test_single_containers",
          "test_optional",
          "test_nested_containers",
          "test_jitclass_registers",
          "test_type_alias",
          "test_overwrite_type",
          "test_any_throws",
          "test_bad_union_throws",
          "test_instance_check_usecase",
          "typeof_bfloat16",
          "unbox_bfloat16",
          "type_bfloat16_ctor",
          "instancecheck_no_ant_reg",
          "instancecheck",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "typer"
        ],
        "classes": [
          "TestAsNumbaType",
          "MyInt",
          "bfloat16",
          "_type_class_bfloat16",
          "_model_bfloat16"
        ],
        "num_lines": 288
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_return_values.py": {
        "functions": [
          "get_nopython_func",
          "get_pyobj_func",
          "get_module_func",
          "test_nopython_func",
          "test_nopython_func_npm",
          "test_pyobj_func",
          "test_pyobj_func_npm",
          "test_module_func",
          "test_module_func_npm"
        ],
        "classes": [
          "TestReturnValues"
        ],
        "num_lines": 74
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_parallel_backend.py": {
        "functions": [
          "foo",
          "ufunc_foo",
          "gufunc_foo",
          "chooser",
          "compile_factory",
          "_get_mp_classes",
          "linalg",
          "linalg",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "run_compile",
          "__init__",
          "__call__",
          "run_compile",
          "generate",
          "run_cmd",
          "run_test_in_separate_process",
          "_inject",
          "generate",
          "run_cmd",
          "_inject",
          "generate",
          "each_env_var",
          "test_valid_env_var",
          "test_invalid_env_var",
          "test_omp",
          "test_tbb",
          "test_workqueue",
          "test_omp_stack_overflow",
          "test_single_thread_tbb",
          "test_workqueue_aborts_on_nested_parallelism",
          "test_workqueue_handles_fork_from_non_main_thread",
          "test_check_threading_layer_is_gnu",
          "test_par_parent_os_fork_par_child",
          "test_par_parent_implicit_mp_fork_par_child",
          "test_par_parent_explicit_mp_fork_par_child",
          "test_par_parent_mp_spawn_par_child_par_parent",
          "test_serial_parent_implicit_mp_fork_par_child_then_par_parent",
          "test_serial_parent_explicit_mp_fork_par_child_then_par_parent",
          "test_fork_from_non_main_thread",
          "test_lifetime_of_task_scheduler_handle",
          "run_cmd",
          "test_orphaned_semaphore",
          "test_lazy_lock_init",
          "test_vendors",
          "test_template",
          "test_template",
          "methgen",
          "test_method"
        ],
        "classes": [
          "runnable",
          "jit_runner",
          "mask_runner",
          "linalg_runner",
          "vectorize_runner",
          "guvectorize_runner",
          "_proc_class_impl",
          "TestParallelBackendBase",
          "TestParallelBackend",
          "TestInSubprocess",
          "TestSpecificBackend",
          "ThreadLayerTestHelper",
          "TestThreadingLayerSelection",
          "TestThreadingLayerPriority",
          "TestMiscBackendIssues",
          "TestForkSafetyIssues",
          "TestTBBSpecificIssues",
          "TestInitSafetyIssues",
          "TestOpenMPVendors"
        ],
        "num_lines": 1253
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_nrt.py": {
        "functions": [
          "__init__",
          "__del__",
          "test_init_fail",
          "setUp",
          "test_meminfo_refct_1",
          "test_meminfo_refct_2",
          "test_fake_memoryview",
          "test_memoryview",
          "test_buffer",
          "test_allocate_invalid_size",
          "test_allocate_negative_size",
          "measure_memory_diff",
          "test_snapshot",
          "test_issue_with_refct_op_pruning",
          "test_incref_after_cast",
          "test_refct_pruning_issue_1511",
          "test_refct_pruning_issue_1526",
          "test_no_nrt_on_njit_decoration",
          "test_refct_pruning_op_recognize",
          "test_refct_pruning_with_branches",
          "test_inline_asm",
          "setUp",
          "compile_cffi_module",
          "get_nrt_api_table",
          "test_manage_memory",
          "test_allocate",
          "test_get_api",
          "setUp",
          "tearDown",
          "test_stats_env_var_explicit_on",
          "check_env_var_off",
          "test_stats_env_var_explicit_off",
          "test_stats_env_var_default_off",
          "test_stats_status_toggle",
          "test_rtsys_stats_query_raises_exception_when_disabled",
          "test_nrt_explicit_stats_query_raises_exception_when_disabled",
          "alloc_nrt_memory",
          "keep_memory",
          "release_memory",
          "calculate_2D_vector_mag",
          "normalize_2D_vector",
          "normalize_vectors",
          "f",
          "f",
          "udt",
          "foo",
          "_append_non_na",
          "_append",
          "append",
          "extend",
          "bar",
          "foo",
          "test_nrt_api",
          "foo",
          "codegen"
        ],
        "classes": [
          "Dummy",
          "TestNrtMemInfoNotInitialized",
          "TestNrtMemInfo",
          "TestTracemalloc",
          "TestNRTIssue",
          "TestRefCtPruning",
          "TestNrtExternalCFFI",
          "TestNrtStatistics"
        ],
        "num_lines": 856
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeguard.py": {
        "functions": [
          "guard_args",
          "guard_ret",
          "setUp",
          "test_check_args",
          "test_check_ret",
          "test_check_does_not_work_with_inner_func",
          "guard"
        ],
        "classes": [
          "TestTypeGuard"
        ],
        "num_lines": 44
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_vectorization.py": {
        "functions": [
          "gen_ir",
          "test_nditer_loop",
          "test_slp",
          "test_instcombine_effect",
          "do_sum",
          "foo",
          "sum_sqrt_list"
        ],
        "classes": [
          "TestVectorization"
        ],
        "num_lines": 87
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_warnings.py": {
        "functions": [
          "check_objmode_deprecation_warning",
          "check_nopython_kwarg_missing_warning",
          "test_return_type_warning_with_nrt",
          "test_no_warning_with_forceobj",
          "test_deprecated",
          "test_warnings_fixer",
          "test_disable_performance_warnings",
          "test_filter_deprecation_warnings",
          "test_filter_ignore_numba_deprecation_only",
          "return_external_array",
          "add",
          "bar"
        ],
        "classes": [
          "TestBuiltins"
        ],
        "num_lines": 187
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typenames.py": {
        "functions": [
          "test_numpy_integers"
        ],
        "classes": [
          "TestTypeNames"
        ],
        "num_lines": 17
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_moved_modules.py": {
        "functions": [
          "tests_numba_types"
        ],
        "classes": [
          "TestMovedModule"
        ],
        "num_lines": 30
      },
      "/tmp/cs-hpc-demo-1/numba/tests/orphaned_semaphore_usecase.py": {
        "functions": [
          "w",
          "main"
        ],
        "classes": [],
        "num_lines": 24
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_mangling.py": {
        "functions": [
          "test_one_args",
          "test_two_args",
          "test_unicode_fname"
        ],
        "classes": [
          "TestMangling"
        ],
        "num_lines": 41
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_npdatetime.py": {
        "functions": [
          "value_unit",
          "add_usecase",
          "sub_usecase",
          "mul_usecase",
          "div_usecase",
          "floordiv_usecase",
          "eq_usecase",
          "ne_usecase",
          "lt_usecase",
          "le_usecase",
          "gt_usecase",
          "ge_usecase",
          "pos_usecase",
          "neg_usecase",
          "abs_usecase",
          "hash_usecase",
          "min_usecase",
          "max_usecase",
          "int_cast_usecase",
          "make_add_constant",
          "add_constant",
          "test_can_cast_timedelta",
          "test_timedelta_conversion",
          "test_datetime_timedelta_scaling",
          "test_combine_datetime_timedelta_units",
          "test_same_kind",
          "test_jit_explicit_signature",
          "test_vectorize_explicit_signature",
          "test_constant_datetime",
          "test_constant_timedelta",
          "jit",
          "test_add",
          "test_sub",
          "test_mul",
          "test_div",
          "test_homogeneous_div",
          "test_eq_ne",
          "test_lt_ge",
          "test_le_gt",
          "test_pos",
          "test_neg",
          "test_abs",
          "test_hash",
          "_test_min_max",
          "test_min",
          "test_max",
          "test_int_cast",
          "jit",
          "silence_numpy_warnings",
          "test_add_sub_timedelta",
          "datetime_samples",
          "test_datetime_difference",
          "test_comparisons",
          "_test_min_max",
          "test_min",
          "test_max",
          "test_datetime",
          "test_datetime_npm",
          "test_timedelta",
          "test_timedelta_npm",
          "test_div",
          "_test_td_add_or_sub",
          "test_add_td",
          "test_add_td_parallel",
          "test_sub_td",
          "test_sub_td_parallel",
          "_test_add_sub_td_no_match",
          "test_add_td_no_match",
          "test_sub_td_no_match",
          "_get_testcases",
          "_test_min_max",
          "test_min_func",
          "test_np_min_func",
          "test_min_method",
          "test_max_func",
          "test_np_max_func",
          "test_max_method",
          "test_min_func_parallel",
          "test_min_method_parallel",
          "test_max_func_parallel",
          "test_max_method_parallel",
          "test_searchsorted_datetime",
          "test_isinstance_datetime",
          "test_10y_issue_9585",
          "check_units_group",
          "check_units_group",
          "check_error",
          "_check_explicit_signature",
          "_check_explicit_signature",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check_eq",
          "check_lt",
          "check",
          "arr_div",
          "impl",
          "impl",
          "check",
          "is_complex",
          "is_datetime",
          "is_timedelta",
          "check",
          "f",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "TestModuleHelpers",
          "TestMiscCompiling",
          "TestTimedeltaArithmetic",
          "TestTimedeltaArithmeticNoPython",
          "TestDatetimeArithmetic",
          "TestDatetimeArithmeticNoPython",
          "TestMetadataScalingFactor",
          "TestDatetimeDeltaOps",
          "TestDatetimeArrayOps",
          "TestDatetimeTypeOps",
          "TestDatetimeIssues"
        ],
        "num_lines": 1225
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_fancy_indexing.py": {
        "functions": [
          "getitem_usecase",
          "setitem_usecase",
          "np_take",
          "np_take_kws",
          "generate_advanced_indices",
          "generate_basic_index_tuples",
          "generate_advanced_index_tuples",
          "generate_advanced_index_tuples_with_ellipsis",
          "check_getitem_indices",
          "test_getitem_tuple",
          "test_getitem_tuple_and_ellipsis",
          "test_ellipsis_getsetitem",
          "test_getitem_array",
          "check_setitem_indices",
          "test_setitem_tuple",
          "test_setitem_tuple_and_ellipsis",
          "test_setitem_array",
          "test_setitem_0d",
          "test_np_take",
          "test_np_take_axis",
          "test_np_take_axis_exception",
          "test_newaxis",
          "setUp",
          "generate_random_indices",
          "check_getitem_indices",
          "check_setitem_indices",
          "test_getitem",
          "test_setitem",
          "test_unsupported_condition_exceptions",
          "foo",
          "check",
          "np_new_axis_getitem",
          "np_new_axis_setitem",
          "numba_get_item",
          "set_item"
        ],
        "classes": [
          "TestFancyIndexing",
          "TestFancyIndexingMultiDim"
        ],
        "num_lines": 547
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_practical_lowering_issues.py": {
        "functions": [
          "issue7507_lround",
          "test_issue4156_loop_vars_leak",
          "test_issue4156_loop_vars_leak_variant1",
          "test_issue4156_loop_vars_leak_variant2",
          "test_issue4156_loop_vars_leak_variant3",
          "test_issue4156_loop_vars_leak_variant4",
          "test_issue_with_literal_in_static_getitem",
          "test_issue7507",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "foo",
          "foo",
          "__init__",
          "run_pass",
          "define_pipelines",
          "generic",
          "codegen"
        ],
        "classes": [
          "TestLowering",
          "ForceStaticGetitemLiteral",
          "CustomPipeline",
          "lroundTemplate"
        ],
        "num_lines": 212
      },
      "/tmp/cs-hpc-demo-1/numba/tests/support.py": {
        "functions": [
          "expected_failure_py311",
          "expected_failure_py312",
          "expected_failure_py313",
          "expected_failure_py314",
          "expected_failure_np2",
          "ignore_internal_warnings",
          "override_config",
          "override_env_config",
          "compile_function",
          "_create_trashcan_dir",
          "_purge_trashcan_dir",
          "_create_trashcan_subdir",
          "temp_directory",
          "import_dynamic",
          "captured_output",
          "captured_stdout",
          "captured_stderr",
          "capture_cache_log",
          "forbid_codegen",
          "redirect_fd",
          "redirect_c_stdout",
          "redirect_c_stderr",
          "run_in_new_process_caching",
          "run_in_new_process_in_cache_dir",
          "_remote_runner",
          "_format_jit_options",
          "create_temp_module",
          "run_in_subprocess",
          "strace",
          "strace_supported",
          "print_azure_matrix",
          "random",
          "reset_module_warnings",
          "assertTypingError",
          "assertRefCount",
          "assertRefCountEqual",
          "assertNoNRTLeak",
          "_detect_family",
          "_fix_dtype",
          "_fix_strides",
          "assertStridesEqual",
          "assertPreciseEqual",
          "_assertPreciseEqual",
          "subprocess_test_runner",
          "run_test_in_subprocess",
          "make_dummy_type",
          "skip_if_no_external_compiler",
          "setUp",
          "tearDown",
          "memory_leak_setup",
          "memory_leak_teardown",
          "assert_no_memory_leak",
          "disable_leak_check",
          "setUp",
          "tearDown",
          "fail",
          "check_warnings",
          "force_clone",
          "define_pipelines",
          "_assertNumberEqual",
          "wrapper",
          "typeof_dummy",
          "unbox_dummy",
          "check_return",
          "inner"
        ],
        "classes": [
          "TestCase",
          "SerialMixin",
          "EnableNRTStatsMixin",
          "MemoryLeak",
          "MemoryLeakMixin",
          "CheckWarningsMixin",
          "IRPreservingTestPipeline",
          "Dummy"
        ],
        "num_lines": 1327
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_print.py": {
        "functions": [
          "print_value",
          "print_array_item",
          "print_values",
          "print_empty",
          "print_string",
          "print_vararg",
          "print_string_vararg",
          "make_print_closure",
          "print_closure",
          "check_values",
          "test_print_values",
          "test_print_nrt_type",
          "test_print_array_item",
          "test_print_multiple_values",
          "test_print_nogil",
          "test_print_empty",
          "test_print_strings",
          "test_print_vararg",
          "test_inner_fn_print",
          "test_print_w_kwarg_raises",
          "test_print_no_truncation",
          "foo",
          "bar",
          "print_kwarg",
          "foo"
        ],
        "classes": [
          "TestPrint"
        ],
        "num_lines": 189
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors_passes.py": {
        "functions": [
          "__init__",
          "_run_parfor",
          "run_parfor_sub_pass",
          "run_parfor_pre_pass",
          "_run_parallel",
          "run_parallel",
          "run_parallel_check_output_array",
          "check_records",
          "test_setitem_full_slice",
          "test_setitem_slice_stop_bound",
          "test_setitem_slice_start_bound",
          "test_setitem_gather_if_scalar",
          "test_setitem_gather_if_array",
          "check_numpy_allocators",
          "check_numpy_random",
          "test_numpy_allocators",
          "test_numpy_random",
          "test_numpy_arrayexpr",
          "test_numpy_arrayexpr_ufunc",
          "test_numpy_arrayexpr_boardcast",
          "test_numpy_arrayexpr_reshaped",
          "test_reduce_max_basic",
          "test_reduce_max_masked",
          "test_prange_reduce_simple",
          "test_prange_map_simple",
          "test_prange_two_args",
          "test_prange_three_args",
          "test_prange_map_inner_loop",
          "test_prange_map_nested_prange",
          "test_prange_map_none_index",
          "test_prange_map_overwrite_index",
          "test_init_prange",
          "test_pndindex",
          "test_numpy_sum",
          "test_numpy_sum_bool_array_masked",
          "test_numpy_sum_int_array_masked",
          "test_numpy_fill_method",
          "test_dtype_conversion",
          "test_sum_replacement",
          "test_replacement_map",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "__init__",
          "run",
          "test_impl",
          "test_impl",
          "test_impl"
        ],
        "classes": [
          "MyPipeline",
          "BaseTest",
          "TestConvertSetItemPass",
          "TestConvertNumpyPass",
          "TestConvertReducePass",
          "TestConvertLoopPass",
          "TestPreParforPass",
          "sub_pass_class"
        ],
        "num_lines": 676
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ssa.py": {
        "functions": [
          "check_func",
          "test_argument_name_reused",
          "test_if_else_redefine",
          "test_sum_loop",
          "test_sum_loop_2vars",
          "test_sum_2d_loop",
          "check_undefined_var",
          "test_undefined_var",
          "test_phi_propagation",
          "test_unhandled_undefined",
          "test_issue2194",
          "test_issue3094",
          "test_issue3931",
          "test_issue3976",
          "test_issue3979",
          "test_issue5219",
          "test_issue5223",
          "test_issue5243",
          "test_issue5482_missing_variable_init",
          "test_issue5482_objmode_expr_null_lowering",
          "test_issue5493_unneeded_phi",
          "test_issue5623_equal_statements_in_same_bb",
          "test_issue5678_non_minimal_phi",
          "test_issue9242_use_not_dom_def",
          "test_issue7258_multiple_assignment_post_SSA",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "function1",
          "foo",
          "doit",
          "foo",
          "foo",
          "overload_this",
          "foo",
          "ol",
          "foo",
          "overload_this",
          "ol",
          "test_tuple",
          "bar",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "while_for",
          "check",
          "py_func",
          "udt",
          "impl",
          "define_pipelines",
          "__init__",
          "run_pass",
          "define_pipelines",
          "__init__",
          "run_pass",
          "define_pipelines",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "SSABaseTest",
          "TestSSA",
          "TestReportedSSAIssues",
          "TestSROAIssues",
          "CustomPipeline",
          "CheckSSAMinimal",
          "CustomPipeline",
          "SSACheck",
          "SSACheckPipeline",
          "CloneFoobarAssignments",
          "CustomCompiler"
        ],
        "num_lines": 631
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_debug.py": {
        "functions": [
          "simple_nopython",
          "simple_gen",
          "simple_class_user",
          "unsupported_parfor",
          "supported_parfor",
          "unsupported_prange",
          "__init__",
          "assert_fails",
          "check_debug_output",
          "_check_dump_bytecode",
          "_check_dump_cfg",
          "_check_dump_ir",
          "_check_dump_typeinfer",
          "_check_dump_llvm",
          "_check_dump_func_opt_llvm",
          "_check_dump_optimized_llvm",
          "_check_dump_assembly",
          "compile_simple_nopython",
          "test_dump_bytecode",
          "test_dump_ir",
          "test_dump_cfg",
          "test_dump_llvm",
          "test_dump_func_opt_llvm",
          "test_dump_optimized_llvm",
          "test_dump_assembly",
          "compile_simple_gen",
          "test_dump_ir_generator",
          "test_jit",
          "test_jitclass",
          "test_debug",
          "check_parfors_warning",
          "check_parfors_unsupported_prange_warning",
          "test_warns",
          "test_unsupported_prange_warns",
          "test_array_debug_opt_stats"
        ],
        "classes": [
          "SimpleClass",
          "DebugTestBase",
          "FunctionDebugTestBase",
          "TestFunctionDebugOutput",
          "TestGeneratorDebugOutput",
          "TestDisableJIT",
          "TestEnvironmentOverride",
          "TestParforsDebug"
        ],
        "num_lines": 340
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_interproc.py": {
        "functions": [
          "foo",
          "bar",
          "inner",
          "outer",
          "test_bar_call_foo",
          "test_bar_call_foo_compiled_twice",
          "test_callsite_compilation"
        ],
        "classes": [
          "TestInterProc"
        ],
        "num_lines": 47
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_target_extension.py": {
        "functions": [
          "constant_dummy",
          "literal_int_to_number",
          "const_int",
          "const_float",
          "intrin_add",
          "ol_add",
          "_customize_tm_options",
          "_customize_tm_features",
          "_add_module",
          "set_env",
          "create_module",
          "init",
          "refresh",
          "target_data",
          "codegen",
          "call_conv",
          "get_env_body",
          "get_env_manager",
          "get_generator_state",
          "post_lowering",
          "create_cpython_wrapper",
          "create_cfunc_wrapper",
          "get_executable",
          "_toplevel_target_context",
          "_toplevel_typing_context",
          "target_context",
          "typing_context",
          "compile",
          "__init__",
          "__call__",
          "get_dispatcher",
          "dispatcher_wrapper",
          "codegen",
          "test_0_dpu_registry",
          "test_specialise_gpu",
          "test_specialise_dpu",
          "test_no_specialisation_found",
          "test_invalid_target_jit",
          "test_invalid_target_overload",
          "test_intrinsic_selection",
          "test_overload_allocation",
          "test_overload_attribute_target",
          "test_basic_offload",
          "impl",
          "my_func",
          "ol_my_func1",
          "ol_my_func2",
          "dpu_foo",
          "cpu_foo",
          "my_func",
          "ol_my_func1",
          "ol_my_func2",
          "ol_my_func3",
          "dpu_foo",
          "cpu_foo",
          "my_func",
          "ol_my_func_cuda",
          "dpu_foo",
          "bar",
          "intrin_math_generic",
          "intrin_math_dpu",
          "intrin_math_cpu",
          "cpu_foo_specific",
          "cpu_foo_generic",
          "cpu_foo_dpu",
          "dpu_foo_specific",
          "dpu_foo_generic",
          "dpu_foo_cpu",
          "cast_integer",
          "intrin_alloc",
          "_ol_arr_allocate_dpu",
          "ol_empty_impl",
          "buffer_func",
          "ol_buffer_func_impl",
          "ov_dummy_dpu_attr",
          "cuda_target_attr_use",
          "ol_np_sin_DPU",
          "foo",
          "foo",
          "foo",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "foo",
          "ol_bar",
          "foo",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "impl",
          "impl",
          "impl",
          "foo",
          "imp",
          "illegal_target_attr_use",
          "dpu_sin_impl",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "DPU",
          "JITDPUCodegen",
          "DPUContext",
          "DPUTarget",
          "DPUDispatcher",
          "djit",
          "TestTargetHierarchySelection",
          "TestTargetOffload",
          "DispatcherSwitcher",
          "DPUOffloadCompiler"
        ],
        "num_lines": 851
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeconv.py": {
        "functions": [
          "check_number_compatibility",
          "test_typeconv",
          "test_default_rules",
          "test_overload1",
          "test_overload2",
          "test_overload3",
          "test_overload4",
          "test_type_casting_rules",
          "test_castgraph_propagate",
          "base_test",
          "callback"
        ],
        "classes": [
          "CompatibilityTestMixin",
          "TestTypeConv"
        ],
        "num_lines": 295
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_np_functions.py": {
        "functions": [
          "sinc",
          "angle1",
          "angle2",
          "array_equal",
          "intersect1d_2",
          "intersect1d_3",
          "append",
          "count_nonzero",
          "delete",
          "diff1",
          "diff2",
          "bincount1",
          "bincount2",
          "bincount3",
          "searchsorted",
          "searchsorted_left",
          "searchsorted_right",
          "digitize",
          "histogram",
          "machar",
          "iscomplex",
          "iscomplexobj",
          "isscalar",
          "isreal",
          "isrealobj",
          "isneginf",
          "isposinf",
          "isclose",
          "isnat",
          "iinfo",
          "finfo",
          "finfo_machar",
          "fliplr",
          "flipud",
          "flip",
          "logspace2",
          "logspace3",
          "geomspace2",
          "geomspace3",
          "rot90",
          "rot90_k",
          "array_split",
          "split",
          "vsplit",
          "hsplit",
          "dsplit",
          "correlate",
          "convolve",
          "tri_n",
          "tri_n_m",
          "tri_n_k",
          "tri_n_m_k",
          "tril_m",
          "tril_m_k",
          "tril_indices_n",
          "tril_indices_n_k",
          "tril_indices_n_m",
          "tril_indices_n_k_m",
          "tril_indices_from_arr",
          "tril_indices_from_arr_k",
          "triu_m",
          "triu_m_k",
          "triu_indices_n",
          "triu_indices_n_k",
          "triu_indices_n_m",
          "triu_indices_n_k_m",
          "triu_indices_from_arr",
          "triu_indices_from_arr_k",
          "vander",
          "partition",
          "argpartition",
          "cov",
          "corrcoef",
          "ediff1d",
          "roll",
          "asarray",
          "asarray_kws",
          "asfarray",
          "asfarray_default_kwarg",
          "extract",
          "np_trapz",
          "np_trapz_x",
          "np_trapz_dx",
          "np_trapz_x_dx",
          "np_trapezoid",
          "np_trapezoid_x",
          "np_trapezoid_dx",
          "np_trapezoid_x_dx",
          "np_allclose",
          "np_average",
          "interp",
          "np_repeat",
          "array_repeat",
          "np_select",
          "np_select_defaults",
          "np_bartlett",
          "np_blackman",
          "np_hamming",
          "np_hanning",
          "np_kaiser",
          "np_cross",
          "np_trim_zeros",
          "nb_cross2d",
          "flip_lr",
          "flip_ud",
          "np_union1d",
          "np_asarray_chkfinite",
          "unwrap",
          "unwrap1",
          "unwrap13",
          "unwrap123",
          "array_contains",
          "swapaxes",
          "nan_to_num",
          "np_indices",
          "diagflat1",
          "diagflat2",
          "np_setxor1d_2",
          "np_setxor1d_3",
          "np_setdiff1d_2",
          "np_setdiff1d_3",
          "np_in1d_2",
          "np_in1d_3a",
          "np_in1d_3b",
          "np_in1d_4",
          "np_isin_2",
          "np_isin_3a",
          "np_isin_3b",
          "np_isin_4",
          "setUp",
          "run_unary",
          "test_sinc",
          "test_sinc_exceptions",
          "test_contains",
          "test_angle",
          "test_angle_return_type",
          "test_angle_exceptions",
          "test_array_equal",
          "test_array_equal_exception",
          "test_intersect1d_2",
          "test_intersect1d_3",
          "test_intersect1d_errors",
          "test_count_nonzero",
          "test_np_append",
          "test_np_append_exceptions",
          "test_delete",
          "test_delete_exceptions",
          "diff_arrays",
          "test_diff1",
          "test_diff2",
          "test_diff2_exceptions",
          "test_isscalar",
          "test_isobj_functions",
          "test_is_real_or_complex",
          "test_isneg_or_ispos_inf",
          "test_isclose",
          "isclose_exception",
          "bincount_sequences",
          "test_bincount1",
          "test_bincount1_exceptions",
          "test_bincount2",
          "test_bincount2_exceptions",
          "test_bincount3",
          "test_bincount3_exceptions",
          "test_searchsorted",
          "test_searchsorted_supplemental",
          "test_searchsorted_complex",
          "test_digitize",
          "test_digitize_non_monotonic_bins",
          "test_digitize_supplemental",
          "test_digitize_raise_if_x_complex",
          "test_histogram",
          "_test_correlate_convolve",
          "test_correlate",
          "_test_correlate_convolve_exceptions",
          "test_correlate_exceptions",
          "test_convolve",
          "test_convolve_exceptions",
          "_check_output",
          "test_vander_basic",
          "test_vander_exceptions",
          "test_tri_n_basic",
          "test_tri_n_m_basic",
          "test_tri_n_k_basic",
          "test_tri_n_m_k_basic",
          "test_tri_exceptions",
          "_triangular_matrix_tests_m",
          "_triangular_matrix_tests_m_k",
          "_triangular_matrix_tests_inner",
          "_triangular_matrix_exceptions",
          "_triangular_indices_tests_base",
          "_triangular_indices_tests_n",
          "_triangular_indices_tests_n_k",
          "_triangular_indices_tests_n_m",
          "_triangular_indices_tests_n_k_m",
          "_triangular_indices_from_tests_arr",
          "_triangular_indices_from_tests_arr_k",
          "_triangular_indices_exceptions",
          "_triangular_indices_from_exceptions",
          "test_tril_basic",
          "test_tril_exceptions",
          "test_tril_indices",
          "test_tril_indices_from",
          "test_triu_basic",
          "test_triu_exceptions",
          "test_triu_indices",
          "test_triu_indices_from",
          "test_indices_basic",
          "test_indices_exception",
          "partition_sanity_check",
          "argpartition_sanity_check",
          "test_partition_fuzz",
          "test_argpartition_fuzz",
          "test_partition_exception_out_of_range",
          "test_argpartition_exception_out_of_range",
          "test_partition_exception_non_integer_kth",
          "test_argpartition_exception_non_integer_kth",
          "test_partition_exception_a_not_array_like",
          "test_argpartition_exception_a_not_array_like",
          "test_partition_exception_a_zero_dim",
          "test_argpartition_exception_a_zero_dim",
          "test_partition_exception_kth_multi_dimensional",
          "test_argpartition_exception_kth_multi_dimensional",
          "test_partition_empty_array",
          "test_argpartition_empty_array",
          "test_partition_basic",
          "test_argpartition_basic",
          "assert_partitioned",
          "assert_argpartitioned",
          "test_partition_iterative",
          "test_argpartition_iterative",
          "test_partition_multi_dim",
          "test_argpartition_multi_dim",
          "test_partition_boolean_inputs",
          "test_argpartition_boolean_inputs",
          "test_cov_invalid_ddof",
          "corr_corrcoef_basic",
          "test_corrcoef_basic",
          "test_cov_basic",
          "test_cov_explicit_arguments",
          "test_corrcoef_explicit_arguments",
          "cov_corrcoef_edge_cases",
          "test_corrcoef_edge_cases",
          "test_corrcoef_edge_case_extreme_values",
          "test_cov_edge_cases",
          "test_cov_exceptions",
          "test_ediff1d_basic",
          "test_ediff1d_exceptions",
          "test_fliplr_basic",
          "test_fliplr_exception",
          "test_flipud_basic",
          "test_flipud_exception",
          "test_flip_basic",
          "test_logspace2_basic",
          "test_logspace2_exception",
          "test_logspace3_basic",
          "test_logspace3_with_num_basic",
          "test_logspace3_exception",
          "test_geomspace2_basic",
          "test_geomspace2_exception",
          "test_geomspace3_basic",
          "test_geomspace3_exception",
          "test_geomspace_numpy",
          "test_rot90_basic",
          "test_rot90_with_k_basic",
          "test_rot90_exception",
          "_check_split",
          "_check_array_split",
          "test_array_split_basic",
          "test_split_basic",
          "test_vhdsplit_basic",
          "test_vhdsplit_exception",
          "test_roll_basic",
          "test_roll_exceptions",
          "test_extract_basic",
          "test_extract_exceptions",
          "test_np_trapezoid_basic",
          "test_np_trapz_basic",
          "test_np_trapezoid_x_basic",
          "test_np_trapz_x_basic",
          "test_trapezoid_numpy_questionable",
          "test_trapz_numpy_questionable",
          "test_np_trapezoid_dx_basic",
          "test_np_trapz_dx_basic",
          "test_np_trapezoid_x_dx_basic",
          "test_np_trapz_x_dx_basic",
          "test_np_trapezoid_x_dx_exceptions",
          "test_np_trapz_x_dx_exceptions",
          "test_average",
          "test_allclose",
          "test_ip_allclose_numpy",
          "test_ip_not_allclose_numpy",
          "test_return_class_is_ndarray_numpy",
          "test_equalnan_numpy",
          "test_no_parameter_modification_numpy",
          "test_min_int_numpy",
          "test_allclose_exception",
          "test_interp_basic",
          "_make_some_values_non_finite",
          "arrays",
          "test_interp_stress_tests",
          "test_interp_complex_stress_tests",
          "test_interp_exceptions",
          "test_interp_non_finite_calibration",
          "test_interp_supplemental_tests",
          "test_interp_supplemental_complex_tests",
          "test_interp_float_precision_handled_per_numpy",
          "test_isnat",
          "test_asarray",
          "test_asarray_literal",
          "test_asarray_rejects_List_with_illegal_dtype",
          "test_asfarray",
          "test_repeat",
          "test_repeat_exception",
          "test_select",
          "test_select_exception",
          "test_windowing",
          "test_cross",
          "test_cross_exceptions",
          "test_cross2d",
          "test_cross2d_exceptions",
          "test_trim_zeros",
          "test_trim_zeros_numpy",
          "test_trim_zeros_exceptions",
          "test_union1d",
          "test_union1d_exceptions",
          "test_asarray_chkfinite",
          "test_asarray_chkfinite_exceptions",
          "test_unwrap_basic",
          "test_unwrap_exception",
          "test_swapaxes_basic",
          "test_swapaxes_exception",
          "test_take_along_axis",
          "test_take_along_axis_broadcasting",
          "test_take_along_axis_exceptions",
          "test_nan_to_num",
          "test_nan_to_num_copy_false",
          "test_nan_to_num_invalid_argument",
          "test_diagflat_basic",
          "test_diagflat1_exception",
          "test_diagflat2_exception",
          "_setxor_arrays",
          "test_setxor1d_2",
          "test_setxor1d_3",
          "test_setxor1d_errors",
          "_setdiff_arrays",
          "test_setdiff1d_2",
          "test_setdiff1d_3",
          "test_setdiff1d_errors",
          "_in1d_arrays",
          "test_in1d_2",
          "test_in1d_3a",
          "test_in1d_3b",
          "test_in1d_4",
          "test_in1d_errors",
          "_isin_arrays",
          "_isin_arrays_reduced",
          "_isin_arrays_full",
          "test_isin_2",
          "test_isin_3a",
          "test_isin_3b",
          "test_isin_4",
          "test_isin_errors",
          "test_setops_manyways",
          "check",
          "create_harcoded_variant",
          "test_MachAr",
          "test_finfo",
          "test_iinfo",
          "test_np_MachAr_deprecation_np122",
          "test_unsafe_import_in_registry",
          "check",
          "arrs",
          "check",
          "numba_angle",
          "arrays",
          "arrays",
          "arrays",
          "arrays",
          "arrays",
          "arrays",
          "values",
          "values",
          "optional_fn",
          "values",
          "values",
          "values",
          "check",
          "bad_side",
          "nonconst_side",
          "check",
          "check",
          "check",
          "check_error",
          "check",
          "check",
          "check_values",
          "check",
          "_check",
          "_check_n",
          "_check_1d",
          "n_variations",
          "n_variations",
          "m_variations",
          "n_variations",
          "k_variations",
          "n_variations",
          "m_variations",
          "k_variations",
          "_check",
          "_check",
          "_check",
          "check_odd",
          "check_even",
          "inputs",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "_check",
          "check",
          "check",
          "check",
          "a_variations",
          "check",
          "a_variations",
          "input_variations",
          "_check_m",
          "_check_y",
          "to_variations",
          "ary_variations",
          "a_variations",
          "a_variations",
          "a_variations",
          "inputs",
          "inputs",
          "inputs",
          "inputs",
          "inputs",
          "a_variations",
          "a_variations",
          "args_variations",
          "args_variations",
          "inputs1D",
          "inputs2D",
          "inputs3D",
          "a_variations",
          "shift_variations",
          "_check",
          "check_not_ok",
          "test_weights_zero_sum",
          "test_1D_weights",
          "test_1D_weights_axis",
          "test_axis",
          "values",
          "input_variations",
          "check_pass_through",
          "case1",
          "case2",
          "case3",
          "case4",
          "test_reject",
          "make_none_typed_list",
          "make_nested_list",
          "make_nested_list_with_dict",
          "make_unicode_list",
          "inputs",
          "check_window",
          "arrays",
          "explicit_trim",
          "inputs1",
          "inputs13",
          "inputs123",
          "a_variations",
          "axis_none",
          "gen",
          "gen",
          "gen",
          "not_literal_axis",
          "inputs",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "np_in1d_kind",
          "check",
          "check",
          "check",
          "check",
          "np_isin_kind",
          "__new__",
          "make_list",
          "check",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "TestNPFunctions",
          "TestNPMachineParameters",
          "TestRegistryImports",
          "Foo"
        ],
        "num_lines": 7111
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typedobjectutils.py": {
        "functions": [
          "test_sentry_safe_cast_warnings",
          "test_sentry_safe_cast_no_warn"
        ],
        "classes": [
          "TestTypedObjectUtils"
        ],
        "num_lines": 68
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_tracing.py": {
        "functions": [
          "test",
          "__init__",
          "__enter__",
          "__exit__",
          "getvalue",
          "class_method",
          "static_method",
          "_test_get",
          "_test_set",
          "method",
          "__repr__",
          "class_method",
          "static_method",
          "test",
          "test",
          "method",
          "__str__",
          "__repr__",
          "__init__",
          "setUp",
          "tearDown",
          "test_method",
          "test_class_method",
          "test_static_method",
          "test_property",
          "test_function",
          "test_injected"
        ],
        "classes": [
          "CapturedTrace",
          "Class",
          "Class2",
          "TestTracing"
        ],
        "num_lines": 182
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir_inlining.py": {
        "functions": [
          "_global_func",
          "_global_defn",
          "_global_overload",
          "_gen_involved",
          "sentinel_17_cost_model",
          "check",
          "foo",
          "test_basic_inline_never",
          "test_basic_inline_always",
          "test_basic_inline_combos",
          "test_recursive_inline",
          "test_freevar_bindings",
          "test_global_binding",
          "test_inline_from_another_module",
          "test_inline_from_another_module_w_getattr",
          "test_inline_from_another_module_w_2_getattr",
          "test_inline_from_another_module_as_freevar",
          "test_inline_w_freevar_from_another_module",
          "test_inlining_models",
          "test_inline_inside_loop",
          "test_inline_inside_closure_inside_loop",
          "test_inline_closure_inside_inlinable_inside_closure",
          "test_inline_involved",
          "test_inline_renaming_scheme",
          "test_register_jitable_inlines",
          "test_basic_inline_never",
          "test_basic_inline_always",
          "test_inline_always_kw_no_default",
          "test_inline_operators_unary",
          "test_inline_operators_binop",
          "test_inline_operators_inplace_binop",
          "test_inline_always_operators_getitem",
          "test_inline_never_operators_getitem",
          "test_inline_stararg_error",
          "test_basic_inline_combos",
          "test_freevar_bindings",
          "test_global_overload_binding",
          "test_inline_from_another_module",
          "test_inline_from_another_module_w_getattr",
          "test_inline_from_another_module_w_2_getattr",
          "test_inline_from_another_module_as_freevar",
          "test_inline_w_freevar_from_another_module",
          "test_inlining_models",
          "test_multiple_overloads_with_different_inline_characteristics",
          "test_overload_inline_always_with_literally_in_inlinee",
          "test_inline_always_ssa",
          "test_inline_always_ssa_scope_validity",
          "setUp",
          "check_method",
          "check_getattr",
          "test_overload_method_default_args_always",
          "make_overload_method_test",
          "test_overload_method_cost_driven_always",
          "test_overload_method_cost_driven_never",
          "test_overload_method_cost_driven_must_inline",
          "test_overload_method_cost_driven_no_inline",
          "make_overload_attribute_test",
          "test_overload_attribute_always",
          "test_overload_attribute_never",
          "test_overload_attribute_costmodel_must_inline",
          "test_overload_attribute_costmodel_no_inline",
          "test_with_inlined_and_noninlined_variants",
          "test_with_kwargs",
          "test_with_kwargs2",
          "test_inlining_optional_constant",
          "test_basic",
          "test_issue4691",
          "test_issue4693",
          "test_issue5476",
          "test_issue5792",
          "test_issue5824",
          "test_issue7380",
          "foo",
          "impl",
          "foo",
          "impl",
          "impl",
          "foo",
          "impl",
          "factory",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "factory",
          "impl",
          "gen",
          "s17_caller_model",
          "s17_callee_model",
          "foo",
          "impl",
          "foo",
          "impl",
          "foo",
          "impl",
          "boz",
          "foo",
          "impl",
          "bar",
          "foo",
          "foo",
          "impl",
          "foo",
          "foo_overload",
          "impl",
          "foo",
          "foo_overload",
          "impl",
          "foo",
          "overload_foo",
          "impl",
          "impl_inline",
          "impl_noinline",
          "overload_dummy_neg",
          "overload_dummy_pos",
          "impl_inline",
          "impl_noinline",
          "overload_dummy_eq",
          "overload_dummy_ne",
          "impl_inline",
          "impl_noinline",
          "overload_dummy_iadd",
          "overload_dummy_isub",
          "overload_dummy_add",
          "overload_dummy_sub",
          "impl",
          "impl_static_getitem",
          "overload_dummy_getitem",
          "impl",
          "impl_static_getitem",
          "overload_dummy_getitem",
          "foo",
          "overload_foo",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "factory",
          "impl",
          "gen",
          "s17_caller_model",
          "s17_callee_model",
          "bar",
          "bar_int_ol",
          "bar_float_ol",
          "always_inline_cost_model",
          "bar_complex_ol",
          "impl",
          "foo_ovld",
          "foo",
          "test_impl",
          "foo",
          "foo",
          "foo_overload",
          "impl",
          "bar",
          "bar_impl",
          "foo",
          "_get_inlined_method",
          "foo",
          "costmodel",
          "_get_inlined_method",
          "foo",
          "_get_inlineme",
          "foo",
          "overload_len",
          "impl",
          "foo",
          "overload_foo",
          "impl",
          "bar",
          "impl",
          "bar",
          "impl",
          "cost_model",
          "output_factory",
          "ol_output_factory",
          "fn",
          "fn2",
          "inlining",
          "fn",
          "inlining",
          "fn",
          "init_dummy",
          "dummy_overload",
          "div_overload",
          "test_impl",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "foo",
          "foo_bad",
          "foo",
          "bar",
          "baz",
          "func",
          "tmp",
          "impl",
          "foo",
          "impl",
          "bar",
          "impl",
          "baz",
          "bar",
          "biz",
          "bar",
          "foo_impl",
          "impl",
          "foo",
          "bar",
          "baz",
          "foo_overload",
          "bar_overload",
          "baz_overload",
          "foo",
          "bar",
          "baz",
          "factory",
          "tmp",
          "impl",
          "foo",
          "foo_ol",
          "impl",
          "bar",
          "bar_ol",
          "impl",
          "impl",
          "get",
          "get",
          "get",
          "impl",
          "__init__",
          "div",
          "__init__",
          "__init__",
          "codegen",
          "ctor",
          "impl",
          "define_pipelines",
          "bar",
          "baz",
          "impl",
          "impl",
          "impl",
          "func",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "foo_noop",
          "foo_as_str_impl",
          "foo_as_num_impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "InliningBase",
          "TestFunctionInlining",
          "TestRegisterJitableInlining",
          "TestOverloadInlining",
          "TestOverloadMethsAttrsInlining",
          "TestGeneralInlining",
          "TestInlineOptions",
          "TestInlineMiscIssues",
          "Dummy",
          "DummyType",
          "DummyTypeModel",
          "CustomCompiler"
        ],
        "num_lines": 1524
      },
      "/tmp/cs-hpc-demo-1/numba/tests/usecases.py": {
        "functions": [
          "sum1d",
          "sum2d",
          "while_count",
          "copy_arrays",
          "copy_arrays2d",
          "redefine1",
          "andor",
          "string_concat",
          "string_len",
          "string_slicing",
          "string_conversion",
          "string_comparison",
          "blackscholes_cnd"
        ],
        "classes": [],
        "num_lines": 93
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_vectorization_type_inference.py": {
        "functions": [
          "add",
          "func",
          "test_type_inference",
          "numba_type_equal"
        ],
        "classes": [
          "TestVectTypeInfer"
        ],
        "num_lines": 41
      },
      "/tmp/cs-hpc-demo-1/numba/tests/matmul_usecase.py": {
        "functions": [
          "matmul_usecase",
          "imatmul_usecase",
          "__init__",
          "__matmul__",
          "__imatmul__"
        ],
        "classes": [
          "DumbMatrix"
        ],
        "num_lines": 24
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_make_function_to_jit_function.py": {
        "functions": [
          "consumer",
          "consumer2arg",
          "test_escape",
          "test_nested_escape",
          "test_closure_in_escaper",
          "test_close_over_consts",
          "test_close_over_consts_w_args",
          "test_with_overload",
          "test_basic_apply_like_case",
          "test_jit_option_inheritance",
          "test_multiply_defined_freevar",
          "test_non_const_in_escapee",
          "test_escape_with_kwargs",
          "test_escape_with_kwargs_override_kwargs",
          "impl_factory",
          "impl_factory",
          "impl_factory",
          "impl_factory",
          "impl_factory",
          "foo",
          "foo_ol",
          "impl_factory",
          "apply",
          "ov_apply",
          "impl",
          "impl_factory",
          "impl",
          "impl",
          "impl_factory",
          "specialised_consumer",
          "impl_factory",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "mul10",
          "impl",
          "inner",
          "impl",
          "impl",
          "inner",
          "inner",
          "innerinner",
          "callinner",
          "callinner",
          "callinner",
          "impl",
          "callinner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "impl"
        ],
        "classes": [
          "TestMakeFunctionToJITFunction"
        ],
        "num_lines": 284
      },
      "/tmp/cs-hpc-demo-1/numba/tests/complex_usecases.py": {
        "functions": [
          "div_usecase",
          "real_usecase",
          "imag_usecase",
          "conjugate_usecase",
          "acos_usecase",
          "cos_usecase",
          "asin_usecase",
          "sin_usecase",
          "atan_usecase",
          "tan_usecase",
          "acosh_usecase",
          "cosh_usecase",
          "asinh_usecase",
          "sinh_usecase",
          "atanh_usecase",
          "tanh_usecase",
          "exp_usecase",
          "isfinite_usecase",
          "isinf_usecase",
          "isnan_usecase",
          "log_usecase",
          "log_base_usecase",
          "log10_usecase",
          "phase_usecase",
          "polar_usecase",
          "polar_as_complex_usecase",
          "rect_usecase",
          "sqrt_usecase"
        ],
        "classes": [],
        "num_lines": 93
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_exprs.py": {
        "functions": [
          "axy",
          "ax2",
          "pos_root",
          "neg_root_common_subexpr",
          "neg_root_complex_subexpr",
          "call_stuff",
          "are_roots_imaginary",
          "div_add",
          "cube",
          "explicit_output",
          "variable_name_reuse",
          "distance_matrix",
          "__getattr__",
          "mk_pipeline",
          "mk_no_rw_pipeline",
          "_compile_function",
          "test_simple_expr",
          "_get_array_exprs",
          "_array_expr_to_set",
          "_test_root_function",
          "_test_cube_function",
          "_test_explicit_output_function",
          "_assert_array_exprs",
          "_assert_total_rewrite",
          "_assert_no_rewrite",
          "test_trivial_expr",
          "test_complicated_expr",
          "test_common_subexpressions",
          "test_complex_subexpression",
          "test_ufunc_and_dufunc_calls",
          "test_cmp_op",
          "test_explicit_output",
          "test_issue_1184",
          "test_issue_1264",
          "test_issue_1372",
          "test_unary_arrayexpr",
          "test_bitwise_arrayexpr",
          "test_annotations",
          "test_issue_5599_name_collision",
          "test_division_by_zero",
          "test_optional_scalar_type",
          "test_optional_array_type",
          "test_optional_scalar_type_exception_on_none",
          "test_optional_array_type_exception_on_none",
          "make_foo_type",
          "test_external_type",
          "run_func",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "f",
          "arr_expr",
          "do_call",
          "arr_expr",
          "do_call",
          "arr_expr",
          "do_call",
          "arr_expr",
          "do_call",
          "type_foo",
          "impl_foo",
          "typeof_foo",
          "__init__",
          "__init__",
          "typer",
          "overload_foo_add",
          "overload_foo_add",
          "overload_foo_neg",
          "arr_expr_sum1",
          "arr_expr_sum2",
          "arr_expr_neg",
          "imp",
          "imp",
          "imp"
        ],
        "classes": [
          "Namespace",
          "RewritesTester",
          "TestArrayExpressions",
          "TestRewriteIssues",
          "TestSemantics",
          "TestOptionals",
          "TestOptionalsExceptions",
          "TestExternalTypes",
          "Foo",
          "FooModel"
        ],
        "num_lines": 746
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_python_int.py": {
        "functions": [
          "return_int",
          "test_int_return_type",
          "test_int_return_type_npm",
          "test_unsigned_int_return_type",
          "test_unsigned_int_return_type_npm",
          "test_long_int_return_type",
          "test_long_int_return_type_npm",
          "test_longer_int_return_type"
        ],
        "classes": [
          "TestPythonInt"
        ],
        "num_lines": 51
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_jitclasses.py": {
        "functions": [
          "_get_meminfo",
          "__init__",
          "__init__",
          "_check_spec",
          "test_ordereddict_spec",
          "test_list_spec",
          "test_type_annotations",
          "test_type_annotation_inheritance",
          "test_spec_errors",
          "test_init_errors",
          "_make_Float2AndArray",
          "_make_Vector2",
          "test_jit_class_1",
          "test_jitclass_usage_from_python",
          "test_jitclass_datalayout",
          "test_deferred_type",
          "test_c_structure",
          "test_is",
          "test_isinstance",
          "test_subclassing",
          "test_base_class",
          "test_globals",
          "test_user_getter_setter",
          "test_user_deleter_error",
          "test_name_shadowing_error",
          "test_distinct_classes",
          "test_parameterized",
          "test_protected_attrs",
          "test_annotations",
          "test_docstring",
          "test_kwargs",
          "test_default_args",
          "test_default_args_keyonly",
          "test_default_args_starargs_and_keyonly",
          "test_generator_method",
          "test_getitem",
          "test_getitem_unbox",
          "test_getitem_complex_key",
          "test_getitem_tuple_key",
          "test_getitem_slice_key",
          "test_jitclass_longlabel_not_truncated",
          "test_pickling",
          "test_static_methods",
          "test_jitclass_decorator_usecases",
          "test_jitclass_function_usecases",
          "test_jitclass_isinstance",
          "test_jitclass_unsupported_dunder",
          "test_modulename",
          "get_int_wrapper",
          "get_float_wrapper",
          "assertSame",
          "test_overloads",
          "test_bool_fallback",
          "test_numeric_fallback",
          "test_arithmetic_logical",
          "test_arithmetic_logical_inplace",
          "test_hash_eq_ne",
          "test_bool_fallback_len",
          "test_bool_fallback_default",
          "test_operator_reflection",
          "test_matmul_operator",
          "test_arithmetic_logical_reflection",
          "test_implicit_hash_compiles",
          "test_invert_operator",
          "bar",
          "foo",
          "identity",
          "retrieve_attributes",
          "get_data",
          "do_is",
          "bar",
          "create_my_class",
          "access_dunder",
          "expected_gen",
          "create_and_set_indices",
          "get_index",
          "set2return1",
          "get_key",
          "set_key",
          "get11",
          "set22",
          "get5",
          "set26",
          "test_jitclass_isinstance",
          "__init__",
          "append",
          "clear",
          "__abs__",
          "__bool__",
          "__complex__",
          "__contains__",
          "__float__",
          "__int__",
          "__len__",
          "__str__",
          "py_b",
          "py_c",
          "py_f",
          "py_i",
          "unwrap",
          "get_update_func",
          "py_hash",
          "py_eq",
          "py_ne",
          "identity_decorator",
          "do_invert",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "add",
          "__init__",
          "__init__",
          "__init__",
          "get_next_data",
          "append_to_tail",
          "__init__",
          "what",
          "__init__",
          "__init__",
          "__init__",
          "value",
          "value",
          "__init__",
          "value",
          "value",
          "__init__",
          "my_property",
          "my_method",
          "__init__",
          "run",
          "__init__",
          "run",
          "__init__",
          "__init__",
          "private_value",
          "_inner_value",
          "_inner_value",
          "__private_value",
          "__private_value",
          "swap_private_value",
          "_protected_method",
          "__private_method",
          "check_private_method",
          "__init__",
          "foo",
          "aval",
          "__init__",
          "__init__",
          "__init__",
          "gen",
          "__init__",
          "__setitem__",
          "__getitem__",
          "__init__",
          "__setitem__",
          "__getitem__",
          "__init__",
          "__setitem__",
          "__getitem__",
          "__init__",
          "__setitem__",
          "__getitem__",
          "__init__",
          "__setitem__",
          "__getitem__",
          "__init__",
          "meth1",
          "meth2",
          "__init__",
          "__init__",
          "increase",
          "add",
          "sub",
          "__init__",
          "increase",
          "add",
          "__init__",
          "a_static_method",
          "call_static",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "getValue",
          "getValueIncr",
          "__init__",
          "getValue",
          "__init__",
          "__init__",
          "__eq__",
          "__hash__",
          "__lshift__",
          "__rshift__",
          "__and__",
          "__or__",
          "__xor__",
          "__init__",
          "__eq__",
          "__hash__",
          "__ge__",
          "__gt__",
          "__le__",
          "__lt__",
          "__add__",
          "__floordiv__",
          "__mod__",
          "__mul__",
          "__neg__",
          "__pos__",
          "__pow__",
          "__sub__",
          "__truediv__",
          "__init__",
          "__len__",
          "append",
          "pop",
          "__init__",
          "__init__",
          "__float__",
          "__init__",
          "__int__",
          "__init__",
          "__index__",
          "__init__",
          "__float__",
          "__int__",
          "__index__",
          "__init__",
          "__ilshift__",
          "__irshift__",
          "__iand__",
          "__ior__",
          "__ixor__",
          "__init__",
          "__iadd__",
          "__ifloordiv__",
          "__imod__",
          "__imul__",
          "__ipow__",
          "__isub__",
          "__itruediv__",
          "__init__",
          "__hash__",
          "__eq__",
          "__ne__",
          "__init__",
          "__len__",
          "get_bool",
          "__init__",
          "get_bool",
          "__init__",
          "__eq__",
          "__le__",
          "__lt__",
          "__ge__",
          "__gt__",
          "__init__",
          "__init__",
          "__matmul__",
          "__rmatmul__",
          "__imatmul__",
          "__init__",
          "__init__",
          "__radd__",
          "__rsub__",
          "__rmul__",
          "__rtruediv__",
          "__rfloordiv__",
          "__rmod__",
          "__rpow__",
          "__rlshift__",
          "__rrshift__",
          "__rand__",
          "__rxor__",
          "__ror__",
          "__init__",
          "__init__",
          "__eq__",
          "__init__",
          "__invert__",
          "__init__",
          "__init__",
          "__enter__"
        ],
        "classes": [
          "TestClass1",
          "TestClass2",
          "TestJitClass",
          "TestJitClassOverloads",
          "PyList",
          "Test1",
          "Foo",
          "Bar",
          "Test",
          "Test",
          "Float2AndArray",
          "Vector2",
          "Foo",
          "LinkedNode",
          "Struct",
          "CStruct",
          "Base",
          "Test",
          "Mine",
          "Foo",
          "Foo",
          "Foo",
          "Foo",
          "Foo",
          "MyClass",
          "MyClass",
          "Apple",
          "TestClass",
          "TestClass",
          "TestClass",
          "TestClass",
          "TestClass",
          "TestClass",
          "TestClass",
          "TestClass",
          "TruncatedLabel",
          "PickleTestSubject",
          "Test1",
          "Test2",
          "Test3",
          "Test1",
          "Test2",
          "Test3",
          "Test4",
          "AnnotatedTest",
          "UnannotatedTest",
          "Foo",
          "Bar",
          "TestModname",
          "IntWrapper",
          "FloatWrapper",
          "LenClass",
          "NormalClass",
          "FloatClass",
          "IntClass",
          "IndexClass",
          "FloatIntIndexClass",
          "JitIntUpdateWrapper",
          "JitFloatUpdateWrapper",
          "HashEqTest",
          "HashEqNeTest",
          "NoBoolHasLen",
          "NoBoolNoLen",
          "OperatorsDefined",
          "NoOperatorsDefined",
          "ArrayAt",
          "ArrayNoAt",
          "OperatorsDefined",
          "NoOperatorsDefined",
          "ImplicitHash",
          "InvertWrapper",
          "Test",
          "SubV",
          "Foo"
        ],
        "num_lines": 2044
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_polynomial.py": {
        "functions": [
          "roots_fn",
          "polyadd",
          "polysub",
          "polymul",
          "trimseq",
          "polyasseries1",
          "polyasseries2",
          "polydiv",
          "polyval2",
          "polyval3T",
          "polyval3F",
          "polyint",
          "setUp",
          "assert_error",
          "assert_1d_input",
          "assert_no_domain_change",
          "test_roots",
          "test_trimseq_basic",
          "test_trimseq_exception",
          "test_pu_as_series_basic",
          "test_pu_as_series_exception",
          "_test_polyarithm_basic",
          "_test_polyarithm_exception",
          "test_polyadd_basic",
          "test_polyadd_exception",
          "test_polysub_basic",
          "test_polysub_exception",
          "test_polymul_basic",
          "test_polymul_exception",
          "test_poly_polydiv_basic",
          "test_poly_polydiv_exception",
          "test_poly_polyval_basic",
          "test_poly_polyval_exception",
          "test_poly_polyint_basic",
          "test_poly_polyint_exception",
          "test_Polynomial_constructor",
          "test_Polynomial_exeption",
          "check",
          "inputs",
          "inputs",
          "inputs",
          "inputs",
          "inputs",
          "polyval3",
          "pyfunc3",
          "pyfunc1",
          "pyfunc3"
        ],
        "classes": [
          "TestPolynomialBase",
          "TestPoly1D",
          "TestPolynomial"
        ],
        "num_lines": 577
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_firstlinefinder.py": {
        "functions": [
          "_get_grandparent_caller_code",
          "assert_line_location",
          "test_decorated_odd_comment_indent",
          "test_undecorated_odd_comment_indent",
          "test_unnamed_lambda",
          "test_nested_function",
          "test_pass_statement",
          "test_string_eval",
          "_test_with_patched_linecache",
          "test_string_eval_linecache_basic",
          "test_string_eval_linecache_indent",
          "test_string_eval_linecache_closure",
          "test_string_eval_linecache_stacked_decorators",
          "test_string_eval_linecache_all",
          "test_single_line_function",
          "test_docstring",
          "test_docstring_2",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestFirstLineFinder"
        ],
        "num_lines": 221
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_obj_lifetime.py": {
        "functions": [
          "simple_usecase1",
          "simple_usecase2",
          "looping_usecase1",
          "looping_usecase2",
          "generator_usecase1",
          "generator_usecase2",
          "do_raise",
          "raising_usecase1",
          "raising_usecase2",
          "raising_usecase3",
          "del_before_definition",
          "inf_loop_multiple_back_edge",
          "__init__",
          "__add__",
          "__iter__",
          "__next__",
          "__init__",
          "make_dummy",
          "_add_dummy",
          "mark",
          "_on_disposal",
          "alive",
          "recorded",
          "compile",
          "compile_and_record",
          "assertRecordOrder",
          "test_simple1",
          "test_simple2",
          "test_looping1",
          "test_looping2",
          "exercise_generator",
          "test_generator1",
          "test_generator2",
          "test_del_before_definition",
          "test_raising1",
          "test_raising2",
          "test_raising3",
          "test_inf_loop_multiple_back_edge",
          "test_lifetime_basic",
          "test_dbg_extend_lifetimes",
          "get_ir",
          "check",
          "get_ir",
          "is_del_grouped_at_the_end",
          "foo",
          "foo",
          "define_pipelines",
          "define_pipelines"
        ],
        "classes": [
          "_Dummy",
          "_DummyIterator",
          "RefRecorder",
          "MyError",
          "TestObjLifetime",
          "TestExtendingVariableLifetimes",
          "IRPreservingCompiler",
          "IRPreservingCompiler"
        ],
        "num_lines": 494
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_intwidth.py": {
        "functions": [
          "usecase_uint64_global",
          "usecase_uint64_constant",
          "usecase_uint64_func",
          "usecase_int64_pos",
          "usecase_int64_neg",
          "usecase_int64_func",
          "check_nullary_func",
          "test_global_uint64",
          "test_global_uint64_npm",
          "test_constant_uint64",
          "test_constant_uint64_npm",
          "test_constant_uint64_function_call",
          "test_constant_uint64_function_call_npm",
          "test_bit_length",
          "test_constant_int64",
          "test_constant_int64_npm"
        ],
        "classes": [
          "IntWidthTest"
        ],
        "num_lines": 90
      },
      "/tmp/cs-hpc-demo-1/numba/tests/cloudpickle_main_class.py": {
        "functions": [],
        "classes": [
          "Klass"
        ],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_llvm_pass_timings.py": {
        "functions": [
          "test_usage",
          "test_analyze",
          "test_parse_raw",
          "test_disabled_behavior",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestLLVMPassTimings",
          "TestLLVMPassTimingsDisabled"
        ],
        "num_lines": 124
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_pythonapi.py": {
        "functions": [
          "_pyapi_bytes_as_string",
          "PyBytes_AsString",
          "_pyapi_bytes_as_string_and_size",
          "PyBytes_AsStringAndSize",
          "codegen",
          "codegen",
          "test_PyBytes_AsString",
          "test_PyBytes_AsStringAndSize",
          "test_empty_args",
          "callme",
          "py_call",
          "foo",
          "codegen"
        ],
        "classes": [
          "TestPythonAPI",
          "PythonAPIEmptyArgs"
        ],
        "num_lines": 123
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_extending.py": {
        "functions": [
          "typeof_mydummy",
          "mydummy_to_number",
          "get_dummy",
          "unbox_index",
          "base_dummy_type_factory",
          "unbox_index2",
          "func1",
          "type_func1_",
          "func1_nullary",
          "func1_unary",
          "print_dummy",
          "where",
          "np_where",
          "call_where",
          "overload_where_arrays",
          "overload_where_scalars",
          "overload_len_dummy",
          "overload_add_dummy",
          "overload_dummy_delitem",
          "overload_dummy_getitem",
          "overload_dummy_setitem",
          "call_add_operator",
          "call_add_binop",
          "overload_iadd_dummy",
          "call_iadd_operator",
          "call_iadd_binop",
          "call_delitem",
          "call_getitem",
          "call_setitem",
          "overload_method_length",
          "cache_overload_method_usecase",
          "call_func1_nullary",
          "call_func1_unary",
          "len_usecase",
          "print_usecase",
          "getitem_usecase",
          "npyufunc_usecase",
          "get_data_usecase",
          "get_index_usecase",
          "is_monotonic_usecase",
          "make_series_usecase",
          "clip_usecase",
          "return_non_boxable",
          "overload_return_non_boxable",
          "non_boxable_ok_usecase",
          "non_boxable_bad_usecase",
          "mk_func_input",
          "mk_func_test_impl",
          "constant_callable_typeref",
          "overload_np_exp",
          "_assert_cache_stats",
          "run_caching_overload_method",
          "ov_method_jit_option_check_nrt",
          "ov_method_jit_option_check_no_nrt",
          "ov_attr_jit_option_check_nrt",
          "ov_attr_jit_option_check_no_nrt",
          "with_objmode_cache_ov_example",
          "can_convert_to",
          "typeof_mydummy",
          "typer",
          "func1_impl",
          "imp",
          "imp",
          "generic",
          "__init__",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "__init__",
          "test_func1",
          "test_func1_isolated",
          "test_type_callable_keeps_function",
          "test_cast_mydummy",
          "test_mk_func_literal",
          "test_index_len",
          "test_index_getitem",
          "test_index_ufunc",
          "test_index_get_data",
          "test_index_is_monotonic",
          "test_series_len",
          "test_series_get_index",
          "test_series_ufunc",
          "test_series_constructor",
          "test_series_clip",
          "test_where",
          "test_len",
          "test_print",
          "test_add_operator",
          "test_add_binop",
          "test_iadd_operator",
          "test_iadd_binop",
          "test_delitem",
          "test_getitem",
          "test_setitem",
          "test_no_cpython_wrapper",
          "test_typing_vs_impl_signature_mismatch_handling",
          "test_typing_vs_impl_signature_mismatch_handling_var_positional",
          "test_typing_vs_impl_signature_mismatch_handling_var_keyword",
          "test_overload_method_kwargs",
          "test_overload_method_literal_unpack",
          "test_overload_ufunc",
          "test_overload_method_stararg",
          "test_overload_classmethod",
          "test_overload_callable_typeref",
          "test_caching_overload_method",
          "run_caching_overload_method",
          "test_void_return",
          "test_ll_pointer_cast",
          "test_serialization",
          "test_deserialization",
          "test_docstring",
          "test_no_flags",
          "test_flags_no_nrt",
          "test_getting_function",
          "test_missing_module",
          "test_missing_function",
          "imp",
          "imp",
          "imp",
          "imp",
          "check_error_no_nrt",
          "no_nrt_overload_check",
          "test_overload_no_nrt",
          "test_overload_method_no_nrt",
          "test_overload_attribute_no_nrt",
          "setUp",
          "test_unboxer_basic",
          "test_unboxer_raise",
          "test_boxer",
          "test_boxer_raise",
          "setUp",
          "tearDown",
          "test_caching_overload_objmode",
          "check_objmode_cache_ndarray",
          "populate_objmode_cache_ndarray_check_cache",
          "check_objmode_cache_ndarray_check_cache",
          "test_check_objmode_cache_ndarray",
          "test_is_jitted",
          "test_overload_arg_binding",
          "test_overload",
          "test_overload_method",
          "test_intrinsic",
          "test_signatures_match_overloaded_api",
          "where_impl",
          "len_impl",
          "dummy_add_impl",
          "dummy_delitem_impl",
          "dummy_getitem_impl",
          "dummy_setitem_impl",
          "dummy_iadd_impl",
          "imp",
          "check",
          "gen_ol",
          "impl1",
          "impl2",
          "impl3",
          "impl6",
          "impl7",
          "impl8",
          "impl9",
          "myoverload",
          "foo",
          "gen_ol",
          "ol1",
          "ol2",
          "fooimpl",
          "bar",
          "litfoo",
          "bar",
          "test",
          "_ov_method_stararg",
          "foo",
          "bar",
          "ol_array_alloc",
          "foo",
          "no_classmethod_in_base",
          "callable_type_call_ovld1",
          "callable_type_call_ovld2",
          "foo",
          "void_func",
          "non_void_func",
          "call_void_func",
          "call_non_void_func",
          "unsafe_caster",
          "unsafe_get_ctypes_pointer",
          "array_impl_unsafe_get_ctypes_pointer",
          "my_c_fun_raw",
          "foo",
          "identity",
          "foo",
          "defn",
          "void_func",
          "foo",
          "bar",
          "foo",
          "bar",
          "dummy",
          "ov_dummy",
          "foo",
          "udt",
          "udt",
          "udt",
          "udt",
          "my_intrinsic",
          "unboxer",
          "boxer",
          "passthru",
          "unboxer",
          "boxer",
          "passthru",
          "my_intrinsic",
          "unboxer",
          "boxer",
          "passthru",
          "unboxer",
          "boxer",
          "passthru",
          "do_this",
          "do_something",
          "overload_do_something",
          "test_caching",
          "foo",
          "standard_order",
          "reversed_order",
          "prefer_lit",
          "non_lit",
          "ov",
          "check_prefer_lit",
          "check_non_lit",
          "ov",
          "check_prefer_lit",
          "check_non_lit",
          "intrin",
          "check_prefer_lit",
          "check_non_lit",
          "sig_from_np_random",
          "checker",
          "where_impl",
          "where_impl",
          "myoverload",
          "_myoverload_impl",
          "foo",
          "myoverload",
          "foo",
          "impl",
          "impl",
          "impl",
          "get",
          "impl",
          "codegen",
          "codegen",
          "unsafe_cast",
          "codegen",
          "codegen",
          "codegen",
          "dummy",
          "impl",
          "bridge",
          "bridge",
          "impl",
          "bridge",
          "bridge",
          "realwork",
          "python_code",
          "_ov_with_objmode_cache_ov_example",
          "testcase",
          "_do_something_impl",
          "create_message",
          "impl",
          "impl",
          "array_impl",
          "impl",
          "impl",
          "impl",
          "codegen",
          "impl",
          "codegen",
          "impl",
          "impl",
          "codegen"
        ],
        "classes": [
          "MyDummy",
          "MyDummyType",
          "PrintDummy",
          "MkFuncTyping",
          "MyClass",
          "CallableTypeRef",
          "CallableTypeModel",
          "TestLowLevelExtending",
          "TestPandasLike",
          "TestHighLevelExtending",
          "TestOverloadMethodCaching",
          "TestIntrinsic",
          "TestRegisterJitable",
          "TestImportCythonFunction",
          "TestJitOptionsNoNRT",
          "TestBoxingCallingJIT",
          "TestCachingOverloadObjmode",
          "TestMisc",
          "TestOverloadPreferLiteral",
          "TestIntrinsicPreferLiteral",
          "TestNumbaInternalOverloads",
          "DynType",
          "DynTypeType",
          "MyArray"
        ],
        "num_lines": 2248
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_remove_dead.py": {
        "functions": [
          "test_will_propagate",
          "null_func",
          "dummy_aliased_func",
          "alias_ext_dummy_func",
          "findLhsAssign",
          "compile_parallel",
          "test1",
          "test2",
          "run_array_index_test",
          "test_alias_ravel",
          "test_alias_flat",
          "test_alias_transpose1",
          "test_alias_transpose2",
          "test_alias_transpose3",
          "test_alias_ctypes",
          "test_alias_reshape1",
          "test_alias_reshape2",
          "test_alias_func_ext",
          "test_rm_dead_rhs_vars",
          "test_alias_parfor_extension",
          "test_issue_9706",
          "test_issue_6541",
          "test_issue_7482",
          "test_issue_5661",
          "test_issue_9742",
          "test_issue_9742_variant",
          "call_np_random_seed",
          "seed_call_exists",
          "func",
          "func",
          "func",
          "func",
          "func",
          "remove_dead_xxnrm2",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "foo",
          "foo_manual_ssa",
          "f",
          "compute",
          "foo",
          "make",
          "foo",
          "foo",
          "__init__",
          "run_pass",
          "define_pipelines",
          "inner",
          "fn"
        ],
        "classes": [
          "TestRemoveDead",
          "TestSSADeadBranchPrune",
          "LimitedParfor",
          "TestPipeline"
        ],
        "num_lines": 436
      },
      "/tmp/cs-hpc-demo-1/numba/tests/serialize_usecases.py": {
        "functions": [
          "add_with_sig",
          "add_without_sig",
          "add_nopython",
          "add_nopython_fail",
          "closure",
          "closure_with_globals",
          "other_function",
          "get_global_objmode",
          "get_renamed_module",
          "closure_calling_other_function",
          "closure_calling_other_closure",
          "_get_dyn_func",
          "inner",
          "inner",
          "inner",
          "other_inner",
          "inner"
        ],
        "classes": [],
        "num_lines": 97
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_funcdesc.py": {
        "functions": [
          "test_module_not_in_namespace",
          "test_mangling_abi_tags",
          "udt"
        ],
        "classes": [
          "TestModule",
          "TestFuncDescMangledName"
        ],
        "num_lines": 61
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unsafe_intrinsics.py": {
        "functions": [
          "test_tuple_setitem",
          "test_slice_tuple",
          "test_to_fixed_tuple",
          "test_issue_3586_variant1",
          "test_issue_3586_variant2",
          "test_memcpy_region",
          "test_dump_refcount",
          "test_zero_count",
          "check_error_msg",
          "test_trailing_zeros_error",
          "test_leading_zeros_error",
          "foo",
          "full_slice_array",
          "foo",
          "tuple_with_length",
          "func",
          "func",
          "foo",
          "use_dump_refcount",
          "check"
        ],
        "classes": [
          "TestTupleIntrinsic",
          "TestNdarrayIntrinsic",
          "TestBytesIntrinsic",
          "TestRefCount",
          "TestZeroCounts"
        ],
        "num_lines": 232
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_literal_dispatch.py": {
        "functions": [
          "check_literal_basic",
          "test_literal_basic",
          "test_literal_nested",
          "test_literally_freevar",
          "test_mutual_recursion_literal",
          "test_literal_nested_multi_arg",
          "test_unsupported_literal_type",
          "test_biliteral",
          "test_literally_varargs",
          "test_literally_defaults",
          "test_literally_defaults_inner",
          "test_literally_from_module",
          "test_non_literal",
          "test_inlined_literal",
          "test_aliased_variable",
          "test_overload_explicit",
          "test_overload_implicit",
          "test_overload_error_loop",
          "make_dummy_type",
          "test_overload_method",
          "foo",
          "foo",
          "bar",
          "foo",
          "get_functions",
          "foo",
          "inner",
          "foo",
          "inner",
          "foo",
          "inner",
          "foo",
          "bar",
          "foo",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "inner",
          "do_this",
          "ov_do_this",
          "foo",
          "do_this",
          "hidden",
          "ov_do_this",
          "foo",
          "do_this",
          "hidden",
          "ov_do_this",
          "foo",
          "init_dummy",
          "dummy_overload",
          "lit_overload",
          "test_impl",
          "inside",
          "outer_fac",
          "inner_fac",
          "closure",
          "lit",
          "__init__",
          "__init__",
          "codegen",
          "ctor",
          "impl",
          "impl"
        ],
        "classes": [
          "TestLiteralDispatch",
          "TestLiteralDispatchWithCustomType",
          "Dummy",
          "DummyType",
          "DummyTypeModel"
        ],
        "num_lines": 400
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_listobject.py": {
        "functions": [
          "make_test_list",
          "test_list_create",
          "test_list_create_no_jit",
          "test_nonempty_list_create_no_jit",
          "test_list_bool",
          "test_list_allocation",
          "test_list_allocation_negative",
          "test_list_to_from_meminfo",
          "test_list_getitem_singleton",
          "test_list_getitem_singleton_negtive_index",
          "test_list_getitem_multiple",
          "test_list_getitem_empty_index_error",
          "test_list_getitem_multiple_index_error",
          "test_list_getitem_empty_typing_error",
          "test_list_getitem_integer_types_as_index",
          "test_list_getitem_different_sized_uint_index",
          "test_list_getitem_different_sized_int_index",
          "test_list_getitem_empty_slice_defaults",
          "test_list_getitem_singleton_slice_defaults",
          "test_list_getitem_multiple_slice_defaults",
          "test_list_getitem_multiple_slice_pos_start",
          "test_list_getitem_multiple_slice_pos_stop",
          "test_list_getitem_multiple_slice_pos_start_pos_stop",
          "test_list_getitem_multiple_slice_pos_start_pos_stop_pos_step",
          "test_list_getitem_multiple_slice_neg_start",
          "test_list_getitem_multiple_slice_neg_stop",
          "test_list_getitem_multiple_slice_neg_step",
          "test_list_getitem_multiple_slice_pos_start_neg_step",
          "test_list_getitem_multiple_slice_neg_start_neg_step",
          "test_list_getitem_multiple_slice_pos_stop_neg_step",
          "test_list_getitem_multiple_slice_neg_stop_neg_step",
          "test_list_getitem_multiple_slice_pos_start_pos_stop_neg_step",
          "test_list_getitem_multiple_slice_neg_start_neg_stop_neg_step",
          "test_list_getitem_multiple_slice_start_out_of_range",
          "test_list_getitem_multiple_slice_stop_zero",
          "test_list_getitem_multiple_slice_zero_step_index_error",
          "test_list_setitem_singleton",
          "test_list_setitem_singleton_negative_index",
          "test_list_setitem_singleton_index_error",
          "test_list_setitem_multiple",
          "test_list_setitem_multiple_index_error",
          "test_list_setitem_singleton_typing_error_on_index",
          "test_list_setitem_singleton_typing_error_on_item",
          "test_list_setitem_integer_types_as_index",
          "test_list_pop_singleton",
          "test_list_pop_singleton_index",
          "test_list_pop_multiple",
          "test_list_pop_multiple_index",
          "test_list_pop_integer_types_as_index",
          "test_list_pop_empty_index_error_no_index",
          "test_list_pop_empty_index_error_with_index",
          "test_list_pop_mutiple_index_error_with_index",
          "test_list_pop_singleton_typing_error_on_index",
          "test_list_singleton_delitem_index",
          "test_list_singleton_delitem_slice_defaults",
          "test_list_singleton_delitem_slice_start",
          "test_list_singleton_delitem_slice_stop",
          "test_list_singleton_delitem_slice_start_stop",
          "test_list_singleton_delitem_slice_start_step",
          "test_list_singleton_delitem_slice_start_stop_step",
          "test_list_multiple_delitem",
          "test_list_multiple_delitem_slice",
          "test_list_multiple_delitem_off_by_one",
          "test_list_contains_empty",
          "test_list_contains_singleton",
          "test_list_contains_multiple",
          "test_list_count_empty",
          "test_list_count_singleton",
          "test_list_count_mutiple",
          "test_list_extend_empty",
          "test_list_extend_typing_error_non_iterable",
          "test_list_insert_empty",
          "test_list_insert_singleton",
          "test_list_insert_multiple",
          "test_list_insert_multiple_before",
          "test_list_insert_multiple_after",
          "test_list_insert_typing_error",
          "test_list_remove_empty",
          "test_list_remove_singleton",
          "test_list_remove_singleton_value_error",
          "test_list_remove_multiple",
          "test_list_remove_multiple_value_error",
          "test_list_clear_empty",
          "test_list_clear_singleton",
          "test_list_clear_multiple",
          "test_list_reverse_empty",
          "test_list_reverse_singleton",
          "test_list_reverse_multiple",
          "test_list_copy_empty",
          "test_list_copy_singleton",
          "test_list_copy_multiple",
          "test_index_singleton",
          "test_index_multiple",
          "test_index_duplicate",
          "test_index_duplicate_with_start",
          "test_index_singleton_value_error",
          "test_index_multiple_value_error",
          "test_index_multiple_value_error_start",
          "test_index_multiple_value_error_end",
          "test_index_typing_error_start",
          "test_index_typing_error_end",
          "test_list_empty_equal",
          "test_list_singleton_equal",
          "test_list_singleton_not_equal",
          "test_list_length_mismatch",
          "test_list_multiple_equal",
          "test_list_multiple_not_equal",
          "test_list_iter",
          "test_list_iter_self_mutation",
          "test_string_item",
          "foo",
          "check_good",
          "check_bad",
          "test_cast_int_to",
          "test_cast_float_to",
          "test_cast_bool_to",
          "test_cast_fail_unicode_int",
          "test_cast_fail_int_unicode",
          "test_is_immutable",
          "test_make_immutable_is_immutable",
          "test_length_still_works_when_immutable",
          "test_getitem_still_works_when_immutable",
          "test_append_fails",
          "test_mutation_fails",
          "foo",
          "foo",
          "foo_kwarg",
          "foo_posarg",
          "foo",
          "boxer",
          "unboxer",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "generate_function",
          "foo",
          "foo"
        ],
        "classes": [
          "TestCreateAppendLength",
          "TestBool",
          "TestAllocation",
          "TestToFromMeminfo",
          "TestGetitem",
          "TestGetitemSlice",
          "TestSetitem",
          "TestPop",
          "TestListObjectDelitem",
          "TestContains",
          "TestCount",
          "TestExtend",
          "TestInsert",
          "TestRemove",
          "TestClear",
          "TestReverse",
          "TestCopy",
          "TestIndex",
          "TestEqualNotEqual",
          "TestIter",
          "TestStringItem",
          "TestItemCasting",
          "TestImmutable"
        ],
        "num_lines": 1652
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unpickle_without_module.py": {
        "functions": [
          "test_loading_pickle_with_no_module"
        ],
        "classes": [
          "TestUnpickleDeletedModule"
        ],
        "num_lines": 49
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_sys_monitoring.py": {
        "functions": [
          "_enable_sysmon",
          "generate_usecase",
          "foo",
          "call_foo",
          "setUp",
          "gather_mock_calls_multithreads",
          "check_py_start_calls_multithreads",
          "check_py_start_calls",
          "check_py_return_calls_multithreads",
          "check_py_return_calls",
          "run_with_events",
          "test_start_event",
          "test_return_event",
          "test_call_event_chain",
          "test_instrumented_code_does_not_trigger_numba_events",
          "test_instrumented_code_can_be_compiled",
          "test_unhandled_events_are_ignored",
          "test_event_with_no_callback_runs",
          "test_disable_from_callback",
          "test_mutation_from_objmode",
          "test_multiple_tool_id",
          "test_raising_under_monitoring",
          "test_stop_iteration_under_monitoring",
          "test_raising_callback_unwinds_from_jit_on_success_path",
          "test_raising_callback_unwinds_from_jit_on_raising_path",
          "test_raising_callback_unwinds_from_jit_on_unwind_path",
          "test_monitoring_multiple_threads",
          "test_skipping_of_tests_if_monitoring_in_use",
          "test_default_off",
          "test_override_off",
          "test_override_on",
          "foo",
          "foo",
          "generate",
          "foo",
          "foo",
          "raising",
          "raising",
          "barrier_cb",
          "t1_work",
          "t2_work",
          "assert_empty_queue",
          "foo",
          "foo",
          "foo",
          "producer",
          "consumer",
          "objmode_enable_event",
          "foo"
        ],
        "classes": [
          "TestMonitoring",
          "TestMonitoringSelfTest",
          "TestMonitoringEnvVarControl",
          "LocalException",
          "LocalException"
        ],
        "num_lines": 846
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_gil.py": {
        "functions": [
          "f",
          "lifted_f",
          "object_f",
          "make_test_array",
          "run_in_threads",
          "check_gil_held",
          "check_gil_released",
          "test_gil_held",
          "test_gil_released",
          "test_gil_released_inside_lifted_loop",
          "test_gil_released_by_caller",
          "test_gil_released_by_caller_and_callee",
          "test_gil_ignored_by_callee",
          "test_object_mode",
          "caller",
          "caller",
          "caller"
        ],
        "classes": [
          "TestGILRelease"
        ],
        "num_lines": 182
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_constants.py": {
        "functions": [
          "getitem0",
          "getitem1",
          "getitem2",
          "getitem3",
          "getitem4",
          "getitem5",
          "getitem6",
          "use_arrayscalar_const",
          "write_to_global_array",
          "bytes_as_const_array",
          "check_array_const",
          "test_array_const_0d",
          "test_array_const_1d_contig",
          "test_array_const_1d_noncontig",
          "test_array_const_2d",
          "test_record_array_const_contig",
          "test_record_array_const_noncontig",
          "test_array_const_alignment",
          "test_arrayscalar_const",
          "test_write_to_global_array",
          "test_issue_1850",
          "test_too_big_to_freeze",
          "test_constant_bytes",
          "pyfunc",
          "test",
          "pyfunc"
        ],
        "classes": [
          "TestConstantArray",
          "TestConstantBytes"
        ],
        "num_lines": 190
      },
      "/tmp/cs-hpc-demo-1/numba/tests/cffi_usecases.py": {
        "functions": [
          "load_inline_module",
          "load_ool_module",
          "init",
          "init_ool",
          "use_cffi_sin",
          "use_two_funcs",
          "use_cffi_sin_ool",
          "use_cffi_boolean_true",
          "use_two_funcs_ool",
          "use_func_pointer",
          "use_user_defined_symbols",
          "vector_sin_float32",
          "vector_sin_float64",
          "vector_extract_real",
          "vector_extract_imag"
        ],
        "classes": [],
        "num_lines": 197
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_numbers.py": {
        "functions": [
          "gen_view",
          "impl",
          "do_testing",
          "test_8_bits",
          "test_32_bits",
          "test_64_bits",
          "test_python_scalar_exception",
          "do_testing_exceptions",
          "test_exceptions32",
          "test_exceptions64",
          "myview"
        ],
        "classes": [
          "TestViewIntFloat"
        ],
        "num_lines": 90
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_slices.py": {
        "functions": [
          "slice_passing",
          "slice_constructor",
          "slice_construct_and_use",
          "slice_indices",
          "test_slice_passing",
          "test_slice_constructor",
          "test_slice_constructor_cases",
          "test_slice_indices",
          "test_slice_indices_examples",
          "test_slice_from_constant",
          "test_literal_slice_distinct",
          "test_literal_slice_boxing",
          "test_literal_slice_freevar",
          "test_literal_slice_maxint",
          "check",
          "f",
          "foo",
          "foo",
          "test_fn"
        ],
        "classes": [
          "TestSlices"
        ],
        "num_lines": 259
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_mandelbrot.py": {
        "functions": [
          "is_in_mandelbrot",
          "test_mandelbrot"
        ],
        "classes": [
          "TestMandelbrot"
        ],
        "num_lines": 28
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_numpy_support.py": {
        "functions": [
          "test_number_types",
          "test_string_types",
          "check_datetime_types",
          "test_datetime_types",
          "test_timedelta_types",
          "test_struct_types",
          "test_enum_type",
          "check_number_values",
          "_base_check_datetime_values",
          "check_datetime_values",
          "check_timedelta_values",
          "test_number_values",
          "test_datetime_values",
          "test_timedelta_values",
          "__init__",
          "test_ufunc_find_matching_loop",
          "test_layout_checker",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check_exact",
          "check_no_match",
          "check_arr"
        ],
        "classes": [
          "TestFromDtype",
          "ValueTypingTestBase",
          "TestArrayScalars",
          "FakeUFunc",
          "TestUFuncs"
        ],
        "num_lines": 437
      },
      "/tmp/cs-hpc-demo-1/numba/tests/compile_with_pycc.py": {
        "functions": [
          "mult",
          "get_none",
          "div",
          "square",
          "power",
          "sqrt",
          "size",
          "np_sqrt",
          "np_spacing",
          "random_impl",
          "zero_scalar",
          "zeros",
          "np_argsort",
          "dict_usecase",
          "internal_str_dict",
          "internal_str_dict",
          "internal_str_dict",
          "do_setitem1",
          "do_setitem2",
          "vector_dot"
        ],
        "classes": [],
        "num_lines": 147
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir.py": {
        "functions": [
          "test_IRScope",
          "check",
          "test_loc",
          "test_scope",
          "test_terminator",
          "test_jump",
          "test_return",
          "test_raise",
          "test_staticraise",
          "test_branch",
          "test_expr",
          "test_setitem",
          "test_staticsetitem",
          "test_delitem",
          "test_del",
          "test_setattr",
          "test_delattr",
          "test_assign",
          "test_print",
          "test_storemap",
          "test_yield",
          "test_enterwith",
          "test_arg",
          "test_const",
          "test_global",
          "test_var",
          "test_undefinedtype",
          "test_loop",
          "test_with",
          "test_varmap",
          "test_block",
          "test_functionir",
          "test_var_in_scope_assumption",
          "gen_block",
          "run_frontend",
          "gen",
          "check_diffstr",
          "foo",
          "bar",
          "baz",
          "dummy",
          "foo",
          "__init__",
          "run_pass",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "TestIR",
          "CheckEquality",
          "TestIRMeta",
          "TestIRNodes",
          "TestIRCompounds",
          "TestIRPedanticChecks",
          "RemoveVarInScope",
          "FailPass",
          "MyCompiler"
        ],
        "num_lines": 566
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_deprecations.py": {
        "functions": [
          "_catch_numba_deprecation_warnings",
          "check_warning",
          "test_explicit_false_nopython_kwarg",
          "test_vectorize_missing_nopython_kwarg_not_reported",
          "test_vectorize_nopython_false_is_reported",
          "test_vectorize_objmode_direct_compilation_no_warnings",
          "test_vectorize_objmode_compilation_nopython_false_warns",
          "test_vectorize_parallel_true_no_warnings",
          "test_vectorize_parallel_true_nopython_true_no_warnings",
          "test_vectorize_parallel_true_nopython_false_warns",
          "test_vectorize_calling_jit_with_nopython_false_warns_from_jit",
          "test_guvectorize_implicit_nopython_no_warnings",
          "test_guvectorize_forceobj_no_warnings",
          "test_guvectorize_parallel_implicit_nopython_no_warnings",
          "test_guvectorize_parallel_forceobj_no_warnings",
          "test_reflection_of_mutable_container",
          "test_pycc_module",
          "test_pycc_CC",
          "foo_list",
          "foo_set",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar"
        ],
        "classes": [
          "TestDeprecation"
        ],
        "num_lines": 262
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_looplifting.py": {
        "functions": [
          "compile_isolated",
          "lift1",
          "lift2",
          "lift3",
          "lift4",
          "lift5",
          "lift_gen1",
          "lift_issue2561",
          "reject1",
          "reject_gen1",
          "reject_gen2",
          "reject_npm1",
          "try_lift",
          "assert_lifted_native",
          "check_lift_ok",
          "check_lift_generator_ok",
          "check_no_lift",
          "check_no_lift_generator",
          "test_lift1",
          "test_lift2",
          "test_lift3",
          "test_lift4",
          "test_lift5",
          "test_lift_issue2561",
          "test_lift_gen1",
          "test_reject1",
          "test_reject_gen1",
          "test_reject_gen2",
          "test_annotate_1",
          "test_annotate_2",
          "assert_has_lifted",
          "test_issue_734",
          "test_issue_812",
          "test_issue_2368",
          "test_no_iteration_w_redef",
          "test_no_iteration",
          "test_define_in_loop_body",
          "test_invalid_argument",
          "test_conditionally_defined_in_loop",
          "test_stack_offset_error_when_has_no_return",
          "test_variable_scope_bug",
          "test_recompilation_loop",
          "test_lift_objectmode_issue_4223",
          "test_lift_zip_and_enumerate",
          "bar",
          "foo",
          "bar",
          "foo",
          "forloop_with_if",
          "test",
          "lift_issue2368",
          "test",
          "test",
          "test",
          "test",
          "test",
          "pyfunc",
          "bar",
          "foo",
          "foo",
          "foo",
          "udt_zip",
          "udt_enumerate",
          "udt_enumerate_zip"
        ],
        "classes": [
          "TestLoopLifting",
          "TestLoopLiftingAnnotate",
          "TestLoopLiftingInAction"
        ],
        "num_lines": 595
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_storeslice.py": {
        "functions": [
          "setitem_slice",
          "usecase",
          "test_usecase",
          "test_array_slice_setitem"
        ],
        "classes": [
          "TestStoreSlice"
        ],
        "num_lines": 68
      },
      "/tmp/cs-hpc-demo-1/numba/tests/recursion_usecases.py": {
        "functions": [
          "fib1",
          "make_fib2",
          "make_type_change_self",
          "fib3",
          "runaway_self",
          "raise_self",
          "outer_fac",
          "inner_fac",
          "make_mutual2",
          "runaway_mutual",
          "runaway_mutual_inner",
          "make_type_change_mutual",
          "make_four_level",
          "make_inner_error",
          "make_raise_mutual",
          "make_optional_return_case",
          "make_growing_tuple_case",
          "fib2",
          "type_change_self",
          "foo",
          "bar",
          "foo",
          "bar",
          "first",
          "second",
          "third",
          "fourth",
          "outer",
          "inner",
          "error_fun",
          "outer",
          "inner",
          "foo",
          "bar",
          "make_list"
        ],
        "classes": [],
        "num_lines": 228
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doctest_usecase.py": {
        "functions": [
          "a",
          "b",
          "c",
          "d"
        ],
        "classes": [],
        "num_lines": 31
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_init_utils.py": {
        "functions": [
          "test_major_minor_patch",
          "test_unknown",
          "test_dev",
          "test_full_rev"
        ],
        "classes": [
          "TestGenerateVersionInfo"
        ],
        "num_lines": 42
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_chrome_trace.py": {
        "functions": [
          "test_trace_output"
        ],
        "classes": [
          "TestChromeTraceModule"
        ],
        "num_lines": 51
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_generators.py": {
        "functions": [
          "make_consumer",
          "gen1",
          "gen2",
          "gen3",
          "gen4",
          "gen5",
          "gen6",
          "gen7",
          "gen8",
          "genobj",
          "return_generator_expr",
          "gen_ndindex",
          "gen_flat",
          "gen_ndenumerate",
          "gen_bool",
          "gen_unification_error",
          "gen_optional_and_type_unification_error",
          "gen_changing_tuple_type",
          "gen_changing_number_type",
          "nrt_gen0",
          "nrt_gen1",
          "consumer",
          "check_generator",
          "check_gen1",
          "test_gen1",
          "test_gen1_objmode",
          "check_gen2",
          "test_gen2",
          "test_gen2_objmode",
          "check_gen3",
          "test_gen3",
          "test_gen3_objmode",
          "check_gen4",
          "test_gen4",
          "test_gen4_objmode",
          "test_gen5",
          "test_gen5_objmode",
          "check_gen6",
          "test_gen6",
          "test_gen6_objmode",
          "check_gen7",
          "test_gen7",
          "test_gen7_objmode",
          "check_gen8",
          "test_gen8",
          "test_gen8_objmode",
          "check_gen9",
          "test_gen9",
          "test_gen9_objmode",
          "check_consume_generator",
          "test_consume_gen1",
          "test_consume_gen2",
          "test_consume_gen3",
          "check_ndindex",
          "test_ndindex",
          "test_ndindex_objmode",
          "check_np_flat",
          "test_np_flat",
          "test_np_flat_objmode",
          "test_ndenumerate",
          "test_ndenumerate_objmode",
          "test_type_unification_error",
          "test_optional_expansion_type_unification_error",
          "test_changing_tuple_type",
          "test_changing_number_type",
          "test_nrt_gen0",
          "test_nrt_gen1",
          "test_combine_gen0_gen1",
          "test_nrt_gen0_stop_iteration",
          "test_nrt_gen0_no_iter",
          "test_nrt_nested_gen",
          "test_nrt_nested_gen_refct",
          "test_nrt_nested_nopython_gen",
          "test_issue_1254",
          "test_issue_1265",
          "test_issue_1808",
          "check",
          "gen0",
          "factory",
          "gen0",
          "factory",
          "factory",
          "random_directions",
          "py_gen",
          "py_driver",
          "c_driver",
          "generator",
          "get_generator",
          "main",
          "gen1",
          "gen1",
          "foo",
          "bar",
          "cat"
        ],
        "classes": [
          "TestGenerators",
          "TestNrtArrayGen",
          "TestNrtNestedGen",
          "TestGeneratorWithNRT",
          "TestGeneratorModel"
        ],
        "num_lines": 661
      },
      "/tmp/cs-hpc-demo-1/numba/tests/dummy_module.py": {
        "functions": [
          "function"
        ],
        "classes": [],
        "num_lines": 4
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_struct_ref.py": {
        "functions": [
          "my_struct",
          "my_struct_init",
          "ctor_by_intrinsic",
          "ctor_by_class",
          "get_values",
          "set_values",
          "get_counter",
          "compute_fields",
          "test_structref_is",
          "_ol_mystructtype_testme",
          "_ol_mystructtype_prop",
          "caching_test_make",
          "caching_test_use",
          "PolygonStruct_get_value",
          "PolygonStruct_get_parent",
          "_ol_polygon_struct_flip",
          "_ol_polygon_struct_prop",
          "__new__",
          "values",
          "values",
          "counter",
          "testme",
          "prop",
          "__hash__",
          "test_is_identity",
          "test_structref_type",
          "test_invalid_uses",
          "test_MySimplerStructType",
          "test_MySimplerStructType_wrapper_has_no_attrs",
          "test_MyStructType",
          "test_MyStructType_mixed_types",
          "test_MyStructType_in_dict",
          "test_MyStructType_in_dict_mixed_type_error",
          "test_MyStructType_hash_no_typeof_recursion",
          "impl",
          "get",
          "test_overload_method",
          "test_overload_attribute",
          "setUp",
          "tearDown",
          "test_structref_caching",
          "preprocess_fields",
          "__new__",
          "value",
          "parent",
          "impl",
          "get",
          "test_same_type_assignment",
          "test_overload_method",
          "test_overload_attribute",
          "mixed_type",
          "check",
          "check",
          "assert_cached",
          "assert_not_cached",
          "check",
          "check",
          "check",
          "check"
        ],
        "classes": [
          "MySimplerStructType",
          "MyStruct",
          "MyStructType",
          "TestStructRefIs",
          "TestStructRefBasic",
          "TestStructRefExtending",
          "TestStructRefCaching",
          "PolygonStructType",
          "PolygonStruct",
          "TestStructRefForwardTyping"
        ],
        "num_lines": 454
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_recursion.py": {
        "functions": [
          "check_fib",
          "test_global_explicit_sig",
          "test_inner_explicit_sig",
          "test_global_implicit_sig",
          "test_runaway",
          "test_type_change",
          "test_raise",
          "test_optional_return",
          "test_growing_return_tuple",
          "test_mutual_1",
          "test_mutual_2",
          "test_runaway",
          "test_type_change",
          "test_four_level",
          "test_inner_error",
          "test_raise"
        ],
        "classes": [
          "TestSelfRecursion",
          "TestMutualRecursion"
        ],
        "num_lines": 129
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_operators.py": {
        "functions": [
          "make_static_power",
          "pow_usecase",
          "add_usecase",
          "iadd_usecase",
          "sub_usecase",
          "isub_usecase",
          "mul_usecase",
          "imul_usecase",
          "floordiv_usecase",
          "ifloordiv_usecase",
          "truediv_usecase",
          "itruediv_usecase",
          "mod_usecase",
          "imod_usecase",
          "pow_usecase",
          "ipow_usecase",
          "bitshift_left_usecase",
          "bitshift_ileft_usecase",
          "bitshift_right_usecase",
          "bitshift_iright_usecase",
          "bitwise_and_usecase",
          "bitwise_iand_usecase",
          "bitwise_or_usecase",
          "bitwise_ior_usecase",
          "bitwise_xor_usecase",
          "bitwise_ixor_usecase",
          "bitwise_not_usecase_binary",
          "bitwise_not_usecase",
          "not_usecase",
          "negate_usecase",
          "unary_positive_usecase",
          "lt_usecase",
          "le_usecase",
          "gt_usecase",
          "ge_usecase",
          "eq_usecase",
          "ne_usecase",
          "in_usecase",
          "not_in_usecase",
          "is_usecase",
          "add_usecase",
          "iadd_usecase",
          "sub_usecase",
          "isub_usecase",
          "mul_usecase",
          "imul_usecase",
          "floordiv_usecase",
          "ifloordiv_usecase",
          "truediv_usecase",
          "itruediv_usecase",
          "mod_usecase",
          "imod_usecase",
          "pow_usecase",
          "ipow_usecase",
          "matmul_usecase",
          "imatmul_usecase",
          "bitshift_left_usecase",
          "bitshift_ileft_usecase",
          "bitshift_right_usecase",
          "bitshift_iright_usecase",
          "bitwise_and_usecase",
          "bitwise_iand_usecase",
          "bitwise_or_usecase",
          "bitwise_ior_usecase",
          "bitwise_xor_usecase",
          "bitwise_ixor_usecase",
          "bitwise_not_usecase_binary",
          "bitwise_not_usecase",
          "not_usecase",
          "negate_usecase",
          "unary_positive_usecase",
          "lt_usecase",
          "le_usecase",
          "gt_usecase",
          "ge_usecase",
          "eq_usecase",
          "ne_usecase",
          "in_usecase",
          "not_in_usecase",
          "is_usecase",
          "run_test_ints",
          "run_test_floats",
          "coerce_operand",
          "run_test_scalar_compare",
          "test_lt_scalar",
          "test_lt_scalar_npm",
          "test_le_scalar",
          "test_le_scalar_npm",
          "test_gt_scalar",
          "test_gt_scalar_npm",
          "test_ge_scalar",
          "test_ge_scalar_npm",
          "test_eq_scalar",
          "test_eq_scalar_npm",
          "test_ne_scalar",
          "test_ne_scalar_npm",
          "test_is_ellipsis",
          "test_is_void_ptr",
          "run_binop_bools",
          "run_binop_ints",
          "run_binop_floats",
          "run_binop_floats_floordiv",
          "run_binop_complex",
          "generate_binop_tests",
          "check_div_errors",
          "test_truediv_errors",
          "test_truediv_errors_npm",
          "test_floordiv_errors",
          "test_floordiv_errors_npm",
          "test_mod_errors",
          "test_mod_errors_npm",
          "run_pow_ints",
          "run_pow_floats",
          "test_add_complex",
          "test_add_complex_npm",
          "test_sub_complex",
          "test_sub_complex_npm",
          "test_mul_complex",
          "test_mul_complex_npm",
          "test_truediv_complex",
          "test_truediv_complex_npm",
          "test_mod_complex",
          "test_mod_complex_npm",
          "check_matmul_objmode",
          "test_matmul",
          "test_imatmul",
          "check_matmul_npm",
          "test_matmul_npm",
          "test_imatmul_npm",
          "run_bitshift_left",
          "run_bitshift_right",
          "run_logical",
          "test_bitwise_not",
          "test_bitwise_not_npm",
          "test_bitwise_float",
          "test_not",
          "test_not_npm",
          "test_negate_npm",
          "test_negate",
          "test_unary_positive_npm",
          "test_unary_positive",
          "_check_in",
          "test_in",
          "test_in_npm",
          "test_not_in",
          "test_not_in_npm",
          "int_in_dtype_range",
          "get_numpy_signed_upcast",
          "get_numpy_unsigned_upcast",
          "get_typed_int",
          "get_control_signed",
          "get_control_unsigned",
          "run_binary",
          "run_unary",
          "run_arith_binop",
          "test_add",
          "test_sub",
          "test_mul",
          "test_floordiv",
          "test_mod",
          "test_pow",
          "test_truediv",
          "test_and",
          "test_or",
          "test_xor",
          "run_shift_binop",
          "test_lshift",
          "test_rshift",
          "test_unary_positive",
          "test_unary_negative",
          "test_invert",
          "_check_pow",
          "test_int_values",
          "test_real_values",
          "test_eq",
          "test_neq",
          "test_eq",
          "test_ne",
          "test_is",
          "test_not",
          "test_bool",
          "test_bool_to_str",
          "cfunc",
          "assert_reject_compile",
          "control_signed",
          "control_unsigned",
          "control_signed",
          "control",
          "control_signed",
          "control_unsigned",
          "check",
          "control",
          "control_signed",
          "control_unsigned",
          "control_signed",
          "control_unsigned",
          "test_impl1",
          "test_impl2",
          "test_impl1",
          "test_impl2",
          "test_impl1",
          "test_impl2",
          "test_impl3",
          "test_impl1",
          "test_impl2",
          "test_impl3",
          "test_impl1",
          "test_impl2",
          "test_impl",
          "test_impl",
          "test_impl",
          "inner",
          "test_meth"
        ],
        "classes": [
          "LiteralOperatorImpl",
          "FunctionalOperatorImpl",
          "TestOperators",
          "TestOperatorModule",
          "TestMixedInts",
          "TestMixedIntsOperatorModule",
          "TestStaticPower",
          "TestStringConstComparison",
          "TestBooleanLiteralOperators"
        ],
        "num_lines": 1622
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dictimpl.py": {
        "functions": [
          "__init__",
          "__del__",
          "__len__",
          "__setitem__",
          "__getitem__",
          "__delitem__",
          "get",
          "items",
          "popitem",
          "dict_new_minsize",
          "dict_length",
          "dict_insert",
          "dict_lookup",
          "dict_delitem",
          "dict_popitem",
          "dict_iter",
          "dict_iter_next",
          "__init__",
          "__iter__",
          "__next__",
          "__init__",
          "__init__",
          "key",
          "__len__",
          "setUp",
          "test_simple_c_test",
          "test_insertion_small",
          "check_insertion_many",
          "test_insertion_many",
          "test_deletion_small",
          "check_delete_randomly",
          "test_delete_randomly",
          "test_delete_randomly_large",
          "test_popitem",
          "test_iter_items",
          "check_sizing",
          "test_sizing",
          "test_parameterized_types",
          "wrap",
          "make_key",
          "make_val",
          "make_key",
          "make_val",
          "make_key",
          "make_val",
          "make_key",
          "make_val",
          "make_key",
          "make_val",
          "typeof_unit",
          "unbox_parametrized",
          "dict_vs_cache_vs_parametrized",
          "ol_dict_vs_cache_vs_parametrized",
          "set_parametrized_data",
          "objmode_vs_cache_vs_parametrized_impl"
        ],
        "classes": [
          "Dict",
          "DictIter",
          "Parametrized",
          "ParametrizedType",
          "TestDictImpl"
        ],
        "num_lines": 656
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_analysis.py": {
        "functions": [
          "compile_to_ir",
          "find_branches",
          "assert_prune",
          "test_single_if",
          "test_single_if_else",
          "test_single_if_const_val",
          "test_single_if_else_two_const_val",
          "test_single_if_else_w_following_undetermined",
          "test_double_if_else_rt_const",
          "test_double_if_else_non_literal_const",
          "test_single_two_branches_same_cond",
          "test_cond_is_kwarg_none",
          "test_cond_is_kwarg_value",
          "test_cond_rewrite_is_correct",
          "test_global_bake_in",
          "test_freevar_bake_in",
          "test_redefined_variables_are_not_considered_in_prune",
          "test_comparison_operators",
          "test_redefinition_analysis_same_block",
          "test_redefinition_analysis_different_block_can_exec",
          "test_redefinition_analysis_different_block_cannot_exec",
          "test_closure_and_nonlocal_can_prune",
          "test_closure_and_nonlocal_cannot_prune",
          "_literal_const_sample_generator",
          "test_literal_const_code_gen",
          "test_single_if_const",
          "test_single_if_negate_const",
          "test_single_if_else_const",
          "test_single_if_else_negate_const",
          "test_single_if_freevar",
          "test_single_if_negate_freevar",
          "test_single_if_else_freevar",
          "test_single_if_else_negate_freevar",
          "test_single_if_global",
          "test_single_if_negate_global",
          "test_single_if_else_global",
          "test_single_if_else_negate_global",
          "test_issue_5618",
          "test_ssa_update_phi",
          "test_ssa_replace_phi",
          "test_array_ndim_attr",
          "test_tuple_len",
          "test_attr_not_len",
          "test_ndim_not_on_array",
          "test_semantic_const_propagates_before_static_rewrites",
          "test_tuple_const_propagation",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "fn",
          "check",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "foo",
          "define_pipelines",
          "impl",
          "impl",
          "impl",
          "impl",
          "test",
          "impl",
          "impl",
          "impl",
          "impl",
          "closure",
          "closure",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func"
        ],
        "classes": [
          "TestBranchPruneBase",
          "TestBranchPrune",
          "TestBranchPrunePredicates",
          "TestBranchPruneSSA",
          "TestBranchPrunePostSemanticConstRewrites",
          "SSAPrunerCompiler"
        ],
        "num_lines": 1064
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_maxmin.py": {
        "functions": [
          "domax3",
          "domin3",
          "test_max3",
          "test_min3"
        ],
        "classes": [
          "TestMaxMin"
        ],
        "num_lines": 39
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_exceptions.py": {
        "functions": [
          "raise_class",
          "raise_instance",
          "raise_instance_runtime_args",
          "reraise",
          "outer_function",
          "assert_usecase",
          "ude_bug_usecase",
          "raise_runtime_value",
          "__init__",
          "__eq__",
          "__hash__",
          "__init__",
          "__eq__",
          "__hash__",
          "raiser",
          "raiser",
          "raiser",
          "outer",
          "test_unituple_index_error",
          "check_against_python",
          "check_raise_class",
          "test_raise_class_nopython",
          "test_raise_class_objmode",
          "check_raise_instance",
          "test_raise_instance_objmode",
          "test_raise_instance_nopython",
          "check_raise_nested",
          "test_raise_nested_objmode",
          "test_raise_nested_nopython",
          "check_reraise",
          "test_reraise_objmode",
          "test_reraise_nopython",
          "check_raise_invalid_class",
          "test_raise_invalid_class_objmode",
          "test_raise_invalid_class_nopython",
          "test_raise_bare_string_nopython",
          "check_assert_statement",
          "test_assert_statement_objmode",
          "test_assert_statement_nopython",
          "check_raise_from_exec_string",
          "test_assert_from_exec_string_objmode",
          "test_assert_from_exec_string_nopython",
          "check_user_code_error_traceback",
          "test_user_code_error_traceback_objmode",
          "test_user_code_error_traceback_nopython",
          "check_raise_runtime_value",
          "test_raise_runtime_value_objmode",
          "test_raise_runtime_value_nopython",
          "test_raise_runtime_value_nogil",
          "check_raise_instance_with_runtime_args",
          "test_raise_instance_with_runtime_args_objmode",
          "test_raise_instance_with_runtime_args_nopython",
          "test_raise_instance_with_runtime_args_nogil",
          "test_dynamic_raise_bad_args",
          "test_dynamic_raise_dict",
          "test_disable_nrt",
          "test_try_raise",
          "test_dynamic_raise",
          "pyfunc",
          "raise_exc",
          "foo",
          "raise_literal_dict",
          "raise_range",
          "raise_rng",
          "raise_literal_dict2",
          "raise_with_no_nrt",
          "raise_",
          "try_raise",
          "raise_",
          "try_raise_",
          "gen_impl",
          "impl"
        ],
        "classes": [
          "MyError",
          "OtherError",
          "UDEArgsToSuper",
          "UDENoArgSuper",
          "TestRaising"
        ],
        "num_lines": 477
      },
      "/tmp/cs-hpc-demo-1/numba/tests/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 33
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_comprehension.py": {
        "functions": [
          "comp_list",
          "test_comp_list",
          "test_bulk_use_cases",
          "test_objmode_inlining",
          "check",
          "test_comp_with_array_1",
          "test_comp_with_array_2",
          "test_comp_with_array_noinline",
          "test_comp_with_array_noinline_issue_6053",
          "test_comp_nest_with_array",
          "test_comp_nest_with_array_3",
          "test_comp_nest_with_array_noinline",
          "test_comp_with_array_range",
          "test_comp_with_array_range_and_step",
          "test_comp_with_array_conditional",
          "test_comp_nest_with_array_conditional",
          "test_comp_nest_with_dependency",
          "test_comp_unsupported_iter",
          "test_no_array_comp",
          "test_nested_array",
          "test_nested_array_with_const",
          "test_array_comp_with_iter",
          "test_array_comp_with_dtype",
          "test_array_comp_inferred_dtype",
          "test_array_comp_inferred_dtype_nested",
          "test_array_comp_inferred_dtype_nested_sum",
          "test_array_comp_inferred_dtype_outside_setitem",
          "test_array_comp_shuffle_sideeffect",
          "test_empty_list_not_removed",
          "test_reuse_of_array_var",
          "fib3",
          "list1",
          "list2",
          "list3",
          "list4",
          "list5",
          "list6",
          "list7",
          "list8",
          "list9",
          "list10",
          "list11",
          "list12",
          "list13",
          "list14",
          "list15",
          "list16",
          "list17",
          "list18",
          "list19",
          "list20",
          "list21",
          "list22",
          "list23",
          "list24",
          "list25",
          "objmode_func",
          "comp_with_array_1",
          "comp_with_array_2",
          "comp_with_array_noinline",
          "comp_with_array_noinline",
          "comp_nest_with_array",
          "comp_nest_with_array_3",
          "comp_nest_with_array_noinline",
          "comp_with_array_range",
          "comp_with_array_range_and_step",
          "comp_with_array_conditional",
          "comp_nest_with_array_conditional",
          "comp_nest_with_dependency",
          "comp_unsupported_iter",
          "no_array_comp1",
          "no_array_comp2",
          "nested_array",
          "nested_array",
          "array_comp",
          "array_comp",
          "array_comp",
          "array_comp",
          "array_comp",
          "array_comp",
          "foo",
          "f",
          "foo",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner"
        ],
        "classes": [
          "TestListComprehension",
          "TestArrayComprehension"
        ],
        "num_lines": 529
      },
      "/tmp/cs-hpc-demo-1/numba/tests/ctypes_usecases.py": {
        "functions": [
          "use_c_sin",
          "use_two_funcs",
          "use_c_vsquare",
          "use_c_vcube",
          "use_c_untyped",
          "use_ctype_wrapping",
          "use_c_pointer",
          "use_func_pointer",
          "call_me_maybe",
          "take_array_ptr",
          "use_c_sleep"
        ],
        "classes": [],
        "num_lines": 114
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_listimpl.py": {
        "functions": [
          "__init__",
          "__del__",
          "__len__",
          "__setitem__",
          "__getitem__",
          "__iter__",
          "__delitem__",
          "handle_index",
          "allocated",
          "is_mutable",
          "set_mutable",
          "set_immutable",
          "append",
          "pop",
          "list_new",
          "list_length",
          "list_allocated",
          "list_is_mutable",
          "list_set_is_mutable",
          "list_setitem",
          "list_getitem",
          "list_append",
          "list_pop",
          "list_delitem",
          "list_iter",
          "list_iter_next",
          "__init__",
          "__iter__",
          "__next__",
          "setUp",
          "test_simple_c_test",
          "test_length",
          "test_allocation",
          "test_append_get_string",
          "test_append_get_int",
          "test_append_get_string_realloc",
          "test_set_item_getitem_index_error",
          "test_iter",
          "test_pop",
          "test_pop_index_error",
          "test_pop_byte",
          "test_delitem",
          "test_delete_slice",
          "check_sizing",
          "test_sizing",
          "test_mutability",
          "wrap",
          "make_item"
        ],
        "classes": [
          "List",
          "ListIter",
          "TestListImpl"
        ],
        "num_lines": 527
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_locals.py": {
        "functions": [
          "foo",
          "test_seed_types"
        ],
        "classes": [
          "TestLocals"
        ],
        "num_lines": 18
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dicts.py": {
        "functions": [
          "build_map",
          "build_map_from_local_vars",
          "check",
          "test_build_map",
          "test_build_map_from_local_vars",
          "test_use_dict",
          "test_use_dict_iterable_args",
          "test_ctor_iterable_tuple",
          "test_unsupported_dict_usage",
          "test_use_curlybraces",
          "test_use_curlybraces_with_init1",
          "test_use_curlybraces_with_initmany",
          "test_curlybraces_init_with_coercion",
          "test_use_curlybraces_with_manyvar",
          "test_mixed_curlybraces_and_dict",
          "test_dict_use_with_none_value",
          "test_dict_use_with_optional_value",
          "test_dict_use_with_optional_key",
          "test_dict_use_with_none_key",
          "foo",
          "dict_iterable_1",
          "dict_iterable_2",
          "ctor",
          "ctor1",
          "ctor2",
          "ctor3",
          "ctor4",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "DictTestCase",
          "TestCompiledDict"
        ],
        "num_lines": 233
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_optional.py": {
        "functions": [
          "return_double_or_none",
          "return_different_statement",
          "return_bool_optional_or_none",
          "is_this_a_none",
          "a_is_b",
          "a_is_not_b",
          "test_return_double_or_none",
          "test_return_different_statement",
          "test_return_bool_optional_or_none",
          "test_is_this_a_none",
          "test_is_this_a_none_objmode",
          "test_a_is_b_intp",
          "test_a_is_not_b_intp",
          "test_optional_float",
          "test_optional_array",
          "test_optional_array_error",
          "test_optional_array_attribute",
          "test_assign_to_optional",
          "test_optional_thru_omitted_arg",
          "test_optional_unpack",
          "test_many_optional_none_returns",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "make_optional",
          "foo",
          "pyfunc",
          "pyfunc",
          "foo",
          "work"
        ],
        "classes": [
          "TestOptional"
        ],
        "num_lines": 254
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_mathlib.py": {
        "functions": [
          "sin",
          "cos",
          "tan",
          "sinh",
          "cosh",
          "tanh",
          "asin",
          "acos",
          "atan",
          "atan2",
          "asinh",
          "acosh",
          "atanh",
          "sqrt",
          "npy_sqrt",
          "exp",
          "expm1",
          "log",
          "log1p",
          "log10",
          "log2",
          "floor",
          "ceil",
          "trunc",
          "isnan",
          "isinf",
          "isfinite",
          "hypot",
          "nextafter",
          "degrees",
          "radians",
          "erf",
          "erfc",
          "gamma",
          "lgamma",
          "pow",
          "gcd",
          "copysign",
          "frexp",
          "ldexp",
          "get_constants",
          "test_constants",
          "run_unary",
          "run_binary",
          "check_predicate_func",
          "test_sin",
          "test_cos",
          "test_tan",
          "test_sqrt",
          "test_npy_sqrt",
          "test_exp",
          "test_expm1",
          "test_log",
          "test_log1p",
          "test_log10",
          "test_log2",
          "test_asin",
          "test_acos",
          "test_atan",
          "test_atan2",
          "test_asinh",
          "test_acosh",
          "test_atanh",
          "test_sinh",
          "test_cosh",
          "test_tanh",
          "test_floor",
          "test_ceil",
          "test_trunc",
          "test_isnan",
          "test_isinf",
          "test_isfinite",
          "test_hypot",
          "test_nextafter",
          "test_degrees",
          "test_radians",
          "test_erf",
          "test_erfc",
          "test_gamma",
          "test_lgamma",
          "test_pow",
          "test_gcd",
          "test_copysign",
          "test_frexp",
          "test_ldexp",
          "naive_hypot"
        ],
        "classes": [
          "TestMathLib"
        ],
        "num_lines": 559
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir_utils.py": {
        "functions": [
          "__init__",
          "test_obj_func_match",
          "test_dead_code_elimination",
          "test_find_const_global",
          "test_flatten_labels",
          "test_func",
          "check_initial_ir",
          "check_dce_ir",
          "foo",
          "foo",
          "foo",
          "bar",
          "baz",
          "get_flat_cfg",
          "mk_pipeline",
          "compile_to_ir"
        ],
        "classes": [
          "Dummy",
          "TestIrUtils",
          "Tester"
        ],
        "num_lines": 282
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_numberctor.py": {
        "functions": [
          "dobool",
          "doint",
          "dofloat",
          "docomplex",
          "docomplex2",
          "complex_calc",
          "complex_calc2",
          "converter",
          "real_np_types",
          "complex_np_types",
          "f",
          "check_int_constructor",
          "test_bool",
          "test_int",
          "test_float",
          "test_complex",
          "test_complex2",
          "check_type_converter",
          "check_number_types",
          "test_numba_types",
          "test_numpy_types",
          "check_type_constructor",
          "test_1d",
          "test_2d",
          "tp_factory",
          "tp_factory"
        ],
        "classes": [
          "TestScalarNumberCtor",
          "TestArrayNumberCtor"
        ],
        "num_lines": 241
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_globals.py": {
        "functions": [
          "global_ndarray_func",
          "global_cplx_arr_copy",
          "global_rec_arr_copy",
          "global_rec_arr_extract_fields",
          "global_two_rec_arrs",
          "global_record_func",
          "global_module_func",
          "global_int_tuple",
          "global_str_tuple",
          "global_mixed_tuple",
          "global_float_tuple",
          "global_npy_int_tuple",
          "global_write_to_arr_in_tuple",
          "global_write_to_arr_in_mixed_tuple",
          "_sink",
          "global_npy_bool",
          "check_global_ndarray",
          "test_global_ndarray",
          "test_global_ndarray_npm",
          "check_global_complex_arr",
          "test_global_complex_arr",
          "test_global_complex_arr_npm",
          "check_global_rec_arr",
          "test_global_rec_arr",
          "test_global_rec_arr_npm",
          "check_global_rec_arr_extract",
          "test_global_rec_arr_extract",
          "test_global_rec_arr_extract_npm",
          "check_two_global_rec_arrs",
          "test_two_global_rec_arrs",
          "test_two_global_rec_arrs_npm",
          "test_global_module",
          "test_global_record",
          "test_global_int_tuple",
          "test_global_str_tuple",
          "test_global_mixed_tuple",
          "test_global_float_tuple",
          "test_global_npy_int_tuple",
          "test_global_write_to_arr_in_tuple",
          "test_global_npy_bool"
        ],
        "classes": [
          "TestGlobals"
        ],
        "num_lines": 266
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typingerror.py": {
        "functions": [
          "what",
          "foo",
          "bar",
          "issue_868",
          "impossible_return_type",
          "bad_hypot_usage",
          "imprecise_list",
          "using_imprecise_list",
          "unknown_module",
          "nop",
          "array_setitem_invalid_cast",
          "__repr__",
          "test_unknown_function",
          "test_unknown_attrs",
          "test_unknown_module",
          "test_issue_868",
          "test_return_type_unification",
          "test_bad_hypot_usage",
          "test_imprecise_list",
          "test_using_imprecise_list",
          "test_array_setitem_invalid_cast",
          "test_template_rejection_error_message_cascade",
          "test_unsupported_array_dtype",
          "test_unsupported_type",
          "test_readonly_array",
          "foo",
          "inner",
          "outer"
        ],
        "classes": [
          "Foo",
          "TestTypingError",
          "TestArgumentTypingError",
          "TestCallError"
        ],
        "num_lines": 236
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_object_mode.py": {
        "functions": [
          "complex_constant",
          "long_constant",
          "delitem_usecase",
          "loop_nest_3",
          "array_of_object",
          "test_complex_constant",
          "test_long_constant",
          "test_loop_nest",
          "test_array_of_object",
          "test_sequence_contains",
          "test_delitem",
          "test_starargs_non_tuple",
          "test_expr_undef",
          "_ensure_objmode",
          "test_static_raise_in_objmode_fallback",
          "test_static_setitem_in_objmode_fallback",
          "test_dynamic_func_objmode",
          "test_issue_9725_label_renaming",
          "bm_pyfunc",
          "bm_cfunc",
          "foo",
          "consumer",
          "foo",
          "foo",
          "test0",
          "test1",
          "test0",
          "test",
          "f"
        ],
        "classes": [
          "TestObjectMode",
          "TestObjectModeInvalidRewrite"
        ],
        "num_lines": 214
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_copy_propagate.py": {
        "functions": [
          "test_will_propagate",
          "test_wont_propagate",
          "null_func",
          "inListVar",
          "findAssign",
          "test1",
          "test2",
          "test_input_ir_extra_copies",
          "test_input_ir_copy_remove_transform",
          "test_impl",
          "impl1",
          "impl2",
          "impl3"
        ],
        "classes": [
          "TestCopyPropagate",
          "C"
        ],
        "num_lines": 169
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ctypes.py": {
        "functions": [
          "_conversion_tests",
          "test_from_ctypes",
          "test_to_ctypes",
          "test_c_sin",
          "test_two_funcs",
          "test_stdcall",
          "test_ctype_wrapping",
          "test_ctype_voidptr",
          "test_function_pointer",
          "test_untyped_function",
          "test_python_call_back",
          "test_python_call_back_threaded",
          "test_passing_array_ctypes_data",
          "check_array_ctypes",
          "test_passing_array_ctypes_voidptr",
          "test_passing_array_ctypes_voidptr_pass_ptr",
          "test_storing_voidptr_to_int_array",
          "check",
          "check",
          "call_me_maybe",
          "pyfunc",
          "pyfunc",
          "run",
          "pyfunc",
          "get_voidstar",
          "pyfunc"
        ],
        "classes": [
          "TestCTypesTypes",
          "TestCTypesUseCases"
        ],
        "num_lines": 255
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_np_randomgen.py": {
        "functions": [
          "test_generator_caching",
          "test_proper_func_provider",
          "test_check_types",
          "test_integers_arg_check",
          "check_numpy_parity",
          "_test_bitgen_func_parity",
          "_check_invalid_types",
          "test_npgen_boxing_unboxing",
          "test_npgen_boxing_refcount",
          "test_bitgen_funcs",
          "test_integers",
          "test_integers_cases",
          "test_random",
          "test_standard_normal",
          "test_standard_exponential",
          "test_standard_exponential_inv",
          "test_standard_gamma",
          "test_normal",
          "test_uniform",
          "test_exponential",
          "test_gamma",
          "test_beta",
          "test_f",
          "test_chisquare",
          "test_standard_cauchy",
          "test_pareto",
          "test_weibull",
          "test_power",
          "test_laplace",
          "test_logistic",
          "test_lognormal",
          "test_rayleigh",
          "test_standard_t",
          "test_wald",
          "test_geometric",
          "test_zipf",
          "test_triangular",
          "test_poisson",
          "test_negative_binomial",
          "test_shuffle",
          "test_shuffle_empty",
          "test_shuffle_check",
          "test_permutation",
          "test_permutation_exception",
          "test_permutation_empty",
          "test_noncentral_chisquare",
          "test_noncentral_f",
          "test_logseries",
          "test_binomial",
          "test_binomial_cases",
          "test_binomial_specific_issues",
          "test_randomgen_caching",
          "test_32bit_func",
          "test_64bit_func",
          "dist_func",
          "dist_func",
          "dist_func",
          "dist_func",
          "foo",
          "foo",
          "dist_func",
          "dist_func"
        ],
        "classes": [
          "TestHelperFuncs",
          "TestRandomGenerators",
          "TestGeneratorCaching"
        ],
        "num_lines": 1273
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeof.py": {
        "functions": [
          "_numba_type_",
          "test_number_values",
          "test_datetime_values",
          "test_timedelta_values",
          "test_array_values",
          "test_structured_arrays",
          "test_buffers",
          "test_none",
          "test_ellipsis",
          "test_str",
          "test_slices",
          "test_tuples",
          "test_lists",
          "test_sets",
          "test_namedtuple",
          "test_enum",
          "test_enum_class",
          "test_dtype",
          "test_dtype_values",
          "test_ctypes",
          "test_cffi",
          "test_custom",
          "test_omitted_args",
          "test_np_random",
          "__init__",
          "add",
          "test_floats",
          "test_ints",
          "test_bool",
          "test_complex",
          "test_none",
          "test_enums",
          "test_records",
          "test_datetime",
          "test_arrays",
          "test_buffers",
          "test_dtype",
          "test_tuples",
          "test_lists",
          "test_sets",
          "test_omitted_args",
          "test_complicated_type",
          "test_memcpy_typeof_buffer",
          "check",
          "check"
        ],
        "classes": [
          "Custom",
          "TestTypeof",
          "DistinctChecker",
          "TestFingerprint",
          "TestTypeOfMemCpy"
        ],
        "num_lines": 601
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_usecases.py": {
        "functions": [
          "test_andor",
          "test_sum1d",
          "test_sum1d_pyobj",
          "test_sum2d",
          "test_while_count",
          "test_copy_arrays",
          "test_copy_arrays2d",
          "test_string_concat",
          "test_string_len",
          "test_string_slicing",
          "test_string_conversion",
          "test_string_comparisons",
          "test_blackscholes_cnd"
        ],
        "classes": [
          "TestUsecases"
        ],
        "num_lines": 192
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_auto_constants.py": {
        "functions": [
          "test_numpy_nan",
          "test_sys_constant",
          "test_module_string_constant",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "TestAutoConstants"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_cffi.py": {
        "functions": [
          "setUp",
          "test_type_map",
          "_test_function",
          "test_sin_function",
          "test_bool_function_ool",
          "test_sin_function_npm",
          "test_sin_function_ool",
          "test_sin_function_npm_ool",
          "test_two_funcs",
          "test_two_funcs_ool",
          "test_function_pointer",
          "test_user_defined_symbols",
          "check_vector_sin",
          "_test_from_buffer_numpy_array",
          "test_from_buffer_float32",
          "test_from_buffer_float64",
          "test_from_buffer_struct",
          "test_from_buffer_pyarray",
          "test_from_buffer_error",
          "test_from_buffer_numpy_multi_array",
          "test_indirect_multiple_use",
          "inner",
          "foo"
        ],
        "classes": [
          "TestCFFI"
        ],
        "num_lines": 189
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_try_except.py": {
        "functions": [
          "test_try_inner_raise",
          "test_try_state_reset",
          "_multi_inner",
          "test_nested_try",
          "test_loop_in_try",
          "test_raise_in_try",
          "test_recursion",
          "test_yield",
          "test_closure2",
          "test_closure3",
          "test_closure4",
          "test_real_problem",
          "test_for_loop",
          "test_try_pass",
          "test_try_except_reraise",
          "test_catch_exception",
          "test_return_in_catch",
          "test_save_caught",
          "test_try_except_reraise",
          "test_try_except_reraise_chain",
          "test_division_operator",
          "check_compare",
          "test_try_except_else",
          "test_try_except_finally",
          "test_list_direct_raise",
          "test_list_indirect_raise",
          "test_incompatible_refinement",
          "test_yield",
          "test_objmode",
          "test_objmode_output_type",
          "test_reraise_opcode_unreachable",
          "test_try_in_prange_reduction",
          "test_try_outside_prange_reduction",
          "test_try_in_prange_map",
          "test_try_outside_prange_map",
          "inner",
          "udt",
          "inner",
          "udt",
          "inner",
          "udt",
          "udt",
          "udt",
          "foo",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "udt",
          "appender",
          "udt",
          "udt",
          "udt",
          "udt",
          "bar",
          "test_objmode",
          "pyfunc",
          "udt",
          "udt",
          "udt",
          "udt",
          "bar",
          "bar",
          "bar"
        ],
        "classes": [
          "MyError",
          "TestTryBareExcept",
          "TestTryExceptCaught",
          "TestTryExceptNested",
          "TestTryExceptRefct",
          "TestTryExceptOtherControlFlow",
          "TestTryExceptParfors"
        ],
        "num_lines": 851
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_sort.py": {
        "functions": [
          "make_temp_list",
          "make_temp_array",
          "sort_usecase",
          "argsort_usecase",
          "argsort_kind_usecase",
          "sorted_usecase",
          "sorted_reverse_usecase",
          "np_sort_usecase",
          "np_argsort_usecase",
          "np_argsort_kind_usecase",
          "list_sort_usecase",
          "list_sort_reverse_usecase",
          "random_list",
          "sorted_list",
          "revsorted_list",
          "initially_sorted_list",
          "duprandom_list",
          "dupsorted_list",
          "assertSorted",
          "assertSortedValues",
          "fibo",
          "make_sample_sorted_lists",
          "make_sample_lists",
          "merge_init",
          "test_binarysort",
          "test_binarysort_with_values",
          "test_count_run",
          "test_gallop_left",
          "test_gallop_right",
          "test_merge_compute_minrun",
          "check_merge_lo_hi",
          "test_merge_lo_hi",
          "check_merge_at",
          "test_merge_at",
          "test_merge_force_collapse",
          "test_run_timsort",
          "test_run_timsort_with_values",
          "array_factory",
          "wrap_with_mergestate",
          "array_factory",
          "check_merge_lo_hi",
          "test_insertion_sort",
          "test_partition",
          "test_partition3",
          "test_run_quicksort",
          "test_run_quicksort_lt",
          "array_factory",
          "assertSorted",
          "array_factory",
          "get_shapes",
          "test_run_quicksort",
          "test_run_quicksort_lt",
          "setUp",
          "int_arrays",
          "float_arrays",
          "has_duplicates",
          "check_sort_inplace",
          "check_sort_copy",
          "check_argsort",
          "test_array_sort_int",
          "test_array_sort_float",
          "test_array_sort_complex",
          "test_np_sort_int",
          "test_np_sort_float",
          "test_np_sort_complex",
          "test_argsort_int",
          "test_argsort_kind_int",
          "test_argsort_float",
          "test_argsort_float_supplemental",
          "test_argsort_complex",
          "test_argsort_complex_supplemental",
          "test_bad_array",
          "test_list_sort",
          "test_list_sort_reverse",
          "test_sorted",
          "test_sorted_reverse",
          "setUp",
          "check_argsort_stable",
          "test_argsort_stable",
          "test_01",
          "test_02",
          "test_03",
          "test_04",
          "test_05",
          "test_optional_on_key",
          "test_exceptions_sorted",
          "test_exceptions",
          "check",
          "check",
          "check",
          "check",
          "check_all_hints",
          "check_sorted_list",
          "check",
          "check_all_hints",
          "check_sorted_list",
          "run_merge_at",
          "wrapper",
          "check",
          "check",
          "check",
          "lt",
          "lt_floats",
          "lt",
          "lt_floats",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "external_key",
          "foo",
          "foo",
          "gen",
          "external_key",
          "foo",
          "external_key",
          "foo",
          "foo",
          "foo_sorted",
          "foo_sort",
          "external_key",
          "nonliteral_kind",
          "unsupported_kwarg",
          "closure_key",
          "bar",
          "foo",
          "closure_escapee_key",
          "closure_key"
        ],
        "classes": [
          "BaseSortingTest",
          "BaseTimsortTest",
          "TestTimsortPurePython",
          "TestTimsortArraysPurePython",
          "JITTimsortMixin",
          "TestTimsortArrays",
          "BaseQuicksortTest",
          "TestQuicksortPurePython",
          "TestQuicksortArrays",
          "TestQuicksortMultidimensionalArrays",
          "TestNumpySort",
          "TestPythonSort",
          "TestMergeSort",
          "TestSortSlashSortedWithKey",
          "TestArrayArgsort"
        ],
        "num_lines": 1260
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_cfunc.py": {
        "functions": [
          "add_usecase",
          "div_usecase",
          "square_usecase",
          "objmode_usecase",
          "make_cfarray_usecase",
          "make_cfarray_dtype_usecase",
          "cfarray_usecase",
          "cfarray_usecase",
          "test_basic",
          "test_cffi",
          "test_locals",
          "test_errors",
          "test_llvm_ir",
          "test_object_mode",
          "run_carray_usecase",
          "check_carray_usecase",
          "make_voidptr",
          "make_float32_pointer",
          "make_float64_pointer",
          "check_carray_farray",
          "test_carray",
          "test_farray",
          "make_carray_sigs",
          "check_numba_carray_farray",
          "test_numba_carray",
          "test_numba_farray",
          "get_ffi",
          "test_type_parsing",
          "test_cfunc_callback",
          "test_unsupport_bitsize",
          "eq",
          "calc",
          "foo"
        ],
        "classes": [
          "TestCFunc",
          "TestCArray",
          "TestCffiStruct"
        ],
        "num_lines": 408
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_conversion.py": {
        "functions": [
          "identity",
          "addition",
          "equality",
          "foobar",
          "test_complex_identity",
          "test_complex_addition",
          "test_boolean_as_int",
          "test_boolean_as_float",
          "test_boolean_eq_boolean",
          "test_negative_to_unsigned",
          "test_multiple_args_negative_to_unsigned",
          "test_multiple_args_records",
          "test_with_no_parameters",
          "check_argument_cleanup",
          "test_cleanup_buffer",
          "test_cleanup_record",
          "test_cleanup_tuple",
          "test_cleanup_optional",
          "test_stringliteral_to_unicode",
          "f",
          "f",
          "f",
          "_objects",
          "bar",
          "foo2"
        ],
        "classes": [
          "TestConversion"
        ],
        "num_lines": 223
      },
      "/tmp/cs-hpc-demo-1/numba/tests/errorhandling_usecases.py": {
        "functions": [
          "global_reflected_write",
          "global_dict_write"
        ],
        "classes": [],
        "num_lines": 14
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_indexing.py": {
        "functions": [
          "slicing_1d_usecase",
          "slicing_1d_usecase2",
          "slicing_1d_usecase3",
          "slicing_1d_usecase4",
          "slicing_1d_usecase5",
          "slicing_1d_usecase6",
          "slicing_1d_usecase7",
          "slicing_1d_usecase8",
          "slicing_2d_usecase",
          "slicing_2d_usecase3",
          "slicing_3d_usecase",
          "slicing_3d_usecase2",
          "partial_1d_usecase",
          "integer_indexing_1d_usecase",
          "integer_indexing_2d_usecase",
          "integer_indexing_2d_usecase2",
          "ellipsis_usecase1",
          "ellipsis_usecase2",
          "ellipsis_usecase3",
          "none_index_usecase",
          "empty_tuple_usecase",
          "setitem_usecase",
          "setitem_broadcast_usecase",
          "slicing_1d_usecase_set",
          "slicing_1d_usecase_add",
          "slicing_2d_usecase_set",
          "test_1d_slicing",
          "test_1d_slicing_npm",
          "test_1d_slicing2",
          "test_1d_slicing2_npm",
          "test_1d_slicing3",
          "test_1d_slicing3_npm",
          "test_1d_slicing4",
          "test_1d_slicing4_npm",
          "check_1d_slicing_with_arg",
          "test_1d_slicing5",
          "test_1d_slicing5_npm",
          "test_1d_slicing6",
          "test_1d_slicing6_npm",
          "test_1d_slicing7",
          "test_1d_slicing7_npm",
          "test_1d_slicing8",
          "test_1d_slicing8_npm",
          "test_2d_slicing",
          "test_2d_slicing_npm",
          "test_2d_slicing2",
          "test_2d_slicing2_npm",
          "test_2d_slicing3",
          "test_2d_slicing3_npm",
          "test_3d_slicing",
          "test_3d_slicing_npm",
          "test_3d_slicing2",
          "test_3d_slicing2_npm",
          "test_1d_integer_indexing",
          "test_1d_integer_indexing_npm",
          "test_integer_indexing_1d_for_2d",
          "test_integer_indexing_1d_for_2d_npm",
          "test_2d_integer_indexing",
          "test_2d_integer_indexing_npm",
          "test_2d_integer_indexing2",
          "test_2d_integer_indexing_via_call",
          "test_2d_float_indexing",
          "test_partial_1d_indexing",
          "check_ellipsis",
          "test_ellipsis1",
          "test_ellipsis1_npm",
          "test_ellipsis2",
          "test_ellipsis2_npm",
          "test_ellipsis3",
          "test_ellipsis3_npm",
          "test_ellipsis_issue1498",
          "test_ellipsis_issue1499",
          "test_none_index",
          "test_none_index_npm",
          "test_empty_tuple_indexing",
          "test_empty_tuple_indexing_npm",
          "test_conversion_setitem",
          "test_1d_slicing_set",
          "check_1d_slicing_set_sequence",
          "test_1d_slicing_set_tuple",
          "test_1d_slicing_set_list",
          "test_1d_slicing_broadcast",
          "test_1d_slicing_add",
          "test_1d_slicing_set_npm",
          "test_1d_slicing_set_list_npm",
          "test_1d_slicing_set_tuple_npm",
          "test_1d_slicing_broadcast_npm",
          "test_1d_slicing_add_npm",
          "test_2d_slicing_set",
          "test_2d_slicing_broadcast",
          "test_2d_slicing_set_npm",
          "test_2d_slicing_broadcast_npm",
          "test_setitem",
          "test_setitem_broadcast",
          "test_setitem_broadcast_error",
          "test_slicing_1d_broadcast",
          "test_setitem_readonly",
          "test_layout",
          "index1",
          "index2",
          "check",
          "compile_func",
          "run",
          "udt",
          "udt",
          "pyfunc",
          "make_dest"
        ],
        "classes": [
          "TestGetItem",
          "TestSetItem",
          "TestTyping"
        ],
        "num_lines": 1119
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_pycc.py": {
        "functions": [
          "unset_macosx_deployment_target",
          "test_windows_compiler_validity",
          "setUp",
          "tearDown",
          "check_c_ext",
          "setUp",
          "check_cc_compiled",
          "check_cc_compiled_in_subprocess",
          "test_cc_properties",
          "test_compile",
          "check_compile_for_cpu",
          "test_compile_for_cpu",
          "test_compile_for_cpu_host",
          "test_compile_helperlib",
          "test_compile_nrt",
          "test_hashing",
          "test_c_extension_usecase",
          "test_dynamic_exc",
          "setUp",
          "check_setup_py",
          "check_setup_nested_py",
          "test_setup_py_distutils",
          "test_setup_py_distutils_nested",
          "test_setup_py_setuptools",
          "test_setup_py_setuptools_nested",
          "run_python",
          "run_python"
        ],
        "classes": [
          "TestCompilerChecks",
          "BasePYCCTest",
          "TestCC",
          "TestDistutilsSupport"
        ],
        "num_lines": 402
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_byteflow.py": {
        "functions": [
          "test_issue_5087",
          "test_issue_5097",
          "test_issue_5680",
          "udt",
          "udt",
          "udt"
        ],
        "classes": [
          "TestByteFlowIssues"
        ],
        "num_lines": 94
      },
      "/tmp/cs-hpc-demo-1/numba/tests/annotation_usecases.py": {
        "functions": [
          "__init__",
          "add"
        ],
        "classes": [
          "AnnotatedClass"
        ],
        "num_lines": 16
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode_names.py": {
        "functions": [
          "make_testcase",
          "test_unicode_name1",
          "test_unicode_name2",
          "test_cfunc",
          "test_normalize_ir_text",
          "test_normalize_ir_text_unicode"
        ],
        "classes": [
          "TestUnicodeNames",
          "TestUnicodeUtils"
        ],
        "num_lines": 61
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_findlib.py": {
        "functions": [
          "test_find_file_nonexistent_path"
        ],
        "classes": [
          "TestFindlib"
        ],
        "num_lines": 12
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_extended_arg.py": {
        "functions": [
          "get_extended_arg_load_const",
          "test_extended_arg_load_const",
          "f"
        ],
        "classes": [
          "TestExtendedArg"
        ],
        "num_lines": 51
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_alignment.py": {
        "functions": [
          "test_record_alignment",
          "test_record_misaligned",
          "foo",
          "foo"
        ],
        "classes": [
          "TestAlignment"
        ],
        "num_lines": 40
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ndarray_subclasses.py": {
        "functions": [
          "_do_log",
          "log",
          "use_logger",
          "typeof_ta_ndarray",
          "type_myarray",
          "impl_myarray",
          "box_array",
          "_ol_array_allocate",
          "allocator_MyArray",
          "core",
          "__array_ufunc__",
          "__init__",
          "copy",
          "__array_ufunc__",
          "box_type",
          "__init__",
          "typer",
          "impl",
          "impl",
          "test_myarray_return",
          "test_myarray_passthru",
          "test_myarray_convert",
          "test_myarray_asarray_non_jit",
          "test_myarray_asarray",
          "test_myarray_ufunc_unsupported",
          "test_myarray_allocator_override",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "MyArray",
          "MyArrayType",
          "MyArrayTypeModel",
          "TestNdarraySubclasses"
        ],
        "num_lines": 346
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_multi3.py": {
        "functions": [
          "test_multi3",
          "func",
          "expected"
        ],
        "classes": [
          "TestMulti3"
        ],
        "num_lines": 43
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_extending_types.py": {
        "functions": [
          "gen_mock_float",
          "mock_float",
          "setUp",
          "_add_float_overload",
          "test_overload_float",
          "test_overload_float_error_msg",
          "test_unboxing",
          "test_boxing",
          "test_issue5565_literal_getitem",
          "type_dummy",
          "impl_dummy",
          "typeof_dummy",
          "dummy_to_float",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "dummy_getitem_ovld",
          "test_impl",
          "__init__",
          "__init__",
          "__init__",
          "typer",
          "codegen",
          "dummy_getitem_impl",
          "dummy_getitem_impl"
        ],
        "classes": [
          "TestExtTypDummy",
          "Dummy",
          "DummyType",
          "DummyModel"
        ],
        "num_lines": 170
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_import.py": {
        "functions": [
          "test_laziness",
          "test_no_impl_import",
          "test_no_accidental_warnings",
          "test_import_star"
        ],
        "classes": [
          "TestNumbaImport"
        ],
        "num_lines": 116
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_overlap.py": {
        "functions": [
          "array_overlap1",
          "array_overlap2",
          "array_overlap3",
          "array_overlap4",
          "array_overlap5",
          "array_overlap6",
          "array_overlap11",
          "array_overlap12",
          "array_overlap13",
          "array_overlap14",
          "array_overlap15",
          "array_overlap16",
          "check_overlap",
          "check_overlap_with_k",
          "test_overlap1",
          "test_overlap2",
          "test_overlap3",
          "test_overlap4",
          "test_overlap5",
          "test_overlap6",
          "test_overlap11",
          "test_overlap12",
          "test_overlap13",
          "test_overlap14",
          "test_overlap15",
          "test_overlap16",
          "vary_layouts",
          "check"
        ],
        "classes": [
          "TestArrayOverlap"
        ],
        "num_lines": 134
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_attr.py": {
        "functions": [
          "array_dtype",
          "use_dtype",
          "dtype_eq_int64",
          "array_itemsize",
          "array_nbytes",
          "array_shape",
          "array_strides",
          "array_ndim",
          "array_size",
          "array_flags_contiguous",
          "array_flags_c_contiguous",
          "array_flags_f_contiguous",
          "nested_array_itemsize",
          "nested_array_nbytes",
          "nested_array_shape",
          "nested_array_strides",
          "nested_array_ndim",
          "nested_array_size",
          "size_after_slicing_usecase",
          "array_ctypes_data",
          "array_real",
          "array_imag",
          "setUp",
          "check_unary",
          "check_unary_with_arrays",
          "get_cfunc",
          "test_shape",
          "test_strides",
          "test_ndim",
          "test_size",
          "test_itemsize",
          "test_nbytes",
          "test_dtype",
          "test_use_dtype",
          "test_dtype_equal",
          "test_flags_contiguous",
          "test_flags_c_contiguous",
          "test_flags_f_contiguous",
          "setUp",
          "get_cfunc",
          "test_shape",
          "test_strides",
          "test_ndim",
          "test_nbytes",
          "test_size",
          "test_itemsize",
          "test_size_after_slicing",
          "test_array_ctypes_data",
          "test_array_ctypes_ref_error_in_parallel",
          "check_complex",
          "test_complex_real",
          "test_complex_imag",
          "check_number_real",
          "test_number_real",
          "check_number_imag",
          "test_number_imag",
          "test_record_real",
          "test",
          "callback",
          "foo",
          "__init__",
          "foo"
        ],
        "classes": [
          "TestArrayAttr",
          "TestNestedArrayAttr",
          "TestSlicedArrayAttr",
          "TestArrayCTypes",
          "TestRealImagAttr",
          "TestJitclassFlagsSegfault",
          "B"
        ],
        "num_lines": 410
      },
      "/tmp/cs-hpc-demo-1/numba/tests/error_usecases.py": {
        "functions": [
          "foo"
        ],
        "classes": [],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_methods.py": {
        "functions": [
          "np_around_array",
          "np_around_binary",
          "np_around_unary",
          "np_round_array",
          "np_round__array",
          "np_round_binary",
          "np_round_unary",
          "_fixed_np_round",
          "array_T",
          "array_transpose",
          "array_copy",
          "np_copy",
          "np_asfortranarray",
          "np_ascontiguousarray",
          "array_view",
          "array_take",
          "array_take_kws",
          "np_arange_1",
          "np_arange_2",
          "np_arange_3",
          "np_arange_4",
          "np_arange_1_stop",
          "np_arange_1_step",
          "np_arange_1_dtype",
          "np_arange_2_step",
          "np_arange_2_dtype",
          "np_arange_start_stop",
          "np_arange_start_stop_step",
          "np_arange_start_stop_step_dtype",
          "array_fill",
          "make_array_view",
          "array_sliced_view",
          "make_array_astype",
          "np_frombuffer",
          "np_frombuffer_dtype",
          "np_frombuffer_dtype_str",
          "np_frombuffer_allocated",
          "np_frombuffer_allocated_dtype",
          "identity_usecase",
          "array_tobytes",
          "array_nonzero",
          "np_nonzero",
          "np_where_1",
          "np_where_3",
          "array_item",
          "array_itemset",
          "array_sum",
          "array_sum_axis_kws",
          "array_sum_dtype_kws",
          "array_sum_axis_dtype_kws",
          "array_sum_axis_dtype_pos",
          "array_sum_const_multi",
          "array_sum_const_axis_neg_one",
          "array_cumsum",
          "array_cumsum_kws",
          "array_real",
          "array_imag",
          "np_clip_no_out",
          "np_clip",
          "np_clip_kwargs",
          "array_clip",
          "array_clip_kwargs",
          "array_clip_no_out",
          "array_conj",
          "array_conjugate",
          "np_unique",
          "array_dot",
          "array_dot_chain",
          "array_ctor",
          "array_view",
          "array_astype",
          "setUp",
          "check_round_scalar",
          "test_round_scalar",
          "test_around_scalar",
          "check_round_array",
          "test_round_array",
          "test_around_array",
          "test_round__array",
          "test_around_bad_array",
          "test_around_bad_out",
          "test_array_view",
          "test_array_sliced_view",
          "test_array_astype",
          "test_array_tobytes",
          "check_np_frombuffer",
          "test_np_frombuffer",
          "test_np_frombuffer_dtype",
          "test_np_frombuffer_dtype_str",
          "test_np_frombuffer_dtype_non_const_str",
          "test_np_frombuffer_bad_buffer",
          "check_layout_dependent_func",
          "test_array_transpose",
          "test_array_T",
          "test_array_copy",
          "check_object_copy",
          "test_np_copy",
          "check_ascontiguousarray_scalar",
          "check_bad_array",
          "test_np_asfortranarray",
          "test_np_ascontiguousarray",
          "check_np_frombuffer_allocated",
          "test_np_frombuffer_allocated",
          "test_np_frombuffer_allocated2",
          "check_nonzero",
          "test_array_nonzero",
          "test_np_nonzero",
          "test_np_where_1",
          "test_np_where_3",
          "test_np_where_3_broadcast_x_y_scalar",
          "test_np_where_3_broadcast_x_or_y_scalar",
          "test_np_where_numpy_basic",
          "test_np_where_numpy_ndim",
          "test_np_where_numpy_dtype_mix",
          "test_np_where_numpy_test_error",
          "test_np_where_invalid_inputs",
          "test_arange_1_arg",
          "test_arange_2_arg",
          "test_arange_3_arg",
          "test_arange_4_arg",
          "test_arange_throws",
          "test_arange_accuracy",
          "test_item",
          "test_itemset",
          "test_sum",
          "test_sum_axis_kws1",
          "test_sum_axis_kws2",
          "test_sum_dtype_kws",
          "test_sum_axis_dtype_kws",
          "test_sum_axis_dtype_pos_arg",
          "test_sum_1d_kws",
          "test_sum_const",
          "test_sum_exceptions",
          "test_sum_const_negative",
          "test_cumsum",
          "test_take",
          "test_fill",
          "test_real",
          "test_imag",
          "_lower_clip_result_test_util",
          "test_clip",
          "test_clip_array_min_max",
          "test_clip_bad_array",
          "test_clip_bad_min",
          "test_clip_bad_max",
          "test_clip_bad_out",
          "test_clip_no_broadcast",
          "test_conj",
          "test_unique",
          "test_array_dot",
          "test_array_ctor_with_dtype_arg",
          "test_frombuffer_offset",
          "test_frombuffer_count",
          "test_frombuffer_count_negative_means_all",
          "test_frombuffer_offset_and_count",
          "test_frombuffer_invalid_offset",
          "test_frombuffer_invalid_count",
          "test_identity",
          "check_round",
          "check_types",
          "run",
          "check",
          "check_err",
          "check_err_noncontig_last_axis",
          "check_err_0d",
          "check_err_smaller_dtype",
          "check_err_larger_dtype",
          "run",
          "check",
          "check",
          "func",
          "func",
          "check_arr",
          "check_obj",
          "check_scalar",
          "check",
          "fac",
          "check_arr",
          "fac",
          "check_arr",
          "check_scal",
          "check_ok",
          "a_variations",
          "check_ok",
          "array_permutations",
          "scalar_permutations",
          "check_ok",
          "check_ok",
          "foo",
          "check_ok",
          "check_err",
          "check_ok",
          "check_err",
          "foo",
          "check",
          "check",
          "lower_clip_result",
          "check",
          "check",
          "fixup_signed_zero",
          "foo",
          "check_ok",
          "check_ok"
        ],
        "classes": [
          "TestArrayMethods",
          "TestArrayComparisons"
        ],
        "num_lines": 1910
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_conditions_as_predicates.py": {
        "functions": [
          "test_scalars",
          "test_typed_list",
          "test_reflected_list",
          "test_reflected_set",
          "test_typed_dict",
          "test_arrays",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestConditionsAsPredicates"
        ],
        "num_lines": 200
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_func_interface.py": {
        "functions": [
          "test_jit_function_docstring",
          "test_jit_function_name",
          "test_jit_function_module",
          "test_jit_function_code_object",
          "add",
          "add",
          "add",
          "add"
        ],
        "classes": [
          "TestFuncInterface"
        ],
        "num_lines": 43
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_gdb_dwarf.py": {
        "functions": [
          "_gdb_has_numpy",
          "_subprocess_test_runner",
          "test_basic",
          "test_array_arg",
          "test_conditional_breakpoint",
          "test_break_on_symbol",
          "test_break_on_symbol_version",
          "test_pretty_print",
          "setUp",
          "tearDown",
          "get_gdb_repr",
          "check",
          "test_np_array_printer_simple_numeric_types",
          "test_np_array_printer_simple_numeric_types_strided",
          "test_np_array_printer_simple_structured_dtype",
          "test_np_array_printer_chr_array",
          "test_np_array_printer_unichr_structured_dtype",
          "test_np_array_printer_nested_array_structured_dtype",
          "read_memory",
          "__init__",
          "type",
          "range",
          "__init__",
          "fields",
          "__init__",
          "type",
          "__getitem__",
          "__init__",
          "__getitem__",
          "data",
          "itemsize",
          "shape",
          "strides",
          "type"
        ],
        "classes": [
          "TestGDBDwarf",
          "TestGDBPrettyPrinterLogic",
          "SelectedInferior",
          "DISubrange",
          "DW_TAG_array_type",
          "DIDerivedType_tuple",
          "DICompositeType_Array"
        ],
        "num_lines": 261
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_event.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_recording_listener",
          "test_compiler_lock_event",
          "test_llvm_lock_event",
          "test_run_pass_event",
          "test_install_listener",
          "test_global_register",
          "test_lifted_dispatcher",
          "test_timing_properties",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "get_timers",
          "on_start",
          "on_end",
          "on_start",
          "on_end"
        ],
        "classes": [
          "TestEvent",
          "MyListener",
          "MyListener"
        ],
        "num_lines": 218
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_enums.py": {
        "functions": [
          "compare_usecase",
          "getattr_usecase",
          "getitem_usecase",
          "identity_usecase",
          "make_constant_usecase",
          "return_usecase",
          "int_coerce_usecase",
          "int_cast_usecase",
          "vectorize_usecase",
          "constant_usecase",
          "test_compare",
          "test_return",
          "check_constant_usecase",
          "test_constant",
          "test_identity",
          "test_int_coerce",
          "test_int_cast",
          "test_vectorize",
          "test_hash",
          "test_int_shape_cast",
          "pyfun",
          "pyfun_empty",
          "pyfun_zeros",
          "pyfun_ones"
        ],
        "classes": [
          "BaseEnumTest",
          "TestEnum",
          "TestIntEnum"
        ],
        "num_lines": 181
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_profiler.py": {
        "functions": [
          "generate_standard_dot_case",
          "generate_raising_dot_case",
          "np_dot",
          "dot",
          "raising_dot",
          "call_raising_dot",
          "check_profiler_dot",
          "test_profiler",
          "test_profiler_for_raising_function",
          "test_profiler_np_dot",
          "test_issue_3229",
          "check_stats_for_key"
        ],
        "classes": [
          "TestProfiler"
        ],
        "num_lines": 142
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_numpyadapt.py": {
        "functions": [
          "test_array_adaptor"
        ],
        "classes": [
          "ArrayStruct3D",
          "TestArrayAdaptor"
        ],
        "num_lines": 43
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_mixed_tuple_unroller.py": {
        "functions": [
          "capture",
          "check",
          "test_homogeneous_literal",
          "test_heterogeneous_literal",
          "test_non_literal",
          "__init__",
          "run_pass",
          "get_pipeline",
          "test_simple_loop_in_depth",
          "test_transform_scope",
          "test_influence_of_typed_transform",
          "test_influence_of_typed_transform_literal_unroll",
          "test_lots_of_loops",
          "test_inlined_loops",
          "test_01",
          "test_02",
          "test_03",
          "test_04",
          "test_05",
          "test_06",
          "test_07",
          "test_08",
          "test_09",
          "test_10",
          "test_11",
          "test_11a",
          "test_12",
          "test_13",
          "test_14",
          "test_15",
          "test_16",
          "test_17",
          "test_18",
          "test_19",
          "test_20",
          "test_21",
          "test_22",
          "test_23",
          "test_24",
          "test_25",
          "test_26",
          "test_27",
          "test_28",
          "test_29",
          "test_30",
          "test_31",
          "test_32",
          "test_33",
          "test_34",
          "test_01",
          "test_02",
          "test_03",
          "test_04",
          "test_05",
          "test_06",
          "test_7",
          "test_8",
          "test_9",
          "test_10",
          "test_11",
          "test_12",
          "test_13",
          "test_14",
          "test_invalid_use_of_unroller",
          "test_non_constant_list",
          "test_literally_constant_list",
          "test_inlined_unroll_list",
          "test_unroll_tuple_arg",
          "test_unroll_tuple_arg2",
          "test_unroll_tuple_alias",
          "test_unroll_tuple_nested",
          "test_unroll_tuple_of_dict",
          "test_unroll_named_tuple",
          "test_unroll_named_tuple_arg",
          "test_unroll_named_unituple",
          "test_unroll_named_unituple_arg",
          "test_unroll_global_tuple",
          "test_unroll_freevar_tuple",
          "test_unroll_function_tuple",
          "test_unroll_indexing_list",
          "test_unroller_as_freevar",
          "test_unroll_with_non_conformant_loops_present",
          "test_literal_unroll_legalize_var_names01",
          "test_literal_unroll_legalize_var_names02",
          "define_pipelines",
          "test_literal_unroll_not_invoked",
          "test_literal_unroll_is_invoked",
          "test_literal_unroll_is_invoked_via_alias",
          "test_literal_unroll_assess_empty_function",
          "test_literal_unroll_not_in_globals",
          "test_literal_unroll_globals_and_locals",
          "foo",
          "foo",
          "foo",
          "get_info",
          "compare_cfg",
          "find_getX",
          "get_info",
          "compare_cfg",
          "find_getX",
          "get_info",
          "compare_cfg",
          "find_getX",
          "get_info",
          "compare_cfg",
          "find_getX",
          "get_info",
          "compare_cfg",
          "get_info",
          "compare_cfg",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "gen",
          "foo",
          "func1",
          "func2",
          "func3",
          "dt",
          "ol_dt",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "dt",
          "ol_dt",
          "foo",
          "dt",
          "ol_dt",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "gen",
          "foo",
          "consumer",
          "get",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "dt",
          "ol_dt",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "a",
          "b",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "__init__",
          "run_pass",
          "add_pass",
          "foo",
          "foo",
          "foo",
          "foo",
          "define_pipelines",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "impl",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "foo",
          "bar",
          "gen",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "TestLiteralTupleInterpretation",
          "ResetTypeInfo",
          "TestLoopCanonicalisation",
          "TestMixedTupleUnroll",
          "TestConstListUnroll",
          "TestMore",
          "CapturingCompiler",
          "TestLiteralUnrollPassTriggering",
          "ResultCapturer",
          "NewCompiler"
        ],
        "num_lines": 2047
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_stencils.py": {
        "functions": [
          "stencil1_kernel",
          "stencil2_kernel",
          "stencil3_kernel",
          "stencil_multiple_input_kernel",
          "stencil_multiple_input_kernel_var",
          "stencil_multiple_input_mixed_types_2d",
          "stencil_with_standard_indexing_1d",
          "stencil_with_standard_indexing_2d",
          "addone_njit",
          "addone_pjit",
          "__init__",
          "_compile_this",
          "compile_parallel",
          "compile_njit",
          "compile_all",
          "check",
          "__init__",
          "test_stencil1",
          "test_stencil2",
          "test_stencil3",
          "test_stencil_standard_indexing_1d",
          "test_stencil_standard_indexing_2d",
          "test_stencil_multiple_inputs",
          "test_stencil_mixed_types",
          "test_stencil_call",
          "test_stencil_call_1D",
          "test_stencil_call_const",
          "test_stencil_parallel_off",
          "test_stencil_nested1",
          "test_out_kwarg_w_cval",
          "test_out_kwarg_w_cval_np_attr",
          "__init__",
          "check_against_expected",
          "check_exceptions",
          "exception_dict",
          "check_stencil_arrays",
          "test_basic00",
          "test_basic01",
          "test_basic02",
          "test_basic03",
          "test_basic04",
          "test_basic05",
          "test_basic06",
          "test_basic07",
          "test_basic08",
          "test_basic09",
          "test_basic10",
          "test_basic11",
          "test_basic12",
          "test_basic13",
          "test_basic14",
          "test_basic14b",
          "test_basic15",
          "test_basic17",
          "test_basic18",
          "test_basic19",
          "test_basic20",
          "test_basic21",
          "test_basic22",
          "test_basic23",
          "test_basic23a",
          "test_basic24",
          "test_basic25",
          "test_basic26",
          "test_basic27",
          "test_basic28",
          "test_basic29",
          "test_basic30",
          "test_basic31",
          "test_basic31b",
          "test_basic31c",
          "test_basic32",
          "test_basic33",
          "test_basic34",
          "test_basic35",
          "test_basic36",
          "test_basic37",
          "test_basic38",
          "test_basic39",
          "test_basic40",
          "test_basic41",
          "test_basic42",
          "test_basic43",
          "test_basic44",
          "test_basic45",
          "test_basic46",
          "test_basic47",
          "test_basic48",
          "test_basic49",
          "test_basic50",
          "test_basic51",
          "test_basic52",
          "test_basic53",
          "test_basic54",
          "test_basic55",
          "test_basic56",
          "test_basic57",
          "test_basic58",
          "test_basic59",
          "test_basic60",
          "test_basic61",
          "test_basic62",
          "test_basic63",
          "test_basic64",
          "test_basic65",
          "test_basic66",
          "test_basic67",
          "test_basic67b",
          "test_basic68",
          "test_basic69",
          "test_basic70",
          "test_basic71",
          "test_basic72",
          "test_basic73",
          "test_basic73b",
          "test_basic74",
          "test_basic75",
          "test_basic76",
          "test_basic77",
          "test_basic78",
          "test_basic78b",
          "test_basic79",
          "test_basic80",
          "test_basic81",
          "test_basic82",
          "test_basic83",
          "test_basic84",
          "test_basic85",
          "test_basic86",
          "test_basic87",
          "test_basic88",
          "test_basic89",
          "test_basic90",
          "test_basic91",
          "test_basic92",
          "test_basic93",
          "test_basic94",
          "test_basic95",
          "test_basic96",
          "test_basic97",
          "test_basic98",
          "test_with_out",
          "test_without_out",
          "test_impl_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_seq",
          "test_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_impl_seq",
          "test_seq",
          "test_impl1",
          "test_impl2",
          "test_impl_seq",
          "test_impl",
          "test_impl_seq",
          "test_impl1",
          "test_impl2",
          "test_impl3",
          "test_impl4",
          "test_impl_seq",
          "test_impl",
          "test_impl",
          "test_impl_seq",
          "kernel",
          "wrapped",
          "errorhandler",
          "errorhandler",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "__kernel",
          "kernel",
          "kernel",
          "__kernel",
          "kernel",
          "stencil2_kernel",
          "stencil2_kernel",
          "stencil2_kernel",
          "sf",
          "fun",
          "wrapped",
          "kernel",
          "wrapped",
          "wrap_stencil",
          "wrap_stencil",
          "kernel",
          "__kernel",
          "wrap_stencil",
          "wrap_stencil",
          "wrap_stencil",
          "wrap_stencil"
        ],
        "classes": [
          "TestStencilBase",
          "TestStencil",
          "TestManyStencils"
        ],
        "num_lines": 3223
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_annotations.py": {
        "functions": [
          "test_exercise_code_path",
          "test_exercise_code_path_with_lifted_loop",
          "test_html_output_with_lifted_loop",
          "test_pretty_print",
          "findpatloc",
          "getlines",
          "test_delete",
          "_lifetimes_impl",
          "test_delete_standard_lifetimes",
          "test_delete_extended_lifetimes",
          "foo",
          "bar",
          "foo",
          "udt",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestAnnotation",
          "TestTypeAnnotation"
        ],
        "num_lines": 252
      },
      "/tmp/cs-hpc-demo-1/numba/tests/cache_usecases.py": {
        "functions": [
          "simple_usecase",
          "simple_usecase_caller",
          "add_usecase",
          "add_objmode_usecase",
          "add_nocache_usecase",
          "inner",
          "outer",
          "outer_uncached",
          "looplifted",
          "use_c_sin",
          "use_c_sin_nest1",
          "use_c_sin_nest2",
          "ambiguous_function",
          "ambiguous_function",
          "make_closure",
          "use_big_array",
          "record_return",
          "first_class_function_mul",
          "first_class_function_add",
          "first_class_function_usecase",
          "self_test",
          "parfor_usecase",
          "closure",
          "check_module"
        ],
        "classes": [
          "_TestModule"
        ],
        "num_lines": 172
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_sysinfo.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_has_safe_keys",
          "test_safe_content_type",
          "test_has_no_error",
          "test_display_empty_info",
          "setUp",
          "tearDown",
          "test_has_all_data",
          "test_has_correct_values",
          "test_cpus_list",
          "setUp",
          "tearDown",
          "test_has_all_data",
          "setUp",
          "test_has_all_data",
          "test_content_type"
        ],
        "classes": [
          "TestSysInfo",
          "TestSysInfoWithPsutil",
          "TestSysInfoWithoutPsutil",
          "TestPlatformSpecificInfo"
        ],
        "num_lines": 189
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dataflow.py": {
        "functions": [
          "assignments",
          "assignments2",
          "var_propagate1",
          "var_propagate2",
          "var_propagate3",
          "var_propagate4",
          "chained_compare",
          "stack_effect_error",
          "for_break",
          "var_swapping",
          "test_assignments",
          "test_assignments2",
          "run_propagate_func",
          "test_var_propagate1",
          "test_var_propagate2",
          "test_var_propagate3",
          "test_var_propagate4",
          "test_chained_compare",
          "test_chained_compare_npm",
          "test_stack_effect_error",
          "test_stack_effect_error_npm",
          "test_var_swapping",
          "test_var_swapping_npm",
          "test_for_break",
          "test_for_break_npm"
        ],
        "classes": [
          "TestDataFlow"
        ],
        "num_lines": 170
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_doctest.py": {
        "functions": [
          "test_basic_decorators"
        ],
        "classes": [
          "TestDocTest"
        ],
        "num_lines": 28
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_tuples.py": {
        "functions": [
          "tuple_return_usecase",
          "tuple_first",
          "tuple_second",
          "tuple_index",
          "tuple_index_static",
          "tuple_slice2",
          "tuple_slice3",
          "len_usecase",
          "add_usecase",
          "eq_usecase",
          "ne_usecase",
          "gt_usecase",
          "ge_usecase",
          "lt_usecase",
          "le_usecase",
          "in_usecase",
          "bool_usecase",
          "getattr_usecase",
          "make_point",
          "make_point_kws",
          "make_point_nrt",
          "type_usecase",
          "identity",
          "index_method_usecase",
          "tuple_unpack_static_getitem_err",
          "test_tuple_length_error",
          "test_namedtuple_types_exception",
          "test_tuple_types_exception",
          "test_array_tuple",
          "test_scalar_tuple",
          "test_hetero_tuple",
          "test_unituple",
          "test_hetero_tuple",
          "test_size_mismatch",
          "test_len",
          "test_index_literal",
          "test_index",
          "test_in",
          "check_slice",
          "test_slice2",
          "test_slice3",
          "test_bool",
          "test_add",
          "_test_compare",
          "test_eq",
          "test_ne",
          "test_gt",
          "test_ge",
          "test_lt",
          "test_le",
          "test_unpack",
          "test_len",
          "test_index",
          "test_bool",
          "_test_compare",
          "test_eq",
          "test_ne",
          "test_gt",
          "test_ge",
          "test_lt",
          "test_le",
          "test_getattr",
          "test_construct",
          "test_type",
          "test_literal_unification",
          "test_string_literal_in_ctor",
          "test_dispatcher_mistreat",
          "test_tuple_add",
          "test_return",
          "check_conversion",
          "test_conversions",
          "test_index",
          "test_build_unpack",
          "test_build_unpack_assign_like",
          "test_build_unpack_fail_on_list_assign_like",
          "test_build_unpack_more",
          "test_build_unpack_call",
          "test_build_unpack_call_more",
          "test_tuple_constructor",
          "test_unpack_with_predicate_fails",
          "test_build_unpack_with_calls_in_unpack",
          "test_build_unpack_complicated",
          "eattuple",
          "pyfunc",
          "eq",
          "check",
          "check",
          "check",
          "eq",
          "check",
          "Data1",
          "call",
          "foo",
          "foo",
          "pyfunc",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "foo",
          "check",
          "check",
          "inner",
          "inner",
          "pyfunc",
          "pyfunc"
        ],
        "classes": [
          "TestTupleLengthError",
          "TestTupleTypeNotIterable",
          "TestTupleReturn",
          "TestTuplePassing",
          "TestOperations",
          "TestNamedTuple",
          "TestTupleNRT",
          "TestNamedTupleNRT",
          "TestConversions",
          "TestMethods",
          "TestTupleBuild"
        ],
        "num_lines": 764
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_svml.py": {
        "functions": [
          "func_patterns",
          "usecase_name",
          "combo_svml_usecase",
          "math_sin_scalar",
          "math_sin_loop",
          "mp_runner",
          "_inject_test",
          "autogenerate",
          "compile",
          "copy_args",
          "check_result",
          "check_asm",
          "check",
          "check_svml_presence",
          "test_scalar_context_asm",
          "test_scalar_context_result",
          "test_svml_asm",
          "test_svml_result",
          "test_svml_disabled",
          "test_svml_working_in_non_isolated_context",
          "run_template",
          "test_runner",
          "math_sin_loop",
          "impl"
        ],
        "classes": [
          "TestSVMLGeneration",
          "TestSVML"
        ],
        "num_lines": 411
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_flow_control.py": {
        "functions": [
          "for_loop_usecase1",
          "for_loop_usecase2",
          "for_loop_usecase3",
          "for_loop_usecase4",
          "for_loop_usecase5",
          "for_loop_usecase6",
          "for_loop_usecase7",
          "for_loop_usecase8",
          "for_loop_usecase9",
          "for_loop_usecase10",
          "while_loop_usecase1",
          "while_loop_usecase2",
          "while_loop_usecase3",
          "while_loop_usecase4",
          "while_loop_usecase5",
          "ifelse_usecase1",
          "ifelse_usecase2",
          "ifelse_usecase3",
          "ifelse_usecase4",
          "ternary_ifelse_usecase1",
          "double_infinite_loop",
          "try_except_usecase",
          "run_test",
          "test_for_loop1",
          "test_for_loop1_npm",
          "test_for_loop2",
          "test_for_loop2_npm",
          "test_for_loop3",
          "test_for_loop3_npm",
          "test_for_loop4",
          "test_for_loop4_npm",
          "test_for_loop5",
          "test_for_loop5_npm",
          "test_for_loop6",
          "test_for_loop6_npm",
          "test_for_loop7",
          "test_for_loop7_npm",
          "test_for_loop8",
          "test_for_loop8_npm",
          "test_for_loop9",
          "test_for_loop9_npm",
          "test_for_loop10",
          "test_for_loop10_npm",
          "test_while_loop1",
          "test_while_loop1_npm",
          "test_while_loop2",
          "test_while_loop2_npm",
          "test_while_loop3",
          "test_while_loop3_npm",
          "test_while_loop4",
          "test_while_loop4_npm",
          "test_while_loop5",
          "test_while_loop5_npm",
          "test_ifelse1",
          "test_ifelse1_npm",
          "test_ifelse2",
          "test_ifelse2_npm",
          "test_ifelse3",
          "test_ifelse3_npm",
          "test_ifelse4",
          "test_ifelse4_npm",
          "test_ternary_ifelse1",
          "test_ternary_ifelse1_npm",
          "test_double_infinite_loop",
          "test_double_infinite_loop_npm",
          "from_adj_list",
          "loopless1",
          "loopless1_dead_nodes",
          "loopless2",
          "multiple_loops",
          "multiple_exits",
          "infinite_loop1",
          "infinite_loop2",
          "test_simple_properties",
          "test_exit_points",
          "test_dead_nodes",
          "test_descendents",
          "test_topo_order",
          "test_topo_sort",
          "check_dominators",
          "test_dominators_loopless",
          "test_dominators_loops",
          "test_post_dominators_loopless",
          "test_post_dominators_loops",
          "test_post_dominators_infinite_loops",
          "test_dominator_tree",
          "test_immediate_dominators",
          "test_dominance_frontier",
          "test_backbone_loopless",
          "test_backbone_loops",
          "test_loops",
          "test_loop_dfs_pathological",
          "test_equals",
          "cfa",
          "get_cfa_and_namedblocks",
          "_scan_namedblocks",
          "test_loop",
          "test_loop_nested_and_break",
          "test_if_else",
          "test_if_else_nested",
          "test_infinite_loop",
          "check_topo_sort",
          "eq_",
          "eq_",
          "check",
          "check",
          "check",
          "get_new",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestFlowControl",
          "TestCFGraph",
          "TestRealCodeDomFront"
        ],
        "num_lines": 1280
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_iterators.py": {
        "functions": [
          "array_iter",
          "array_iter_items",
          "array_view_iter",
          "array_flat",
          "array_flat_getitem",
          "array_flat_setitem",
          "array_flat_sum",
          "array_flat_len",
          "array_ndenumerate_sum",
          "np_ndindex_empty",
          "np_ndindex",
          "np_ndindex_array",
          "np_nditer1",
          "np_nditer2",
          "np_nditer3",
          "iter_next",
          "array_flat_premature_free",
          "array_ndenumerate_premature_free",
          "setUp",
          "check_array_iter_1d",
          "check_array_iter_items",
          "check_array_view_iter",
          "check_array_flat",
          "check_array_unary",
          "check_array_ndenumerate_sum",
          "test_array_iter",
          "test_array_iter_yielded_order",
          "test_array_view_iter",
          "test_array_flat_3d",
          "test_array_flat_empty",
          "test_array_flat_getitem",
          "test_array_flat_setitem",
          "test_array_flat_len",
          "test_array_flat_premature_free",
          "test_array_ndenumerate_2d",
          "test_array_ndenumerate_empty",
          "test_array_ndenumerate_premature_free",
          "test_np_ndindex",
          "test_np_ndindex_array",
          "test_np_ndindex_empty",
          "test_iter_next",
          "inputs",
          "basic_inputs",
          "check_result",
          "test_nditer1",
          "test_nditer2",
          "test_nditer3",
          "test_errors",
          "foo",
          "flag_check",
          "check",
          "check",
          "check",
          "check",
          "check",
          "check_incompatible"
        ],
        "classes": [
          "TestArrayIterators",
          "TestNdIter"
        ],
        "num_lines": 555
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_buffer_protocol.py": {
        "functions": [
          "len_usecase",
          "getitem_usecase",
          "getslice_usecase",
          "setitem_usecase",
          "iter_usecase",
          "attrgetter",
          "_arrays",
          "_memoryviews",
          "_readonlies",
          "_check_unary",
          "check_len",
          "check_iter",
          "check_getitem",
          "check_setitem",
          "check_getslice",
          "test_len",
          "test_getitem",
          "test_getslice",
          "test_setitem",
          "test_iter",
          "_arrays",
          "test_ndim",
          "test_shape",
          "test_strides",
          "test_itemsize",
          "test_nbytes",
          "test_readonly",
          "test_contiguous",
          "yield_indices"
        ],
        "classes": [
          "TestBufferProtocol",
          "TestMemoryView"
        ],
        "num_lines": 289
      },
      "/tmp/cs-hpc-demo-1/numba/tests/inlining_usecases.py": {
        "functions": [
          "bar",
          "baz_factory",
          "baz",
          "baz_ol",
          "bop_factory",
          "inner",
          "more",
          "outer_simple",
          "outer_multiple",
          "__dummy__",
          "baz",
          "impl",
          "bop",
          "baz",
          "impl"
        ],
        "classes": [],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_casting.py": {
        "functions": [
          "float_to_int",
          "int_to_float",
          "float_to_unsigned",
          "float_to_complex",
          "numpy_scalar_cast_error",
          "test_float_to_int",
          "test_int_to_float",
          "test_float_to_unsigned",
          "test_float_to_complex",
          "test_array_to_array",
          "test_0darrayT_to_T",
          "test_array_to_scalar",
          "test_optional_to_optional",
          "inner",
          "driver",
          "inner",
          "foo"
        ],
        "classes": [
          "TestCasting"
        ],
        "num_lines": 137
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_lists.py": {
        "functions": [
          "noop",
          "unbox_usecase",
          "unbox_usecase2",
          "unbox_usecase3",
          "unbox_usecase4",
          "create_list",
          "create_nested_list",
          "list_comprehension1",
          "list_comprehension2",
          "list_comprehension3",
          "list_comprehension4",
          "list_comprehension5",
          "list_comprehension6",
          "list_constructor",
          "list_constructor_empty",
          "list_constructor_empty_but_typeable",
          "list_append",
          "list_append_heterogeneous",
          "list_extend",
          "list_extend_heterogeneous",
          "list_pop0",
          "list_pop1",
          "list_len",
          "list_getitem",
          "list_setitem",
          "list_getslice2",
          "list_getslice3",
          "list_setslice2",
          "list_setslice3",
          "list_setslice3_arbitrary",
          "list_delslice0",
          "list_delslice1",
          "list_delslice2",
          "list_clear",
          "list_copy",
          "list_iteration",
          "list_contains",
          "list_index1",
          "list_index2",
          "list_index3",
          "list_remove",
          "list_insert",
          "list_count",
          "list_reverse",
          "list_add",
          "list_add_heterogeneous",
          "list_add_inplace",
          "list_add_inplace_heterogeneous",
          "list_mul",
          "list_mul2",
          "list_mul_inplace",
          "list_bool",
          "eq_usecase",
          "ne_usecase",
          "gt_usecase",
          "ge_usecase",
          "lt_usecase",
          "le_usecase",
          "identity_usecase",
          "bool_list_usecase",
          "reflect_simple",
          "reflect_conditional",
          "reflect_exception",
          "reflect_dual",
          "expect_reflection_failure",
          "test_create_list",
          "test_create_nested_list",
          "check_unary_with_size",
          "test_constructor",
          "test_constructor_empty",
          "test_constructor_empty_but_typeable",
          "test_append",
          "test_append_heterogeneous",
          "test_extend",
          "test_extend_heterogeneous",
          "test_pop0",
          "test_pop1",
          "test_pop_errors",
          "test_insert",
          "test_len",
          "test_getitem",
          "test_setitem",
          "check_slicing2",
          "test_getslice2",
          "test_setslice2",
          "test_getslice3",
          "test_setslice3",
          "test_setslice3_resize",
          "test_delslice0",
          "test_delslice1",
          "test_delslice2",
          "test_invalid_slice",
          "test_iteration",
          "test_reverse",
          "test_contains",
          "check_index_result",
          "test_index1",
          "test_index2",
          "test_index3",
          "test_index_exception1",
          "test_index_exception2",
          "test_remove",
          "test_remove_error",
          "test_count",
          "test_clear",
          "test_copy",
          "check_add",
          "test_add",
          "test_add_heterogeneous",
          "test_add_inplace",
          "test_add_inplace_heterogeneous",
          "check_mul",
          "test_mul",
          "test_mul2",
          "test_mul_inplace",
          "test_mul_error",
          "test_bool",
          "test_list_passing",
          "_test_compare",
          "test_eq",
          "test_ne",
          "test_le",
          "test_lt",
          "test_ge",
          "test_gt",
          "test_identity",
          "test_bool_list",
          "assert_type_error",
          "check_unary",
          "test_numbers",
          "test_tuples",
          "test_list_inside_tuple",
          "test_list_of_tuples_inside_tuple",
          "test_errors",
          "check_reflection",
          "test_reflect_simple",
          "test_reflect_conditional",
          "test_reflect_exception",
          "test_reflect_same_list",
          "test_reflect_clean",
          "assert_list_element_precise_equal",
          "_check_element_equal",
          "test_reflect_passthru",
          "test_reflect_appended",
          "test_reflect_setitem",
          "test_reflect_popped",
          "test_reflect_insert",
          "test_append",
          "test_append_noret",
          "test_reassign_refct",
          "test_get_slice",
          "test_set_slice",
          "test_pop",
          "test_pop_loc",
          "test_del_range",
          "test_list_of_list",
          "wrapped",
          "compile_and_test",
          "test_returning_list_of_list",
          "test_heterogeneous_list_error",
          "test_list_of_list_reflected",
          "test_heterogeneous_list",
          "test_c01",
          "test_c02",
          "test_c03",
          "test_c04",
          "test_c05",
          "test_c06",
          "test_c07",
          "test_c08",
          "test_c09",
          "test_c10",
          "test_c11",
          "test_c12",
          "__init__",
          "__init__",
          "more",
          "make_jitclass_element",
          "make_jitclass_container",
          "assert_list_element_with_tester",
          "test_jitclass_instance_elements",
          "test_jitclass_containing_list",
          "test_homogeneous_and_literal",
          "test_heterogeneous_but_castable_to_homogeneous",
          "test_mutation_not_carried",
          "test_mutation_not_carried_single_function",
          "test_list_of_list_ctor",
          "test_basic_compile",
          "test_literal_value_passthrough",
          "test_literal_value_involved_passthrough",
          "test_mutation_failure",
          "test_count",
          "test_len",
          "test_contains",
          "test_getitem",
          "test_staticgetitem",
          "test_staticgetitem_slice",
          "test_setitem",
          "test_unify",
          "test_not_unify",
          "test_index",
          "test_copy",
          "test_tuple_not_in_mro",
          "inner",
          "outer",
          "eq",
          "check",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "bar",
          "pyfunc",
          "eq",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "nop",
          "bar",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "staticsetitem",
          "delitem",
          "append",
          "extend",
          "insert",
          "remove",
          "pop",
          "clear",
          "sort",
          "reverse",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "baz",
          "bar",
          "ol_bar",
          "foo",
          "check_same",
          "impl"
        ],
        "classes": [
          "TestLists",
          "TestUnboxing",
          "TestListReflection",
          "ManagedListTestCase",
          "TestListManagedElements",
          "TestListOfList",
          "Item",
          "Container",
          "TestListAndJitClasses",
          "TestListInitialValues",
          "TestLiteralLists"
        ],
        "num_lines": 1836
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_blackscholes.py": {
        "functions": [
          "cnd_array",
          "cnd",
          "blackscholes_arrayexpr",
          "blackscholes_scalar",
          "randfloat",
          "test_array_expr",
          "test_scalar"
        ],
        "classes": [
          "TestBlackScholes"
        ],
        "num_lines": 125
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_analysis.py": {
        "functions": [
          "__init__",
          "test_insert_equiv",
          "test_intersect",
          "__init__",
          "run_pass",
          "mk_pipeline",
          "compile_to_ir",
          "compare_ir",
          "_compile_and_test",
          "_has_assertcall",
          "_has_shapecall",
          "_has_no_assertcall",
          "with_assert",
          "without_assert",
          "with_equiv",
          "without_equiv",
          "with_shapecall",
          "without_shapecall",
          "test_base_cases",
          "test_stencilcall",
          "test_slice",
          "test_numpy_calls",
          "test_misc",
          "test_global_namedtuple",
          "test_array_T_issue_3700",
          "test_slice_shape_issue_3380",
          "test_slice_dtype_issue_5056",
          "test_global_tuple",
          "test_analyze_op_call_interface",
          "test_array_analysis_extensions",
          "check",
          "check",
          "test_0",
          "test_1",
          "test_2",
          "test_3",
          "test_4",
          "test_5",
          "test_6",
          "test_7",
          "test_8",
          "test_9",
          "test_10",
          "test_11",
          "test_12",
          "test_tup_arg",
          "test_arr_in_tup",
          "test_namedtuple",
          "test_np_where_tup_return",
          "test_shape",
          "test_cond",
          "test_assert_1",
          "test_assert_2",
          "kernel_1",
          "test_1",
          "test_2",
          "kernel_2",
          "test_3",
          "test_1",
          "test_2",
          "test_3",
          "test_4",
          "test_5",
          "test_6",
          "test_7",
          "test_8",
          "test_9",
          "test_zeros",
          "test_0d_array",
          "test_ones",
          "test_empty",
          "test_eye",
          "test_identity",
          "test_diag",
          "test_array_like",
          "test_reshape",
          "test_transpose",
          "test_transpose_3d",
          "test_real_imag_attr",
          "test_random",
          "test_concatenate",
          "test_vsd_stack",
          "test_stack",
          "test_linspace",
          "test_dot",
          "test_broadcast",
          "test_global_tuple",
          "swap",
          "test_bug2537",
          "test_impl",
          "test_impl",
          "test_impl1",
          "test_impl2",
          "test_impl",
          "test_impl",
          "iface_stub",
          "testcode",
          "new_parfor",
          "f"
        ],
        "classes": [
          "ExampleClass3700",
          "TestEquivSet",
          "ArrayAnalysisPass",
          "ArrayAnalysisTester",
          "TestArrayAnalysis",
          "TestArrayAnalysisParallelRequired",
          "TestArrayAnalysisInterface"
        ],
        "num_lines": 1146
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_config.py": {
        "functions": [
          "setUp",
          "mock_cfg_location",
          "inject_mock_cfg",
          "get_settings",
          "create_config_effect",
          "test_config",
          "test_empty_config",
          "test_nocona_disables_avx",
          "check",
          "test_opt_max",
          "test_opt_3",
          "test_opt_0",
          "test_opt_default",
          "test_opt_invalid",
          "side_effect"
        ],
        "classes": [
          "TestConfig",
          "TestNumbaOptLevel"
        ],
        "num_lines": 218
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_serialize.py": {
        "functions": [
          "issue_7356",
          "check_main_class_reset_on_unpickle",
          "check_unpickle_dyn_class_new_proc",
          "_check_dyn_class",
          "run_with_protocols",
          "simulate_fresh_target",
          "check_call",
          "test_call_with_sig",
          "test_call_without_sig",
          "test_call_nopython",
          "test_call_nopython_fail",
          "test_call_objmode_with_global",
          "test_call_closure",
          "check_call_closure_with_globals",
          "test_call_closure_with_globals_nopython",
          "test_call_closure_with_globals_objmode",
          "test_call_closure_calling_other_function",
          "test_call_closure_calling_other_closure",
          "test_call_dyn_func",
          "test_call_dyn_func_objmode",
          "test_renamed_module",
          "test_other_process",
          "test_reuse",
          "test_imp_deprecation",
          "test_numba_unpickle",
          "test_dynamic_class_reset_on_unpickle",
          "test_main_class_reset_on_unpickle",
          "test_dynamic_class_reset_on_unpickle_new_proc",
          "test_dynamic_class_issue_7356",
          "check",
          "check_result",
          "mutator",
          "check"
        ],
        "classes": [
          "TestDispatcherPickling",
          "TestSerializationMisc",
          "TestCloudPickleIssues",
          "DynClass",
          "Klass",
          "Klass"
        ],
        "num_lines": 331
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_typedlist.py": {
        "functions": [
          "to_tl",
          "cmp",
          "test_basic",
          "test_list_extend_refines_on_unicode_type",
          "test_unsigned_access",
          "test_dtype",
          "test_dtype_raises_exception_on_untyped_list",
          "test_unsigned_prange",
          "test_compiled",
          "test_getitem_slice",
          "test_setitem_slice",
          "test_setitem_slice_value_error",
          "test_delitem_slice",
          "test_list_create_no_jit_using_empty_list",
          "test_list_create_no_jit_using_List",
          "test_catch_global_typed_list",
          "test_repr",
          "test_repr_long_list",
          "test_repr_long_list_ipython",
          "test_iter_mutates_self",
          "test_append_none",
          "test_len_none",
          "test_getitem_none",
          "test_setitem_none",
          "test_equals_none",
          "test_not_equals_none",
          "test_iter_none",
          "test_none_typed_method_fails",
          "test_allocation",
          "test_allocation_njit",
          "test_growth_and_shrinkage",
          "test_extend_other",
          "test_extend_self",
          "test_extend_tuple",
          "test_extend_single_value_container",
          "test_extend_empty_unrefined",
          "test_extend_empty_refiend",
          "_cmp_dance",
          "test_empty_vs_empty",
          "test_empty_vs_singleton",
          "test_singleton_vs_empty",
          "test_singleton_vs_singleton_equal",
          "test_singleton_vs_singleton_less_than",
          "test_singleton_vs_singleton_greater_than",
          "test_equal",
          "test_first_shorter",
          "test_second_shorter",
          "test_first_less_than",
          "test_first_greater_than",
          "test_equals_non_list",
          "test_simple_refine_append",
          "test_simple_refine_insert",
          "test_refine_extend_list",
          "test_refine_extend_set",
          "test_refine_list_extend_iter",
          "test_str_item",
          "test_str_item_refcount_replace",
          "test_dict_as_item_in_list",
          "test_dict_as_item_in_list_multi_refcount",
          "test_list_as_value_in_dict",
          "test_list_as_item_in_list",
          "test_array_as_item_in_list",
          "test_array_pop_from_single_value_list",
          "test_5264",
          "test_jitclass_as_item_in_list",
          "test_4960",
          "test_storage_model_mismatch",
          "test_equals_on_list_with_dict_for_equal_lists",
          "test_equals_on_list_with_dict_for_unequal_dicts",
          "test_equals_on_list_with_dict_for_unequal_lists",
          "setUp",
          "make",
          "make_both",
          "test_sort_no_args",
          "test_sort_all_args",
          "test_sort_dispatcher_key",
          "test_sort_in_jit_w_lambda_key",
          "test_sort_in_jit_w_global_key",
          "test_sort_on_arrays",
          "test_is_immutable",
          "test_make_immutable_is_immutable",
          "test_length_still_works_when_immutable",
          "test_getitem_still_works_when_immutable",
          "test_append_fails",
          "test_mutation_fails",
          "test_indexing_with_uint8",
          "test_simple_iterable_types",
          "test_unicode",
          "test_dict_iters",
          "test_ndarray_scalar",
          "test_ndarray_oned",
          "test_ndarray_twod",
          "test_exception_on_plain_int",
          "test_exception_on_inhomogeneous_tuple",
          "test_exception_on_too_many_args",
          "test_exception_on_kwargs",
          "foo",
          "foo",
          "foo",
          "producer",
          "consumer",
          "setup",
          "setup",
          "run_repr_cmd",
          "foo",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "generate_function",
          "foo",
          "foo",
          "impl",
          "impl",
          "impl",
          "impl",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bag_equal",
          "foo",
          "udt",
          "udt",
          "udt",
          "udt",
          "keyfn",
          "udt",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "generate_function",
          "foo",
          "generate_function",
          "foo",
          "generate_function",
          "generate_expected",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "__init__",
          "size",
          "increment",
          "__init__"
        ],
        "classes": [
          "TestTypedList",
          "TestNoneType",
          "TestAllocation",
          "TestExtend",
          "TestComparisons",
          "TestListInferred",
          "TestListRefctTypes",
          "TestListSort",
          "TestImmutable",
          "TestGetItemIndexType",
          "TestListFromIter",
          "Bag",
          "Simple"
        ],
        "num_lines": 1689
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_boundscheck.py": {
        "functions": [
          "basic_array_access",
          "slice_array_access",
          "fancy_array_access",
          "fancy_array_modify",
          "test_basic_array_boundscheck",
          "test_slice_array_boundscheck",
          "test_fancy_indexing_boundscheck",
          "test_no_cuda_boundscheck",
          "test_basic_array_boundscheck",
          "test_slice_array_boundscheck",
          "test_fancy_indexing_boundscheck",
          "test_fancy_indexing_with_modification_boundscheck",
          "setUp",
          "test_boundscheck_unset",
          "test_boundscheck_enabled",
          "test_boundscheck_disabled",
          "func3",
          "func2",
          "default",
          "off",
          "on",
          "func"
        ],
        "classes": [
          "TestBoundsCheckNoError",
          "TestNoCudaBoundsCheck",
          "TestBoundsCheckError",
          "TestBoundsEnvironmentVariable"
        ],
        "num_lines": 268
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_repr.py": {
        "functions": [
          "setUp",
          "check_repr",
          "test_types"
        ],
        "classes": [
          "TestRepr"
        ],
        "num_lines": 63
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_heapq.py": {
        "functions": [
          "heapify",
          "heappop",
          "heappush",
          "heappushpop",
          "heapreplace",
          "nsmallest",
          "nlargest",
          "setUp",
          "test_heapify_basic_sanity",
          "check_invariant",
          "test_push_pop",
          "test_heapify",
          "test_heapify_exceptions",
          "test_heappop_basic_sanity",
          "test_heappop_exceptions",
          "iterables",
          "test_heappush_basic",
          "test_heappush_exceptions",
          "test_nsmallest_basic",
          "test_nlargest_basic",
          "_assert_typing_error",
          "test_nsmallest_exceptions",
          "test_nlargest_exceptions",
          "test_heapreplace_basic",
          "test_heapreplace_exceptions",
          "heapiter",
          "test_nbest",
          "test_heapsort",
          "test_nsmallest",
          "test_nlargest",
          "test_nbest_with_pushpop",
          "test_heappushpop",
          "test_heappushpop_exceptions",
          "a_variations"
        ],
        "classes": [
          "_TestHeapq",
          "TestHeapqReflectedList",
          "TestHeapqTypedList"
        ],
        "num_lines": 484
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_iteration.py": {
        "functions": [
          "int_tuple_iter_usecase",
          "float_tuple_iter_usecase",
          "tuple_tuple_iter_usecase",
          "enumerate_nested_tuple_usecase",
          "nested_enumerate_usecase",
          "enumerate_array_usecase",
          "scalar_iter_usecase",
          "record_iter_usecase",
          "record_iter_mutate_usecase",
          "run_nullary_func",
          "test_int_tuple_iter",
          "test_int_tuple_iter_npm",
          "test_float_tuple_iter",
          "test_float_tuple_iter_npm",
          "test_tuple_tuple_iter",
          "test_tuple_tuple_iter_npm",
          "test_enumerate_nested_tuple",
          "test_enumerate_nested_tuple_npm",
          "test_nested_enumerate",
          "test_nested_enumerate_npm",
          "test_enumerate_refct",
          "run_array_1d",
          "test_array_1d_float",
          "test_array_1d_float_npm",
          "test_array_1d_complex",
          "test_array_1d_complex_npm",
          "test_array_1d_record",
          "test_array_1d_record_npm",
          "test_array_1d_record_mutate_npm",
          "test_array_1d_record_mutate",
          "test_array_0d_raises",
          "test_tuple_iter_issue1504",
          "test_tuple_of_arrays_iter",
          "test_zip_with_arrays",
          "foo",
          "bar",
          "bar",
          "foo"
        ],
        "classes": [
          "IterationTest",
          "TestIterationRefct"
        ],
        "num_lines": 241
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_fastmath.py": {
        "functions": [
          "test_jit",
          "test_jit_subset_behaviour",
          "test_jit_subset_code",
          "test_jit_subset_errors",
          "test_vectorize",
          "test_guvectorize",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestFastMath"
        ],
        "num_lines": 123
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_numconv.py": {
        "functions": [
          "template",
          "closure",
          "automatic_populate",
          "cast"
        ],
        "classes": [
          "TestNumberConversion"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/tests/threading_backend_usecases.py": {
        "functions": [
          "sigterm_handler",
          "busy_func_inner",
          "busy_func"
        ],
        "classes": [],
        "num_lines": 29
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_runtests.py": {
        "functions": [
          "get_testsuite_listing",
          "check_listing_prefix",
          "check_testsuite_size",
          "check_all",
          "_get_numba_tests_from_listing",
          "test_default",
          "test_all",
          "test_cuda",
          "test_cuda_submodules",
          "test_module",
          "test_subpackage",
          "test_random",
          "test_include_exclude_tags",
          "test_check_shard",
          "test_check_sharding_equivalent",
          "test_gitdiff",
          "test_azure_config",
          "test_no_compilation_on_list",
          "get_count"
        ],
        "classes": [
          "TestCase"
        ],
        "num_lines": 284
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_errormodels.py": {
        "functions": [
          "test_div_by_zero_python",
          "test_div_by_zero_numpy",
          "model_python",
          "model_numpy"
        ],
        "classes": [
          "TestErrorModel"
        ],
        "num_lines": 28
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_caching.py": {
        "functions": [
          "check_access_is_preventable",
          "constant_unicode_cache",
          "check_constant_unicode_cache",
          "dict_cache",
          "check_dict_cache",
          "generator_cache",
          "check_generator_cache",
          "omitted_child_test_wrapper",
          "cache_file_collision_tester",
          "run_test",
          "test_constant_unicode_cache",
          "test_dict_cache",
          "test_generator_cache",
          "test_omitted",
          "setUp",
          "tearDown",
          "import_module",
          "cache_contents",
          "get_cache_mtimes",
          "check_pycache",
          "dummy_test",
          "run_in_separate_process",
          "check_hits",
          "test_caching",
          "test_caching_nrt_pruned",
          "test_inner_then_outer",
          "test_outer_then_inner",
          "test_no_caching",
          "test_looplifted",
          "test_big_array",
          "test_ctypes",
          "test_closure",
          "test_first_class_function",
          "test_cache_reuse",
          "test_cache_invalidate",
          "test_recompile",
          "test_same_names",
          "test_frozen",
          "_test_pycache_fallback",
          "test_non_creatable_pycache",
          "test_non_writable_pycache",
          "test_ipython",
          "test_ipykernel",
          "setUp",
          "tearDown",
          "test_zip_caching",
          "test_zip_locator_creation",
          "test_zip_locator_non_zip_path",
          "setUp",
          "tearDown",
          "test_caching",
          "check_later_mtimes",
          "test_user_set_cpu_name",
          "test_user_set_cpu_features",
          "test_multiprocessing",
          "setUp",
          "tearDown",
          "import_bar1",
          "import_bar2",
          "test_file_location",
          "test_no_collision",
          "setUp",
          "tearDown",
          "test_caching_mutliple_files_with_signature",
          "run_in_separate_process",
          "check_module",
          "test_caching",
          "test_locators_env_override_unknown",
          "test_locators_env_override_single",
          "test_locators_env_override_custom",
          "test_locators_env_override_list",
          "test_default_locators",
          "test_source_stamp_precision",
          "test_timestamp_precision_on_fs",
          "test",
          "execute_with_input",
          "execute_with_input",
          "mock_func",
          "mock_func",
          "mock_func",
          "mock_func",
          "mock_func",
          "mock_func",
          "mock_func"
        ],
        "classes": [
          "TestCaching",
          "BaseCacheTest",
          "DispatcherCacheUsecasesTest",
          "TestCache",
          "TestCacheZip",
          "TestCacheZipLib",
          "TestSequentialParForsCache",
          "TestCacheWithCpuSetting",
          "TestMultiprocessCache",
          "TestCacheFileCollision",
          "TestCacheMultipleFilesWithSignature",
          "TestCFuncCache",
          "TestLocator",
          "TestCacheLocatorEnvironmentIntegration",
          "TestInTreeCacheLocatorFsAgnostic"
        ],
        "num_lines": 1325
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_recarray_usecases.py": {
        "functions": [
          "usecase1",
          "usecase2",
          "usecase3",
          "usecase4",
          "usecase5",
          "setUp",
          "test_usecase1",
          "_setup_usecase2to5",
          "_test_usecase2to5",
          "test_usecase2",
          "test_usecase3",
          "test_usecase4",
          "test_usecase5"
        ],
        "classes": [
          "TestRecordUsecase"
        ],
        "num_lines": 146
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_target_overloadselector.py": {
        "functions": [
          "test_select_and_sort_1",
          "test_select_and_sort_2",
          "test_match",
          "test_ambiguous_detection",
          "test_subclass_specialization",
          "test_cache",
          "setUpClass",
          "create_overload_selector",
          "test_ambiguous_casts",
          "test_ambiguous_functions"
        ],
        "classes": [
          "TestOverloadSelector",
          "TestAmbiguousOverloads"
        ],
        "num_lines": 148
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_compile_cache.py": {
        "functions": [
          "_context_builder_sig_args",
          "test_cache",
          "test_closures",
          "test_error_model",
          "times2",
          "times3",
          "make_closure",
          "inv",
          "compile_inv",
          "f"
        ],
        "classes": [
          "TestCompileCache"
        ],
        "num_lines": 153
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_gdb_bindings.py": {
        "functions": [
          "impl_gdb_call",
          "impl_gdb_call_w_bp",
          "impl_gdb_split_init_and_break_w_parallel",
          "test_gdb_cmd_lang_cpython_quick_impl",
          "test_gdb_cmd_lang_nopython_quick_impl",
          "test_gdb_cmd_lang_objmode_quick_impl",
          "test_gdb_split_init_and_break_cpython_impl",
          "test_gdb_split_init_and_break_nopython_impl",
          "test_gdb_split_init_and_break_objmode_impl",
          "test_gdb_split_init_and_break_w_parallel_cpython_impl",
          "test_gdb_split_init_and_break_w_parallel_nopython_impl",
          "test_gdb_split_init_and_break_w_parallel_objmode_impl",
          "run_cmd",
          "run_test_in_separate_process",
          "_inject",
          "generate",
          "test_call_gdb_twice",
          "test_call_gdb",
          "kill",
          "test_template",
          "gen",
          "check",
          "use_globals",
          "nop_compiler",
          "impl",
          "python_func"
        ],
        "classes": [
          "TestGdbBindImpls",
          "TestGdbBinding",
          "TestGdbMisc",
          "TestGdbExceptions"
        ],
        "num_lines": 277
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_reductions.py": {
        "functions": [
          "array_all",
          "array_all_global",
          "array_any",
          "array_any_global",
          "array_cumprod",
          "array_cumprod_global",
          "array_nancumprod",
          "array_cumsum",
          "array_cumsum_global",
          "array_nancumsum",
          "array_sum",
          "array_sum_global",
          "array_prod",
          "array_prod_global",
          "array_mean",
          "array_mean_global",
          "array_var",
          "array_var_global",
          "array_std",
          "array_std_global",
          "array_min",
          "array_min_global",
          "array_amin",
          "array_max",
          "array_max_global",
          "array_amax",
          "array_argmin",
          "array_argmin_global",
          "array_argmax",
          "array_argmax_global",
          "array_median_global",
          "array_nanmin",
          "array_nanmax",
          "array_nanmean",
          "array_nansum",
          "array_nanprod",
          "array_nanstd",
          "array_nanvar",
          "array_nanmedian_global",
          "array_percentile_global",
          "array_nanpercentile_global",
          "array_ptp_global",
          "array_ptp",
          "array_quantile_global",
          "array_nanquantile_global",
          "base_test_arrays",
          "full_test_arrays",
          "run_comparative",
          "setUp",
          "check_reduction_basic",
          "test_all_basic",
          "test_any_basic",
          "test_sum_basic",
          "test_mean_basic",
          "test_var_basic",
          "test_std_basic",
          "test_min_basic",
          "test_max_basic",
          "test_argmin_basic",
          "test_argmax_basic",
          "test_nanmin_basic",
          "test_nanmax_basic",
          "test_nanmean_basic",
          "test_nansum_basic",
          "test_nanprod_basic",
          "test_nanstd_basic",
          "test_nanvar_basic",
          "check_median_basic",
          "_array_variations",
          "test_median_basic",
          "check_percentile_and_quantile",
          "check_percentile_edge_cases",
          "check_percentile_exceptions",
          "check_quantile_exceptions",
          "test_percentile_basic",
          "test_nanpercentile_basic",
          "test_quantile_basic",
          "test_nanquantile_basic",
          "test_nanmedian_basic",
          "test_array_sum_global",
          "test_array_prod_int_1d",
          "test_array_prod_float_1d",
          "test_array_prod_global",
          "check_cumulative",
          "test_array_cumsum",
          "test_array_cumsum_global",
          "test_array_cumprod",
          "test_array_cumprod_global",
          "check_aggregation_magnitude",
          "test_sum_magnitude",
          "test_cumsum_magnitude",
          "test_nancumsum_magnitude",
          "test_prod_magnitude",
          "test_cumprod_magnitude",
          "test_nancumprod_magnitude",
          "test_mean_magnitude",
          "test_var_magnitude",
          "test_std_magnitude",
          "_do_check_nptimedelta",
          "check_npdatetime",
          "check_nptimedelta",
          "test_min_npdatetime",
          "test_max_npdatetime",
          "test_argmin_npdatetime",
          "test_argmax_npdatetime",
          "test_median_npdatetime",
          "test_sum_npdatetime",
          "test_cumsum_npdatetime",
          "test_mean_npdatetime",
          "check_nan_cumulative",
          "test_nancumprod_basic",
          "test_nancumsum_basic",
          "test_ptp_basic",
          "test_ptp_method",
          "test_ptp_complex",
          "test_ptp_exceptions",
          "test_min_max_complex_basic",
          "test_nanmin_nanmax_complex_basic",
          "test_nanmin_nanmax_non_array_inputs",
          "test_argmax_axis_1d_2d_4d",
          "test_argmax_axis_out_of_range",
          "test_argmax_axis_must_be_integer",
          "test_argmax_method_axis",
          "test_argmax_return_type",
          "test_argmin_axis_1d_2d_4d",
          "test_argmin_axis_out_of_range",
          "test_argmin_axis_must_be_integer",
          "test_argmin_method_axis",
          "test_argmin_return_type",
          "install_generated_tests",
          "check_exception",
          "install",
          "factory",
          "factory",
          "check",
          "check",
          "check",
          "check",
          "check_odd",
          "check_even",
          "variations",
          "check",
          "check",
          "convert_to_float_and_check",
          "_array_combinations",
          "check_err",
          "check_err",
          "check",
          "_set_some_values_to_nan",
          "a_variations",
          "check",
          "a_variations",
          "check",
          "make_array",
          "check",
          "a_variations",
          "jitargmax",
          "assert_raises",
          "jitargmax",
          "argmax",
          "argmax",
          "jitargmin",
          "assert_raises",
          "jitargmin",
          "argmin",
          "argmin",
          "install_tests",
          "check",
          "check",
          "test_fn",
          "new_test_function"
        ],
        "classes": [
          "TestArrayReductions",
          "TestArrayReductionsExceptions"
        ],
        "num_lines": 1204
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dyn_func.py": {
        "functions": [
          "__init__",
          "create_f",
          "call_f",
          "test_issue_455"
        ],
        "classes": [
          "Issue455",
          "TestDynFunc"
        ],
        "num_lines": 43
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_refop_pruning.py": {
        "functions": [
          "set_refprune_flags",
          "check",
          "test_basic_block_1",
          "test_diamond_1",
          "test_diamond_2",
          "test_fanout_1",
          "test_fanout_2",
          "test_fanout_3",
          "setUp",
          "tearDown",
          "test_warn_invalid_flags",
          "test_valid_flag",
          "test_the_all_flag",
          "test_some_flags",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func"
        ],
        "classes": [
          "TestRefOpPruning",
          "TestRefPruneFlags"
        ],
        "num_lines": 187
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_getitem_on_types.py": {
        "functions": [
          "test_static_getitem_on_type",
          "test_shorthand_syntax",
          "test_static_getitem_on_invalid_type",
          "test_standard_getitem_on_type",
          "gen",
          "foo1",
          "foo2",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestGetitemOnTypes"
        ],
        "num_lines": 107
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unpack_sequence.py": {
        "functions": [
          "unpack_list",
          "unpack_shape",
          "unpack_range",
          "unpack_range_too_small",
          "unpack_range_too_large",
          "unpack_tuple",
          "unpack_tuple_too_small",
          "unpack_tuple_too_large",
          "unpack_heterogeneous_tuple_too_small",
          "unpack_heterogeneous_tuple_too_large",
          "unpack_heterogeneous_tuple",
          "unpack_nested_heterogeneous_tuple",
          "unpack_arbitrary",
          "unpack_nrt",
          "chained_unpack_assign1",
          "conditional_swap",
          "check_nullary_npm",
          "check_nullary_objmode",
          "test_unpack_list",
          "test_unpack_shape",
          "test_unpack_shape_npm",
          "test_unpack_range",
          "test_unpack_range_npm",
          "test_unpack_tuple",
          "test_unpack_tuple_npm",
          "test_unpack_heterogeneous_tuple",
          "test_unpack_heterogeneous_tuple_npm",
          "test_unpack_nested_heterogeneous_tuple",
          "test_unpack_nested_heterogeneous_tuple_npm",
          "test_chained_unpack_assign",
          "test_chained_unpack_assign_npm",
          "check_unpack_error",
          "test_unpack_tuple_too_small",
          "test_unpack_tuple_too_small_npm",
          "test_unpack_tuple_too_large",
          "test_unpack_tuple_too_large_npm",
          "test_unpack_range_too_small",
          "test_unpack_range_too_small_npm",
          "test_unpack_range_too_large",
          "test_unpack_range_too_large_npm",
          "check_conditional_swap",
          "test_conditional_swap",
          "test_conditional_swap_npm",
          "test_unpack_tuple_of_arrays",
          "test_unpack_nrt",
          "test_invalid_unpack"
        ],
        "classes": [
          "TestUnpack"
        ],
        "num_lines": 234
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_cgutils.py": {
        "functions": [
          "machine_const",
          "setUp",
          "compile_function",
          "get_bytearray_addr",
          "test_compile_function",
          "run_struct_access",
          "run_simple_struct_test",
          "test_int_fields",
          "test_float_fields",
          "test_printf",
          "call_func"
        ],
        "classes": [
          "StructureTestCase",
          "TestCGContext",
          "S",
          "S"
        ],
        "num_lines": 152
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_api.py": {
        "functions": [
          "check_member",
          "test_numba_module",
          "test_jit_nopython_forceobj",
          "test_njit_nopython_forceobj",
          "py_func",
          "py_func"
        ],
        "classes": [
          "TestNumbaModule",
          "TestJitDecorator"
        ],
        "num_lines": 91
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_misc_coverage_support.py": {
        "functions": [
          "test_custom_loc_notifier",
          "notify",
          "close",
          "foo",
          "foo"
        ],
        "classes": [
          "TestMiscCoverageSupport",
          "MyNotify"
        ],
        "num_lines": 75
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_compiler_lock.py": {
        "functions": [
          "test_gcl_as_context_manager",
          "test_gcl_as_decorator",
          "func"
        ],
        "classes": [
          "TestCompilerLock"
        ],
        "num_lines": 23
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_complex.py": {
        "functions": [
          "basic_values",
          "more_values",
          "non_nan_values",
          "run_unary",
          "run_binary",
          "test_real",
          "test_real_npm",
          "test_imag",
          "test_imag_npm",
          "test_conjugate",
          "test_conjugate_npm",
          "test_div",
          "test_div_npm",
          "check_predicate_func",
          "check_unary_func",
          "test_phase",
          "test_phase_npm",
          "test_polar",
          "test_polar_npm",
          "test_rect",
          "test_rect_npm",
          "test_isnan",
          "test_isnan_npm",
          "test_isinf",
          "test_isinf_npm",
          "test_isfinite",
          "test_isfinite_npm",
          "test_exp",
          "test_exp_npm",
          "test_log",
          "test_log_npm",
          "test_log_base",
          "test_log_base_npm",
          "test_log10",
          "test_log10_npm",
          "test_sqrt",
          "test_sqrt_npm",
          "test_acos",
          "test_acos_npm",
          "test_asin",
          "test_asin_npm",
          "test_atan",
          "test_atan_npm",
          "test_cos",
          "test_cos_npm",
          "test_sin",
          "test_sin_npm",
          "test_tan",
          "test_tan_npm",
          "test_acosh",
          "test_acosh_npm",
          "test_asinh",
          "test_asinh_npm",
          "test_atanh",
          "test_atanh_npm",
          "test_cosh",
          "test_cosh_npm",
          "test_sinh",
          "test_sinh_npm",
          "test_tanh",
          "test_tanh_npm",
          "do_test"
        ],
        "classes": [
          "BaseComplexTest",
          "TestComplex",
          "TestCMath"
        ],
        "num_lines": 311
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_jit_module.py": {
        "functions": [
          "captured_logs",
          "test_create_temp_jitted_module",
          "test_create_temp_jitted_module_with_exception",
          "test_jit_module",
          "test_jit_module_jit_options",
          "test_jit_module_jit_options_override",
          "test_jit_module_logging_output",
          "test_jit_module_logging_level"
        ],
        "classes": [
          "TestJitModule"
        ],
        "num_lines": 146
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_hashing.py": {
        "functions": [
          "hash_usecase",
          "test_warn_on_fnv",
          "get_expected_hash",
          "get_hash_command",
          "get_hash",
          "test_against_cpython_gold",
          "setUp",
          "check_hash_values",
          "int_samples",
          "safe_construct",
          "float_samples",
          "complex_samples",
          "setUp",
          "tearDown",
          "check_floats",
          "check_complex",
          "test_floats",
          "test_complex",
          "test_bool",
          "test_ints",
          "test_py310_nan_hash",
          "setUp",
          "tearDown",
          "check_tuples",
          "test_homogeneous_tuples",
          "test_heterogeneous_tuples",
          "test_basic_unicode",
          "test_hash_passthrough",
          "test_hash_passthrough_call",
          "test_hash_literal",
          "test_hash_on_str_creation",
          "test_hash_unhashable",
          "test_no_generic_hash",
          "split2",
          "split3",
          "split",
          "fn",
          "fn",
          "fn",
          "impl",
          "foo"
        ],
        "classes": [
          "TestHashingSetup",
          "TestHashAlgs",
          "BaseTest",
          "TestNumberHashing",
          "TestTupleHashing",
          "TestUnicodeHashing",
          "TestUnhashable"
        ],
        "num_lines": 532
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_interpreter.py": {
        "functions": [
          "sum_jit_func",
          "gen_func",
          "test_all_args",
          "test_all_kws",
          "test_small_args_small_kws",
          "test_small_args_large_kws",
          "test_large_args_small_kws",
          "test_large_args_large_kws",
          "test_large_kws_objmode",
          "test_large_args_inline_controlflow",
          "test_large_args_noninlined_controlflow",
          "test_all_args_inline_controlflow",
          "test_all_args_noninlined_controlflow",
          "test_large_kws_inline_controlflow",
          "test_large_kws_noninlined_controlflow",
          "test_large_heterogeneous_const_dict",
          "test_large_heterogeneous_LiteralStrKeyDict_literal_values",
          "test_large_heterogeneous_const_keys_dict",
          "test_large_dict_mutation_not_carried",
          "test_usercode_update_use_d2",
          "test_large_const_dict_inline_controlflow",
          "test_large_const_dict_noninline_controlflow",
          "test_fuse_twice_literal_values",
          "test_list_extend_forceobj",
          "py_func",
          "objmode_func",
          "inline_func",
          "inline_func",
          "inline_func",
          "inline_func",
          "inline_func",
          "inline_func",
          "const_func",
          "bar",
          "ol_bar",
          "foo",
          "const_keys_func",
          "bar",
          "ol_bar",
          "foo",
          "check_before",
          "check_after",
          "ol_check_before",
          "ol_check_after",
          "const_dict_func",
          "inline_func",
          "non_inline_func",
          "bar",
          "ol_bar",
          "foo",
          "consumer",
          "foo",
          "specific_ty"
        ],
        "classes": [
          "TestCallFunctionExPeepHole",
          "TestLargeConstDict",
          "TestListExtendInStarArgNonTupleIterable"
        ],
        "num_lines": 1154
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_itanium_mangler.py": {
        "functions": [
          "test_ident",
          "test_types",
          "test_function",
          "test_custom_type",
          "test_mangle_literal",
          "test_mangle_unicode"
        ],
        "classes": [
          "TestItaniumManager"
        ],
        "num_lines": 80
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors_caching.py": {
        "functions": [
          "run_test",
          "test_arrayexprs",
          "test_prange",
          "test_caller",
          "run_in_separate_process",
          "test_caching"
        ],
        "classes": [
          "TestParforsCache",
          "TestParforsCacheChangingThreads"
        ],
        "num_lines": 83
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_sys_stdin_assignment.py": {
        "functions": [
          "f0",
          "f1",
          "f0_2",
          "f1_2",
          "test_no_reassignment_of_stdout"
        ],
        "classes": [
          "TestSysStdinAssignment"
        ],
        "num_lines": 67
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_datamodel.py": {
        "functions": [
          "_test_as_arguments",
          "test_int32_array_complex",
          "test_two_arrays",
          "test_two_0d_arrays",
          "test_tuples",
          "test_empty_tuples",
          "test_nested_empty_tuples",
          "setUp",
          "test_number",
          "test_array",
          "test_tuple_of_number",
          "test_tuple_of_array",
          "test_issue2921",
          "test_basic",
          "copy"
        ],
        "classes": [
          "TestBool",
          "TestPyObject",
          "TestInt8",
          "TestInt16",
          "TestInt32",
          "TestInt64",
          "TestUInt8",
          "TestUInt16",
          "TestUInt32",
          "TestUInt64",
          "TestFloat",
          "TestDouble",
          "TestComplex",
          "TestDoubleComplex",
          "TestPointerOfInt32",
          "TestUniTupleOf2xInt32",
          "TestUniTupleEmpty",
          "TestTupleInt32Float32",
          "TestTupleEmpty",
          "Test1DArrayOfInt32",
          "Test2DArrayOfComplex128",
          "Test0DArrayOfInt32",
          "TestArgInfo",
          "TestMemInfo",
          "TestMisc",
          "TestDMMChaining",
          "int_handler",
          "float_handler",
          "new_int_handler"
        ],
        "num_lines": 257
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_closure.py": {
        "functions": [
          "run_jit_closure_variable",
          "test_jit_closure_variable",
          "test_jit_closure_variable_npm",
          "run_rejitting_closure",
          "test_rejitting_closure",
          "test_rejitting_closure_npm",
          "run_jit_multiple_closure_variables",
          "test_jit_multiple_closure_variables",
          "test_jit_multiple_closure_variables_npm",
          "run_jit_inner_function",
          "test_jit_inner_function",
          "test_jit_inner_function_npm",
          "test_inner_function",
          "test_inner_function_with_closure",
          "test_inner_function_with_closure_2",
          "test_inner_function_with_closure_3",
          "test_inner_function_nested",
          "test_bulk_use_cases",
          "test_closure_renaming_scheme",
          "test_issue9222",
          "test_issue_9577",
          "add_Y",
          "add_Y",
          "add_Y_mult_Z",
          "mult_10",
          "do_math",
          "outer",
          "outer",
          "outer",
          "outer",
          "fib3",
          "outer1",
          "outer2",
          "outer3",
          "outer4",
          "outer5",
          "outer6",
          "outer7",
          "outer8",
          "outer9",
          "outer10",
          "outer11",
          "outer12",
          "outer13",
          "outer14",
          "outer15",
          "outer16",
          "outer17",
          "outer18",
          "outer19",
          "outer20",
          "outer21",
          "outer22",
          "foo",
          "foo",
          "consume",
          "_inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner1",
          "inner1",
          "inner",
          "inner",
          "inner",
          "inner2",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner",
          "inner2",
          "inner",
          "inner",
          "bar",
          "bar",
          "bar",
          "innermost",
          "inner2"
        ],
        "classes": [
          "TestClosure",
          "TestInlinedClosure"
        ],
        "num_lines": 507
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dispatcher.py": {
        "functions": [
          "dummy",
          "add",
          "addsub",
          "addsub_defaults",
          "star_defaults",
          "generated_usecase",
          "bad_generated_usecase",
          "dtype_generated_usecase",
          "add_y1",
          "add_ynone",
          "mult",
          "add_func",
          "_checker",
          "_fn",
          "compile_func",
          "test_equality",
          "test_dyn_pyfunc",
          "test_no_argument",
          "test_coerce_input_types",
          "test_ambiguous_new_version",
          "test_lock",
          "test_explicit_signatures",
          "test_signature_mismatch",
          "test_matching_error_message",
          "test_disabled_compilation",
          "test_disabled_compilation_through_list",
          "test_disabled_compilation_nested_call",
          "test_fingerprint_failure",
          "test_serialization",
          "test_misaligned_array_dispatch",
          "test_immutability_in_array_dispatch",
          "test_misaligned_high_dimension_array_dispatch",
          "test_dispatch_recompiles_for_scalars",
          "test_dispatcher_raises_for_invalid_decoration",
          "test_named_args",
          "test_default_args",
          "test_star_args",
          "test_recompile",
          "test_recompile_signatures",
          "test_inspect_llvm",
          "test_inspect_asm",
          "_check_cfg_display",
          "test_inspect_cfg",
          "test_inspect_cfg_with_python_wrapper",
          "test_inspect_types",
          "test_inspect_types_with_signature",
          "test_inspect_types_pretty",
          "test_get_annotation_info",
          "test_issue_with_array_layout_conflict",
          "test_pass_dispatcher_as_arg",
          "test_dispatcher_as_arg_usecase",
          "test_dispatcher_can_return_to_python",
          "test_dispatcher_in_sequence_arg",
          "test_unbox_runtime_error",
          "test_box_runtime_error",
          "run_test",
          "test_direct_call",
          "test_nested_call",
          "test_error_count",
          "run_fc_multiproc",
          "test_int_def_param",
          "test_none_def_param",
          "test_function_def_param",
          "test_cpu_vs_parallel",
          "impl",
          "impl",
          "impl",
          "impl",
          "check",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "foo",
          "wrapper",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo",
          "foo",
          "check",
          "foo",
          "check",
          "foo",
          "check_properties",
          "check",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "pyfunc",
          "add1",
          "bar",
          "foo",
          "maximum",
          "foo",
          "one",
          "two",
          "three",
          "choose",
          "foo",
          "foo",
          "foo",
          "bar",
          "foobar",
          "foo",
          "check",
          "add",
          "trigger",
          "ol_trigger",
          "ident",
          "chain_assign",
          "assign"
        ],
        "classes": [
          "BaseTest",
          "TestDispatcher",
          "TestSignatureHandling",
          "TestSignatureHandlingObjectMode",
          "TestDispatcherMethods",
          "TestDispatcherFunctionBoundaries",
          "TestBoxingDefaultError",
          "TestNoRetryFailedSignature",
          "TestMultiprocessingDefaultParameters",
          "TestVectorizeDifferentTargets"
        ],
        "num_lines": 1190
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_ufuncs.py": {
        "functions": [
          "_unimplemented",
          "_make_ufunc_usecase",
          "_make_unary_ufunc_op_usecase",
          "_make_binary_ufunc_op_usecase",
          "_make_inplace_ufunc_op_usecase",
          "_as_dtype_value",
          "wrapper",
          "setUp",
          "_compile",
          "_determine_output_type",
          "_make_ufunc_usecase",
          "basic_ufunc_test",
          "signed_unsigned_cmp_test",
          "basic_int_ufunc_test",
          "test_add_ufunc",
          "test_subtract_ufunc",
          "test_multiply_ufunc",
          "test_divide_ufunc",
          "test_logaddexp_ufunc",
          "test_logaddexp2_ufunc",
          "test_true_divide_ufunc",
          "test_floor_divide_ufunc",
          "test_negative_ufunc",
          "test_positive_ufunc",
          "test_power_ufunc",
          "test_float_power_ufunc",
          "test_gcd_ufunc",
          "test_lcm_ufunc",
          "test_remainder_ufunc",
          "test_mod_ufunc",
          "test_fmod_ufunc",
          "test_abs_ufunc",
          "test_absolute_ufunc",
          "test_fabs_ufunc",
          "test_rint_ufunc",
          "test_sign_ufunc",
          "test_conj_ufunc",
          "test_exp_ufunc",
          "test_exp2_ufunc",
          "test_log_ufunc",
          "test_log2_ufunc",
          "test_log10_ufunc",
          "test_expm1_ufunc",
          "test_log1p_ufunc",
          "test_sqrt_ufunc",
          "test_square_ufunc",
          "test_cbrt_ufunc",
          "test_reciprocal_ufunc",
          "test_conjugate_ufunc",
          "test_sin_ufunc",
          "test_cos_ufunc",
          "test_tan_ufunc",
          "test_arcsin_ufunc",
          "test_arccos_ufunc",
          "test_arctan_ufunc",
          "test_arctan2_ufunc",
          "test_hypot_ufunc",
          "test_sinh_ufunc",
          "test_cosh_ufunc",
          "test_tanh_ufunc",
          "test_arcsinh_ufunc",
          "test_arccosh_ufunc",
          "test_arctanh_ufunc",
          "test_deg2rad_ufunc",
          "test_rad2deg_ufunc",
          "test_degrees_ufunc",
          "test_radians_ufunc",
          "test_bitwise_and_ufunc",
          "test_bitwise_or_ufunc",
          "test_bitwise_xor_ufunc",
          "test_invert_ufunc",
          "test_bitwise_not_ufunc",
          "test_greater_ufunc",
          "test_greater_equal_ufunc",
          "test_less_ufunc",
          "test_less_equal_ufunc",
          "test_not_equal_ufunc",
          "test_equal_ufunc",
          "test_logical_and_ufunc",
          "test_logical_or_ufunc",
          "test_logical_xor_ufunc",
          "test_logical_not_ufunc",
          "test_maximum_ufunc",
          "test_minimum_ufunc",
          "test_fmax_ufunc",
          "test_fmin_ufunc",
          "bool_additional_inputs",
          "test_isfinite_ufunc",
          "test_isinf_ufunc",
          "test_isnan_ufunc",
          "test_signbit_ufunc",
          "test_copysign_ufunc",
          "test_nextafter_ufunc",
          "test_modf_ufunc",
          "test_frexp_ufunc",
          "test_floor_ufunc",
          "test_ceil_ufunc",
          "test_trunc_ufunc",
          "test_spacing_ufunc",
          "binary_ufunc_mixed_types_test",
          "test_broadcasting",
          "test_implicit_output_npm",
          "test_broadcast_implicit_output_npm_nrt",
          "test_implicit_output_layout_binary",
          "test_implicit_output_layout_unary",
          "_check_results",
          "unary_op_test",
          "binary_op_test",
          "bitwise_additional_inputs",
          "binary_int_op_test",
          "binary_bitwise_op_test",
          "inplace_op_test",
          "inplace_float_op_test",
          "inplace_int_op_test",
          "inplace_bitwise_op_test",
          "test_unary_positive_array_op",
          "test_unary_negative_array_op",
          "test_unary_invert_array_op",
          "test_inplace_add",
          "test_inplace_sub",
          "test_inplace_mul",
          "test_inplace_floordiv",
          "test_inplace_div",
          "test_inplace_remainder",
          "test_inplace_pow",
          "test_inplace_and",
          "test_inplace_or",
          "test_inplace_xor",
          "test_inplace_lshift",
          "test_inplace_rshift",
          "test_unary_positive_array_op_2",
          "test_add_array_op",
          "test_subtract_array_op",
          "test_multiply_array_op",
          "test_divide_array_op",
          "test_floor_divide_array_op",
          "test_remainder_array_op",
          "test_power_array_op",
          "test_left_shift_array_op",
          "test_right_shift_array_op",
          "test_bitwise_and_array_op",
          "test_bitwise_or_array_op",
          "test_bitwise_xor_array_op",
          "test_equal_array_op",
          "test_greater_array_op",
          "test_greater_equal_array_op",
          "test_less_array_op",
          "test_less_equal_array_op",
          "test_not_equal_array_op",
          "run_ufunc",
          "test_scalar_unary_ufunc",
          "test_scalar_binary_uniform_ufunc",
          "test_scalar_binary_mixed_ufunc",
          "test_issue_651",
          "test_issue_2006",
          "_arg_for_type",
          "_check_loop",
          "_check_ufunc_with_dtypes",
          "_fixup_results",
          "_check_ufunc_loops",
          "_inject_test",
          "autogenerate",
          "_arg_for_type",
          "_arg_for_type",
          "_arg_for_type",
          "_arg_for_type",
          "_fixup_results",
          "test_add",
          "test_subtract",
          "test_multiply",
          "test_true_divide",
          "test_floor_divide",
          "_check_comparison",
          "test_comparisons",
          "test_missing_args",
          "test_too_many_args",
          "test_no_scalar_result_by_reference",
          "test_lock",
          "test_cpu_get_ufunc_info",
          "test_base_get_ufunc_info",
          "test_write_input_arg",
          "inplace_op",
          "myadd",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "f",
          "_func",
          "_func",
          "_func",
          "foo",
          "foo",
          "check",
          "test_template",
          "func",
          "func",
          "func",
          "foo",
          "wrapper",
          "func"
        ],
        "classes": [
          "BaseUFuncTest",
          "BasicUFuncTest",
          "TestUFuncs",
          "TestArrayOperators",
          "TestScalarUFuncs",
          "TestUfuncIssues",
          "_LoopTypesTester",
          "TestLoopTypesInt",
          "TestLoopTypesSubtractAndNegative",
          "TestLoopTypesReciprocal",
          "TestLoopTypesPower",
          "TestLoopTypesIntLeftShift",
          "TestLoopTypesIntRightShift",
          "TestLoopTypesFloorDivide",
          "TestLoopTypesFloat",
          "TestLoopTypesComplex",
          "TestLoopTypesDatetime",
          "TestUFuncBadArgs",
          "TestUFuncCompilationThreadSafety",
          "TestUfuncOnContext",
          "TestUfuncWriteInput"
        ],
        "num_lines": 1918
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pdlike_usecase.py": {
        "functions": [
          "typeof_index",
          "typeof_series",
          "type_array_wrap",
          "type_series_constructor",
          "make_index",
          "make_series",
          "index_as_array",
          "series_as_array",
          "index_wrap_array",
          "series_wrap_array",
          "pdseries_constructor",
          "unbox_index",
          "unbox_series",
          "box_index",
          "box_series",
          "index_is_monotonic_increasing",
          "series_len",
          "series_clip",
          "__init__",
          "__iter__",
          "dtype",
          "flags",
          "__init__",
          "key",
          "as_array",
          "copy",
          "__init__",
          "__iter__",
          "dtype",
          "flags",
          "__init__",
          "key",
          "as_array",
          "copy",
          "typer",
          "typer",
          "__init__",
          "__init__",
          "getter",
          "clip_impl",
          "len_impl"
        ],
        "classes": [
          "Index",
          "IndexType",
          "Series",
          "SeriesType",
          "IndexModel",
          "SeriesModel"
        ],
        "num_lines": 306
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_range.py": {
        "functions": [
          "loop1",
          "loop2",
          "loop3",
          "range_len1",
          "range_len2",
          "range_len3",
          "range_iter_len1",
          "range_iter_len2",
          "range_attrs",
          "range_contains",
          "my_arange",
          "test_loop1_int16",
          "test_loop2_int16",
          "test_loop3_int32",
          "test_range_len1",
          "test_range_len2",
          "test_range_len3",
          "test_range_iter_len1",
          "test_range_iter_list",
          "test_range_attrs",
          "test_range_contains",
          "test_range_safe_cast_mixed"
        ],
        "classes": [
          "TestRange",
          "TestRangeNumpy"
        ],
        "num_lines": 201
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_cli.py": {
        "functions": [
          "run_cmd",
          "test_as_module_exit_code",
          "test_sysinfo_from_module",
          "test_json_sysinfo_from_module",
          "test_gdb_status_from_module",
          "setUp",
          "tearDown",
          "test_valid",
          "test_invalid_binary",
          "test_no_python",
          "test_unparsable_python_version",
          "test_no_numpy",
          "test_no_numpy_version",
          "test_traceback_in_numpy_version",
          "test_cannot_find_gdb_from_name",
          "test_cannot_find_gdb_from_path",
          "test_nonsense_gdb_binary",
          "_patch",
          "mock_check_launch",
          "mock_check_python",
          "mock_check_numpy",
          "mock_check_numpy_version",
          "mock_fn",
          "mock_fn",
          "mock_fn",
          "mock_fn",
          "mock_fn",
          "mock_fn"
        ],
        "classes": [
          "TestCLI",
          "TestGDBCLIInfo",
          "TestGDBCLIInfoBrokenGdbs"
        ],
        "num_lines": 281
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_optimisation_pipelines.py": {
        "functions": [
          "_get_llvmir",
          "test_override_config",
          "foo"
        ],
        "classes": [
          "TestPassManagerOptimization"
        ],
        "num_lines": 58
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode_array.py": {
        "functions": [
          "getitem",
          "getitem2",
          "setitem",
          "setitem2",
          "setitem_literal",
          "getitem_key",
          "return_len",
          "return_bool",
          "equal_getitem",
          "notequal_getitem",
          "lessthan_getitem",
          "greaterthan_getitem",
          "lessequal_getitem",
          "greaterequal_getitem",
          "contains_getitem2",
          "equal_getitem_value",
          "notequal_getitem_value",
          "return_isascii",
          "return_isupper",
          "return_upper",
          "return_str",
          "return_bytes",
          "return_hash",
          "return_find",
          "return_rfind",
          "return_startswith",
          "return_endswith",
          "return_split1",
          "return_split2",
          "return_split3",
          "return_center1",
          "return_center2",
          "return_ljust1",
          "return_ljust2",
          "return_rjust1",
          "return_rjust2",
          "return_join",
          "return_zfill",
          "return_lstrip1",
          "return_lstrip2",
          "return_rstrip1",
          "return_rstrip2",
          "return_strip1",
          "return_strip2",
          "return_add",
          "return_iadd",
          "return_mul",
          "return_not",
          "join_string_array",
          "_test",
          "test_getitem2",
          "test_getitem",
          "test_getitem_key",
          "test_setitem",
          "test_setitem2",
          "test_setitem_literal",
          "test_return_len",
          "test_return_bool",
          "_test_op_getitem",
          "test_equal_getitem",
          "test_notequal_getitem",
          "test_lessthan_getitem",
          "test_greaterthan_getitem",
          "test_lessequal_getitem",
          "test_greaterequal_getitem",
          "_test_op_getitem_value",
          "test_equal_getitem_value",
          "test_notequal_getitem_value",
          "test_contains_getitem2",
          "test_return_isascii",
          "test_return_isupper",
          "test_return_str",
          "test_return_bytes",
          "test_return_upper",
          "test_hash",
          "test_return_find",
          "test_return_rfind",
          "test_return_startswith",
          "test_return_endswith",
          "test_return_split1",
          "test_return_split2",
          "test_return_split3",
          "test_return_ljust1",
          "test_return_ljust2",
          "test_return_rjust1",
          "test_return_rjust2",
          "test_return_center1",
          "test_return_center2",
          "test_return_join",
          "test_return_zfill",
          "test_return_lstrip1",
          "test_return_lstrip2",
          "test_return_rstrip1",
          "test_return_rstrip2",
          "test_return_strip1",
          "test_return_strip2",
          "test_return_add",
          "test_return_iadd",
          "test_return_mul",
          "test_return_not",
          "test_join"
        ],
        "classes": [
          "TestUnicodeArray"
        ],
        "num_lines": 889
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_compiler_flags.py": {
        "functions": [
          "test_setting_invalid_attribute",
          "test_fastmath_in_overload",
          "test_demangle",
          "test_mangled_flags_is_shorter",
          "test_mangled_flags_with_fastmath_parfors_inline",
          "test_demangling_from_mangled_symbols",
          "fastmath_status",
          "ov_fastmath_status",
          "set_fastmath",
          "foo",
          "check",
          "codegen"
        ],
        "classes": [
          "TestCompilerFlags",
          "TestCompilerFlagCachedOverload",
          "TestFlagMangling"
        ],
        "num_lines": 119
      },
      "/tmp/cs-hpc-demo-1/numba/tests/parfor_iss9490_usecase.py": {
        "functions": [
          "stable_fit",
          "check"
        ],
        "classes": [],
        "num_lines": 78
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_new_type_system.py": {
        "functions": [
          "setUp",
          "test_return_types",
          "foo"
        ],
        "classes": [
          "TestTypes"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_num_threads.py": {
        "functions": [
          "setUp",
          "check_mask",
          "test_set_num_threads_type",
          "_test_set_num_threads_basic",
          "_test_set_num_threads_basic_jit",
          "_test_set_num_threads_basic_guvectorize",
          "_test_set_num_threads_outside_jit",
          "_test_set_num_threads_inside_jit",
          "_test_set_num_threads_inside_guvectorize",
          "_test_get_num_threads_truth_outside_jit",
          "_test_get_num_threads_truth_inside_jit",
          "_test_nested_parallelism_1",
          "_test_nested_parallelism_2",
          "_test_nested_parallelism_3",
          "_test_threadmask_across_fork",
          "tearDown",
          "_test_get_thread_id_not_parallel",
          "run_test_in_separate_process",
          "_inject",
          "generate",
          "foo",
          "get_n",
          "set_get_n",
          "get_n",
          "set_get_n",
          "test_func",
          "test_gufunc",
          "test_func",
          "test_func",
          "child_func",
          "get_test",
          "get_impl",
          "work",
          "test_func_jit",
          "test_guvectorize",
          "foo",
          "wrap",
          "par_false",
          "par_true",
          "test_template",
          "test_func",
          "test_gufunc",
          "test_func",
          "test_gufunc",
          "child",
          "test_func_guvectorize",
          "test_func",
          "test_func",
          "test_func",
          "_test_func",
          "test_func",
          "_test_func",
          "_test_func",
          "child_dec",
          "test_dec"
        ],
        "classes": [
          "TestNumThreads",
          "TestNumThreadsBackends"
        ],
        "num_lines": 632
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_nrt_refct.py": {
        "functions": [
          "setUp",
          "test_no_return",
          "test_escaping_var_init_in_loop",
          "test_invalid_computation_of_lifetime",
          "test_del_at_beginning_of_loop",
          "foo",
          "g",
          "if_with_allocation_and_initialization",
          "f"
        ],
        "classes": [
          "TestNrtRefCt"
        ],
        "num_lines": 115
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_nested_calls.py": {
        "functions": [
          "f_inner",
          "f",
          "g_inner",
          "g",
          "star_inner",
          "star",
          "star_call",
          "argcast_inner",
          "argcast",
          "generated_inner",
          "ol_generated_inner",
          "call_generated",
          "compile_func",
          "test_boolean_return",
          "test_named_args",
          "test_named_args_objmode",
          "test_default_args",
          "test_default_args_objmode",
          "test_star_args",
          "test_star_call",
          "test_star_call_objmode",
          "test_argcast",
          "test_call_generated",
          "impl",
          "impl",
          "check",
          "inner",
          "outer"
        ],
        "classes": [
          "TestNestedCall"
        ],
        "num_lines": 153
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_chained_assign.py": {
        "functions": [
          "test_chain1",
          "test_chain2",
          "test_unpack1",
          "test_unpack2",
          "test_chain3",
          "test_unpack3",
          "test_unpack4",
          "test_unpack5",
          "test_unpack6",
          "_test_template"
        ],
        "classes": [
          "TestChainedAssign"
        ],
        "num_lines": 89
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_withlifting.py": {
        "functions": [
          "get_func_ir",
          "lift1",
          "lift2",
          "lift3",
          "lift4",
          "lift5",
          "liftcall1",
          "liftcall2",
          "liftcall3",
          "liftcall4",
          "liftcall5",
          "lift_undefiend",
          "lift_invalid",
          "expected_failure_for_list_arg",
          "expected_failure_for_function_arg",
          "case_inner_pyfunc",
          "case_objmode_cache",
          "check_num_of_with",
          "test_lift1",
          "test_lift2",
          "test_lift3",
          "test_lift4",
          "test_lift5",
          "setUp",
          "check_extracted_with",
          "compile_ir",
          "test_lift1",
          "test_lift2",
          "test_lift3",
          "test_lift4",
          "test_lift5",
          "check_same_semantic",
          "test_liftcall1",
          "test_liftcall2",
          "test_liftcall3",
          "test_liftcall4",
          "test_liftcall5",
          "core",
          "core",
          "setUp",
          "tearDown",
          "assert_equal_return_and_stdout",
          "test_lift_objmode_basic",
          "test_lift_objmode_array_in",
          "test_lift_objmode_define_new_unused",
          "test_lift_objmode_return_simple",
          "test_lift_objmode_return_array",
          "test_lift_objmode_using_list",
          "test_lift_objmode_var_redef",
          "test_case01_mutate_list_ahead_of_ctx",
          "test_case02_mutate_array_ahead_of_ctx",
          "test_case03_create_and_mutate",
          "test_case04_bogus_variable_type_info",
          "test_case05_bogus_type_info",
          "test_case06_double_objmode",
          "test_case07_mystery_key_error",
          "test_case08_raise_from_external",
          "test_case09_explicit_raise",
          "test_case10_mutate_across_contexts",
          "test_case10_mutate_array_across_contexts",
          "test_case11_define_function_in_context",
          "test_case12_njit_inside_a_objmode_ctx",
          "test_case14_return_direct_from_objmode_ctx",
          "test_case15_close_over_objmode_ctx",
          "test_case16_scipy_call_in_objmode_ctx",
          "test_case17_print_own_bytecode",
          "test_case18_njitfunc_passed_to_objmode_ctx",
          "test_case19_recursion",
          "test_case20_rng_works_ok",
          "test_case21_rng_seed_works_ok",
          "test_example01",
          "test_objmode_in_overload",
          "test_objmode_gv_variable",
          "test_objmode_gv_variable_error",
          "test_objmode_gv_mod_attr",
          "test_objmode_gv_mod_attr_error",
          "test_objmode_gv_mod_attr_error_multiple",
          "test_objmode_closure_type_in_overload",
          "test_objmode_closure_type_in_overload_error",
          "test_objmode_invalid_use",
          "test_objmode_multi_type_args",
          "test_objmode_jitclass",
          "case_objmode_cache",
          "test_objmode_reflected_list",
          "test_objmode_reflected_set",
          "test_objmode_typed_dict",
          "test_objmode_typed_list",
          "test_objmode_use_of_view",
          "setUp",
          "tearDown",
          "check",
          "test_objmode_caching_basic",
          "test_objmode_caching_call_closure_bad",
          "test_objmode_caching_call_closure_good",
          "test_undefined_global",
          "test_invalid",
          "test_with_as_fails_gracefully",
          "test_no_fork_in_compilation",
          "bar",
          "foo",
          "foo_nonglobal",
          "bar",
          "foo",
          "bar",
          "foo",
          "inverse",
          "foo",
          "foo_nonglobal",
          "inverse",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "foo",
          "foo",
          "foo_overload",
          "f",
          "global_var",
          "global_var",
          "modattr1",
          "modattr2",
          "moderror",
          "moderror",
          "foo",
          "foo_overload",
          "bar",
          "foo",
          "foo_overload",
          "bar",
          "moderror",
          "foo",
          "foo",
          "foo_overload",
          "bar",
          "test2",
          "test2",
          "test4",
          "test4",
          "foo",
          "pyfunc",
          "other_pyfunc",
          "pyfunc",
          "foo",
          "force_compile",
          "bar",
          "impl",
          "impl",
          "impl",
          "__init__",
          "size",
          "increment",
          "add",
          "impl",
          "f",
          "bar"
        ],
        "classes": [
          "TestWithFinding",
          "BaseTestWithLifting",
          "TestLiftByPass",
          "TestLiftCall",
          "TestLiftObj",
          "TestLiftObjCaching",
          "TestBogusContext",
          "TestMisc",
          "Bag"
        ],
        "num_lines": 1220
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_errorhandling.py": {
        "functions": [
          "test_unsupported_make_function_return_inner_func",
          "test_unsupported_numpy_function",
          "test_use_of_exception_for_flow_control",
          "test_commented_func_definition_is_not_a_definition",
          "test_use_of_ir_unknown_loc",
          "check_write_to_globals",
          "test_handling_of_write_to_reflected_global",
          "test_handling_of_write_to_typed_dict_global",
          "test_handling_forgotten_numba_internal_import",
          "test_handling_unsupported_generator_expression",
          "test_handling_undefined_variable",
          "test_specific_error",
          "test_no_match_error",
          "test_error_function_source_is_correct",
          "test_concrete_template_source",
          "test_abstract_template_source",
          "test_callable_template_source",
          "test_overloadfunction_template_source",
          "test_intrinsic_template_source",
          "test_overloadmethod_template_source",
          "test_overloadattribute_template_source",
          "test_external_function_pointer_template_source",
          "test_cffi_function_pointer_template_source",
          "test_missing_source",
          "test_bound_function_error_string",
          "test_error_in_overload",
          "test_placeholders_with_positional_args",
          "test_preformatted_string_no_args",
          "func",
          "func",
          "fn",
          "foo_commented",
          "foo_docstring",
          "f",
          "foo",
          "foo",
          "foo",
          "foo",
          "ol_foo",
          "call_foo",
          "foo",
          "ol_foo",
          "call_foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "foo",
          "myintrin",
          "call_intrin",
          "ol_unicode_isnonsense",
          "foo",
          "ol_unicode_isnonsense",
          "foo",
          "foo",
          "foo",
          "foo",
          "bar",
          "ol_bar",
          "inner",
          "define_pipelines",
          "codegen",
          "__new__",
          "impl",
          "foo"
        ],
        "classes": [
          "TestErrorHandlingBeforeLowering",
          "TestUnsupportedReporting",
          "TestMiscErrorHandling",
          "TestErrorMessages",
          "TestDeveloperSpecificErrorMessages",
          "TestCapturedErrorHandling",
          "TestCurlyBracesInPaths",
          "TestPipeline",
          "ParticleType",
          "Particle"
        ],
        "num_lines": 501
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors.py": {
        "functions": [
          "null_comparer",
          "blackscholes_impl",
          "lr_impl",
          "example_kmeans_test",
          "get_optimized_numba_ir",
          "countParfors",
          "countArrays",
          "get_init_block_size",
          "_count_arrays_inner",
          "countArrayAllocs",
          "_count_array_allocs_inner",
          "countNonParforArrayAccesses",
          "_count_non_parfor_array_accesses_inner",
          "_uses_indices",
          "test_call_hoisting_outcall",
          "runner",
          "test_TestParforBasic",
          "test_TestParforNumericalMisc",
          "test_TestParforNumPy",
          "test_TestParfors",
          "test_TestParforsBitMask",
          "test_TestParforsDiagnostics",
          "test_TestParforsLeaks",
          "test_TestParforsMisc",
          "test_TestParforsOptions",
          "test_TestParforsSlice",
          "test_TestParforsVectorizer",
          "test_TestPrangeBasic",
          "test_TestPrangeSpecific",
          "_compile_this",
          "compile_parallel",
          "compile_parallel_fastmath",
          "compile_njit",
          "compile_all",
          "check_parfors_vs_others",
          "check",
          "check_variants",
          "count_parfors_variants",
          "check_scheduling",
          "gen_linspace",
          "gen_linspace_variants",
          "_filter_mod",
          "_get_gufunc_modules",
          "_get_gufunc_info",
          "_get_gufunc_ir",
          "_get_gufunc_asm",
          "assert_fastmath",
          "__init__",
          "__init__",
          "test_simple01",
          "test_simple02",
          "test_simple03",
          "test_simple04",
          "test_simple07",
          "test_simple08",
          "test_simple09",
          "test_simple10",
          "test_simple11",
          "test_simple12",
          "test_simple13",
          "test_simple14",
          "test_simple15",
          "test_simple16",
          "test_simple17",
          "test_simple18",
          "test_simple19",
          "test_simple20",
          "test_simple21",
          "test_simple22",
          "test_simple23",
          "test_simple24",
          "test_simple_operator_15",
          "test_simple_operator_16",
          "test_simple_operator_17",
          "test_inplace_alias",
          "test_pi",
          "test_blackscholes",
          "test_logistic_regression",
          "test_kmeans",
          "test_mvdot",
          "test_fuse_argmin_argmax_max_min",
          "test_np_random_func_direct_import",
          "test_arange",
          "test_arange_dtype",
          "test_linspace",
          "test_mean",
          "test_var",
          "test_std",
          "test_random_parfor",
          "test_randoms",
          "test_dead_randoms",
          "test_min",
          "test_max",
          "test_argmax",
          "test_argmin",
          "test_ndarray_fill",
          "test_ndarray_fill2d",
          "test_reshape_with_neg_one",
          "test_reshape_with_large_neg",
          "test_reshape_with_too_many_neg_one",
          "test_0d_array",
          "test_real_imag_attr",
          "test_unsupported_combination_raises",
          "test_arraymap",
          "test_0d_broadcast",
          "test_2d_parfor",
          "test_nd_parfor",
          "test_np_func_direct_import",
          "test_size_assertion",
          "test_cfg",
          "test_reduce",
          "test_use_of_reduction_var1",
          "test_unsupported_floordiv1",
          "test_unsupported_xor1",
          "test_parfor_array_access1",
          "test_parfor_array_access2",
          "test_parfor_array_access3",
          "test_parfor_array_access4",
          "test_parfor_dtype_type",
          "test_parfor_array_access5",
          "test_parfor_hoist_setitem",
          "test_parfor_generate_fuse",
          "test_ufunc_expr",
          "test_find_callname_intrinsic",
          "test_reduction_var_reuse",
          "test_non_identity_initial",
          "test_if_not_else_reduction",
          "test_two_d_array_reduction_reuse",
          "test_one_d_array_reduction",
          "test_two_d_array_reduction",
          "test_two_d_array_reduction_with_float_sizes",
          "test_two_d_array_reduction_prod",
          "test_three_d_array_reduction",
          "test_preparfor_canonicalize_kws",
          "test_preparfor_datetime64",
          "test_no_hoisting_with_member_function_call",
          "test_array_compare_scalar",
          "test_array_analysis_optional_def",
          "test_prange_side_effects",
          "test_tuple1",
          "test_tuple2",
          "test_tuple3",
          "test_namedtuple1",
          "test_namedtuple2",
          "test_namedtuple3",
          "test_inplace_binop",
          "test_tuple_concat",
          "test_tuple_concat_with_reverse_slice",
          "test_array_tuple_concat",
          "test_high_dimension1",
          "test_tuple_arg",
          "test_tuple_arg_not_whole_array",
          "test_tuple_for_pndindex",
          "test_tuple_arg_literal",
          "test_tuple_of_literal_nonliteral",
          "test_tuple_arg_1d",
          "test_tuple_arg_1d_literal",
          "test_int_arg_pndindex",
          "test_prange_unknown_call1",
          "test_prange_index_calc1",
          "test_prange_reverse_order1",
          "test_prange_parfor_index_then_not",
          "test_prange_parfor_index_const_tuple_fusion",
          "test_prange_non_parfor_index_then_opposite",
          "test_prange_optional",
          "test_untraced_value_tuple",
          "test_recursive_untraced_value_tuple",
          "test_untraced_value_parfor",
          "test_setitem_2d_one_replaced",
          "test_1array_control_flow",
          "test_2array_1_control_flow",
          "test_2array_2_control_flow",
          "test_issue8515",
          "test_issue9029",
          "test_fusion_no_side_effects",
          "test_issue9256_lower_sroa_conflict",
          "test_issue9256_lower_sroa_conflict_variant1",
          "test_issue9256_lower_sroa_conflict_variant2",
          "test_issue9490_non_det_ssa_problem",
          "check",
          "test_reduction",
          "test_multiple_reduction_vars",
          "test_parfor_slice1",
          "test_parfor_slice2",
          "test_parfor_slice3",
          "test_parfor_slice4",
          "test_parfor_slice5",
          "test_parfor_slice6",
          "test_parfor_slice7",
          "test_parfor_slice8",
          "test_parfor_slice9",
          "test_parfor_slice10",
          "test_parfor_slice11",
          "test_parfor_slice12",
          "test_parfor_slice13",
          "test_parfor_slice14",
          "test_parfor_slice15",
          "test_parfor_slice16",
          "test_parfor_slice17",
          "test_parfor_slice18",
          "test_parfor_slice19",
          "test_parfor_slice20",
          "test_parfor_slice21",
          "test_parfor_slice22",
          "test_parfor_slice23",
          "test_parfor_slice24",
          "test_parfor_slice25",
          "test_parfor_slice26",
          "test_parfor_slice27",
          "test_parfor_array_access_lower_slice",
          "test_parfor_options",
          "test_parfor_bitmask1",
          "test_parfor_bitmask2",
          "test_parfor_bitmask3",
          "test_parfor_bitmask4",
          "test_parfor_bitmask5",
          "test_parfor_bitmask6",
          "test_no_warn_if_cache_set",
          "test_statement_reordering_respects_aliasing",
          "test_parfor_ufunc_typing",
          "test_init_block_dce",
          "test_alias_analysis_for_parfor1",
          "test_no_state_change_in_gufunc_lowering_on_error",
          "test_issue_5098",
          "test_oversized_tuple_as_arg_to_kernel",
          "test_issue5167",
          "test_issue5065",
          "test_issue5001",
          "test_issue3169",
          "test_issue4846",
          "test_issue3748",
          "test_issue5277",
          "test_issue5570_ssa_races",
          "test_issue6095_numpy_max",
          "test_issue5942_1",
          "test_issue5942_2",
          "test_issue6102",
          "test_issue6774",
          "test_issue4963_globals",
          "test_issue4963_freevars",
          "test_issue_9182_recursion_error",
          "test_lookup_cycle_detection",
          "test_issue_9678_build_map",
          "check",
          "assert_fusion_equivalence",
          "_fusion_equivalent",
          "assert_diagnostics",
          "test_array_expr",
          "test_prange",
          "test_user_varname",
          "test_nested_prange",
          "test_function_replacement",
          "test_reduction",
          "test_reduction_binop",
          "test_setitem",
          "test_allocation_hoisting",
          "generate_prange_func",
          "prange_tester",
          "test_prange01",
          "test_prange02",
          "test_prange03",
          "test_prange03mul",
          "test_prange03sub",
          "test_prange03div",
          "test_prange04",
          "test_prange05",
          "test_prange06",
          "test_prange07",
          "test_prange08",
          "test_prange08_1",
          "test_prange09",
          "test_prange10",
          "test_prange11",
          "test_prange12",
          "test_prange13",
          "test_prange14",
          "test_prange15",
          "test_prange16",
          "test_prange17",
          "test_prange18",
          "test_prange19",
          "test_prange20",
          "test_prange21",
          "test_prange22",
          "test_prange23",
          "test_prange24",
          "test_prange25",
          "test_prange26",
          "test_prange27",
          "test_prange28",
          "test_prange29",
          "test_prange30",
          "test_prange_two_instances_same_reduction_var",
          "test_prange_conflicting_reduction_ops",
          "test_prange_two_conditional_reductions",
          "test_prange_nested_reduction1",
          "test_check_error_model",
          "test_check_alias_analysis",
          "test_prange_raises_invalid_step_size",
          "test_prange_fastmath_check_works",
          "test_parfor_alias1",
          "test_parfor_alias2",
          "test_parfor_alias3",
          "test_parfor_race_1",
          "test_nested_parfor_push_call_vars",
          "test_copy_global_for_parfor",
          "test_multiple_call_getattr_object",
          "test_argument_alias_recarray_field",
          "test_mutable_list_param",
          "test_list_comprehension_prange",
          "test_ssa_false_reduction",
          "test_list_setitem_hoisting",
          "test_tuple_hoisting",
          "test_call_hoisting",
          "test_record_array_setitem",
          "test_record_array_setitem_yield_array",
          "test_issue7501",
          "test_kde_example",
          "test_issue7578",
          "setUp",
          "tearDown",
          "test_python_parallel_chunksize_basic",
          "test_python_with_chunksize",
          "test_njit_parallel_chunksize_basic",
          "test_njit_with_chunksize",
          "test_all_iterations_reset_chunksize",
          "test_njit_parallel_chunksize_negative",
          "test_python_parallel_chunksize_negative",
          "test_njit_parallel_chunksize_invalid_type",
          "test_python_parallel_chunksize_invalid_type",
          "get_gufunc_asm",
          "test_vectorizer_fastmath_asm",
          "test_unsigned_refusal_to_vectorize",
          "test_signed_vs_unsigned_vec_asm",
          "test_add",
          "test_mul",
          "test_max",
          "test_diagnostics_env_var1",
          "copy_args",
          "gen",
          "emit_asm",
          "_get_fast_instructions",
          "_assert_fast",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "comparer",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl1",
          "test_impl2",
          "test_impl3",
          "test_impl1",
          "test_impl2",
          "test_impl3",
          "test_impl1",
          "test_impl2",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl1",
          "test_impl2",
          "test_impl1",
          "test_impl2",
          "test_impl1",
          "test_impl2",
          "test_impl1",
          "test_impl2",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "case1",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "comparer",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "call",
          "check",
          "test_impl",
          "test_impl",
          "test_impl",
          "issue7854_proc",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "def_in_loop",
          "def_in_loop",
          "def_in_loop",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "pyfunc",
          "impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "foo",
          "typeof_Dummy",
          "unbox_index",
          "_get_method1",
          "bar",
          "test1",
          "oversize_tuple",
          "ndvi_njit",
          "reproducer",
          "euclidean",
          "test_numba_parallel",
          "foo",
          "bar",
          "outer",
          "inner",
          "test1b",
          "parallel_test",
          "foo",
          "find_maxima_3D_jit",
          "test_impl",
          "test_impl",
          "f",
          "test_impl",
          "test_impl",
          "test_impl",
          "_sink",
          "_ground_node_rule",
          "foo",
          "issue_9678",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "list_check",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "test_impl",
          "comparer",
          "test_impl",
          "comparer",
          "test_impl",
          "test_impl",
          "test_impl",
          "get_cs",
          "set_cs",
          "test_impl",
          "test_impl",
          "will_vectorize",
          "will_not_vectorize",
          "will_vectorize",
          "signed_variant",
          "unsigned_variant",
          "strip_instrs",
          "udt",
          "udt",
          "udt",
          "test_impl",
          "test_impl",
          "ddot",
          "test_impl",
          "test_impl",
          "__init__",
          "run_pass",
          "define_pipelines",
          "_foo",
          "neg_test",
          "impl",
          "impl",
          "baz",
          "difference"
        ],
        "classes": [
          "TestParforsRunner",
          "TestParforsBase",
          "TestPipeline",
          "TestParforBasic",
          "TestParforNumericalMisc",
          "TestParforNumPy",
          "TestParforsUnsupported",
          "TestParfors",
          "TestParforsLeaks",
          "TestParforsSlice",
          "TestParforsOptions",
          "TestParforsBitMask",
          "TestParforsMisc",
          "TestParforsDiagnostics",
          "TestPrangeBase",
          "TestPrangeBasic",
          "TestPrangeSpecific",
          "TestParforChunksizing",
          "TestParforsVectorizer",
          "TestParforReductionSetNumThreads",
          "TestDiagnosticEnvVar",
          "BreakParfors",
          "BreakParforsCompiler",
          "DummyType",
          "Dummy",
          "Broken"
        ],
        "num_lines": 4970
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_entrypoints.py": {
        "functions": [
          "__init__",
          "__repr__",
          "test_init_entrypoint",
          "test_entrypoint_tolerance",
          "test_entrypoint_handles_type_extensions",
          "run_cmd",
          "test_entrypoint_extension_sequence",
          "init_function",
          "typer_DummyClass",
          "unbox_dummy",
          "box_dummy",
          "__init__",
          "__init__",
          "foo"
        ],
        "classes": [
          "_DummyClass",
          "TestEntrypoints",
          "DummyType",
          "DummyModel"
        ],
        "num_lines": 227
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_pipeline.py": {
        "functions": [
          "setUp",
          "test_jit_custom_pipeline",
          "test_cfunc_custom_pipeline",
          "test_objmode_custom_pipeline",
          "_create_pipeline_w_del",
          "test_compiler_error_on_ir_del_from_functionpass",
          "test_no_compiler_error_on_ir_del_after_legalization",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo",
          "compile_extra",
          "compile_ir",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "TestCustomPipeline",
          "TestPassManagerFunctionality",
          "CustomPipeline",
          "_InjectDelsPass",
          "TestCompiler"
        ],
        "num_lines": 143
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_sets.py": {
        "functions": [
          "_build_set_literal_usecase",
          "set_literal_return_usecase",
          "set_literal_convert_usecase",
          "empty_constructor_usecase",
          "constructor_usecase",
          "iterator_usecase",
          "update_usecase",
          "bool_usecase",
          "remove_usecase",
          "discard_usecase",
          "add_discard_usecase",
          "pop_usecase",
          "contains_usecase",
          "difference_update_usecase",
          "intersection_update_usecase",
          "symmetric_difference_update_usecase",
          "isdisjoint_usecase",
          "issubset_usecase",
          "issuperset_usecase",
          "clear_usecase",
          "copy_usecase",
          "copy_usecase_empty",
          "copy_usecase_deleted",
          "difference_usecase",
          "intersection_usecase",
          "symmetric_difference_usecase",
          "union_usecase",
          "set_return_usecase",
          "noop",
          "unbox_usecase",
          "unbox_usecase2",
          "unbox_usecase3",
          "unbox_usecase4",
          "reflect_simple",
          "reflect_conditional",
          "reflect_exception",
          "reflect_dual",
          "unique_usecase",
          "setUp",
          "_range",
          "_random_choice",
          "duplicates_array",
          "sparse_array",
          "_assert_equal_unordered",
          "unordered_checker",
          "check",
          "test_build_set",
          "test_build_heterogeneous_set",
          "test_build_set_nopython",
          "test_constructor",
          "test_set_return",
          "test_iterator",
          "test_update",
          "test_remove",
          "test_remove_error",
          "test_discard",
          "test_add_discard",
          "test_pop",
          "test_contains",
          "_test_xxx_update",
          "test_difference_update",
          "test_intersection_update",
          "test_symmetric_difference_update",
          "_test_comparator",
          "test_isdisjoint",
          "test_issubset",
          "test_issuperset",
          "test_clear",
          "test_copy",
          "test_bool",
          "_test_set_operator",
          "make_operator_usecase",
          "make_inplace_operator_usecase",
          "make_comparison_usecase",
          "test_difference",
          "test_intersection",
          "test_symmetric_difference",
          "test_union",
          "test_and",
          "test_or",
          "test_sub",
          "test_xor",
          "test_eq",
          "test_ne",
          "test_le",
          "test_lt",
          "test_ge",
          "test_gt",
          "test_iand",
          "test_ior",
          "test_isub",
          "test_ixor",
          "_range",
          "_range",
          "_range",
          "_test_set_operator",
          "symmetric_difference_usecase",
          "difference_usecase",
          "intersection_usecase",
          "union_usecase",
          "_test_set_operator",
          "test_difference",
          "test_intersection",
          "test_symmetric_difference",
          "test_union",
          "make_operator_usecase",
          "make_inplace_operator_usecase",
          "make_comparison_usecase",
          "assert_type_error",
          "check_unary",
          "test_numbers",
          "test_tuples",
          "test_set_inside_tuple",
          "test_set_of_tuples_inside_tuple",
          "test_errors",
          "check_reflection",
          "test_reflect_simple",
          "test_reflect_conditional",
          "test_reflect_exception",
          "test_reflect_same_set",
          "test_reflect_clean",
          "test_unique",
          "test_type_coercion_from_update",
          "check",
          "check",
          "check",
          "check",
          "check",
          "impl"
        ],
        "classes": [
          "BaseTest",
          "TestSetLiterals",
          "TestSets",
          "TestFloatSets",
          "TestTupleSets",
          "TestUnicodeSets",
          "TestSetsInvalidDtype",
          "TestSetsInvalid",
          "TestUnboxing",
          "TestSetReflection",
          "TestExamples"
        ],
        "num_lines": 868
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_help.py": {
        "functions": [
          "check_function_descriptor",
          "test_inspect_function_on_range",
          "test_inspect_function_on_np_all",
          "test_inspect_module",
          "test_inspect_cli"
        ],
        "classes": [
          "TestInspector"
        ],
        "num_lines": 92
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_dyn_array.py": {
        "functions": [
          "np_concatenate1",
          "np_concatenate2",
          "np_stack1",
          "np_stack2",
          "np_hstack",
          "np_vstack",
          "np_row_stack",
          "np_dstack",
          "np_column_stack",
          "benchmark_refct_speed",
          "check_outputs",
          "assert_array_nrt_refct",
          "test_empty_0d",
          "test_empty_1d",
          "test_empty_2d",
          "test_empty_3d",
          "test_empty_2d_sliced",
          "test_return_global_array",
          "test_return_global_array_sliced",
          "test_array_pass_through",
          "test_array_pass_through_sliced",
          "test_ufunc_with_allocated_output",
          "test_allocation_mt",
          "test_refct_mt",
          "test_invalid_size_array",
          "test_swap",
          "test_return_tuple_of_array",
          "test_return_tuple_of_array_created",
          "test_issue_with_return_leak",
          "check_0d",
          "check_1d",
          "check_2d",
          "check_alloc_size",
          "setUp",
          "check_result_value",
          "test_0d",
          "test_1d",
          "test_1d_dtype",
          "test_1d_dtype_instance",
          "test_1d_dtype_str",
          "test_1d_dtype_str_alternative_spelling",
          "test_1d_dtype_str_structured_dtype",
          "test_1d_dtype_non_const_str",
          "test_1d_dtype_invalid_str",
          "test_2d",
          "test_2d_shape_dtypes",
          "test_2d_dtype_kwarg",
          "test_2d_dtype_str_kwarg",
          "test_2d_dtype_str_kwarg_alternative_spelling",
          "test_alloc_size",
          "setUp",
          "test_1d_dtype_str_structured_dtype",
          "check_result_value",
          "test_0d",
          "test_1d",
          "test_1d_dtype",
          "test_1d_dtype_instance",
          "test_1d_dtype_str",
          "test_1d_dtype_str_alternative_spelling",
          "test_1d_dtype_non_const_str",
          "test_1d_dtype_invalid_str",
          "test_2d",
          "test_2d_dtype_kwarg",
          "test_2d_dtype_from_type",
          "test_2d_shape_dtypes",
          "test_alloc_size",
          "mutate_array",
          "check_like",
          "setUp",
          "check_result_value",
          "test_like",
          "test_like_structured",
          "test_like_dtype",
          "test_like_dtype_instance",
          "test_like_dtype_structured",
          "test_like_dtype_kwarg",
          "test_like_dtype_str_kwarg",
          "test_like_dtype_str_kwarg_alternative_spelling",
          "test_like_dtype_non_const_str",
          "test_like_dtype_invalid_str",
          "setUp",
          "check_result_value",
          "test_like_structured",
          "test_like_dtype_structured",
          "setUp",
          "test_like_structured",
          "test_like_dtype_structured",
          "check_result_value",
          "test_like",
          "test_like_structured",
          "test_like_dtype",
          "test_like_dtype_instance",
          "test_like_dtype_kwarg",
          "test_like_dtype_str_kwarg",
          "test_like_dtype_str_kwarg_alternative_spelling",
          "test_like_dtype_non_const_str_kwarg",
          "test_like_dtype_invalid_str",
          "check_identity",
          "test_identity",
          "test_identity_dtype",
          "test_like_dtype_non_const_str_kwarg",
          "test_eye_n",
          "test_eye_n_dtype",
          "test_eye_n_m",
          "check_eye_n_m_k",
          "test_eye_n_m_k",
          "test_eye_n_m_k_dtype",
          "test_eye_n_m_k_dtype_instance",
          "setUp",
          "check_diag",
          "test_diag_vect_create",
          "test_diag_vect_create_kwarg",
          "test_diag_extract",
          "test_diag_extract_kwarg",
          "test_error_handling",
          "test_bad_shape",
          "test_linspace_2",
          "test_linspace_3",
          "test_linspace_accuracy",
          "_test_with_dtype_kw",
          "test_with_dtype_kws",
          "_test_with_shape_and_dtype_kw",
          "test_with_shape_and_dtype_kws",
          "test_empty_no_args",
          "test_0d",
          "test_0d_with_dtype",
          "test_1d",
          "test_1d_with_dtype",
          "test_1d_with_str_dtype",
          "test_1d_with_non_const_str_dtype",
          "test_2d",
          "test_2d_with_dtype",
          "test_raises",
          "test_bad_array",
          "test_bad_dtype",
          "_3d_arrays",
          "assert_invalid_sizes_over_dim",
          "test_3d",
          "test_3d_no_axis",
          "test_typing_errors",
          "_3d_arrays",
          "assert_invalid_sizes",
          "check_stack",
          "check_3d",
          "check_runtime_errors",
          "test_3d",
          "test_3d_no_axis",
          "test_0d",
          "check_xxstack",
          "test_hstack",
          "test_vstack",
          "test_dstack",
          "test_column_stack",
          "test_bad_arrays",
          "pyfunc",
          "bench_pyfunc",
          "bench_cfunc",
          "foo",
          "foo",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "return_external_array",
          "return_external_array",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "wrapped",
          "pyfunc",
          "wrapped",
          "foo",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "inner",
          "pyfunc",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func1",
          "func2",
          "func",
          "func",
          "func",
          "gen_func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func1",
          "func2",
          "gen_func",
          "check_arr",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func",
          "func_kwarg",
          "pyfunc",
          "pyfunc",
          "foo",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "func",
          "pyfunc",
          "pyfunc",
          "pyfunc",
          "check_raises",
          "func",
          "func",
          "check",
          "check_all_axes",
          "check",
          "check",
          "check_all_axes",
          "generate_starargs",
          "generate_starargs",
          "generate_starargs",
          "func",
          "func"
        ],
        "classes": [
          "BaseTest",
          "NrtRefCtTest",
          "TestDynArray",
          "ConstructorBaseTest",
          "TestNdZeros",
          "TestNdOnes",
          "TestNdFull",
          "ConstructorLikeBaseTest",
          "TestNdEmptyLike",
          "TestNdZerosLike",
          "TestNdOnesLike",
          "TestNdFullLike",
          "TestNdIdentity",
          "TestNdEye",
          "TestNdDiag",
          "TestLinspace",
          "TestNpyEmptyKeyword",
          "TestNpArray",
          "TestNpConcatenate",
          "TestNpStack"
        ],
        "num_lines": 1864
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_objects.py": {
        "functions": [
          "setattr_usecase",
          "delattr_usecase",
          "test_setattr",
          "test_setattr_attribute_error",
          "test_delattr",
          "test_delattr_attribute_error"
        ],
        "classes": [
          "C",
          "TestAttributes"
        ],
        "num_lines": 57
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_record_dtype.py": {
        "functions": [
          "get_a",
          "get_b",
          "get_c",
          "make_getitem",
          "get_zero_a",
          "get_a_subarray",
          "get_b_subarray",
          "get_c_subarray",
          "get_a_zero",
          "make_getitem_subarray",
          "get_two_arrays_a",
          "get_two_arrays_b",
          "get_two_arrays_c",
          "get_two_arrays_distinct",
          "set_a",
          "set_b",
          "set_c",
          "make_setitem",
          "set_a_subarray",
          "set_b_subarray",
          "set_c_subarray",
          "make_setitem_subarray",
          "set_record",
          "get_record_a",
          "get_record_b",
          "get_record_c",
          "get_record_rev_a",
          "get_record_rev_b",
          "get_record_rev_c",
          "get_two_records_a",
          "get_two_records_b",
          "get_two_records_c",
          "get_two_records_distinct",
          "record_return",
          "record_write_array",
          "record_write_2d_array",
          "record_write_full_array",
          "record_write_full_array_alt",
          "recarray_set_record",
          "recarray_write_array_of_nestedarray_broadcast",
          "record_setitem_array",
          "recarray_write_array_of_nestedarray",
          "recarray_getitem_return",
          "recarray_getitem_field_return",
          "recarray_getitem_field_return2",
          "recarray_getitem_field_return2_2d",
          "rec_getitem_field_slice_2d",
          "recarray_getitem_field_slice_2d",
          "array_rec_getitem_field_slice_2d_0",
          "array_getitem_field_slice_2d_0",
          "array_rec_getitem_field_slice_2d_1",
          "array_getitem_field_slice_2d_1",
          "rec_getitem_range_slice_4d",
          "recarray_getitem_range_slice_4d",
          "record_read_array0",
          "record_read_array0_alt",
          "record_read_array1",
          "record_read_whole_array",
          "record_read_2d_array00",
          "record_read_2d_array10",
          "record_read_2d_array01",
          "record_read_first_arr",
          "record_read_second_arr",
          "get_shape",
          "get_size",
          "get_charseq",
          "set_charseq",
          "get_charseq_tuple",
          "get_field1",
          "get_field2",
          "get_field3",
          "get_field4",
          "set_field1",
          "set_field2",
          "set_field3",
          "set_field4",
          "set_field_slice",
          "assign_array_to_nested",
          "assign_array_to_nested_2d",
          "_get_cfunc_nopython",
          "get_xx",
          "get_xx_subarray",
          "set_xx",
          "set_xx_subarray",
          "test_two_scalars",
          "test_three_scalars",
          "test_complex_struct",
          "test_nestedarray_issue_8132",
          "_createSampleArrays",
          "setUp",
          "get_cfunc",
          "test_from_dtype",
          "_test_get_equal",
          "test_get_a",
          "test_get_b",
          "test_get_c",
          "test_getitem_static_int_index",
          "_test_get_two_equal",
          "test_two_distinct_arrays",
          "test_get_two_a",
          "test_get_two_b",
          "test_get_two_c",
          "_test_set_equal",
          "test_set_a",
          "test_set_b",
          "test_set_c",
          "test_setitem_static_int_index",
          "test_set_record",
          "_test_record_args",
          "test_record_args",
          "test_record_args_reverse",
          "test_two_records",
          "test_two_distinct_records",
          "test_record_return",
          "test_record_arg_transform",
          "test_record_two_arrays",
          "test_structure_dtype_with_titles",
          "test_record_dtype_with_titles_roundtrip",
          "get_cfunc",
          "_createSampleArrays",
          "get_cfunc",
          "_createSampleaArray",
          "_fillData",
          "setUp",
          "get_cfunc",
          "test_return_charseq",
          "test_npm_argument_charseq",
          "test_py_argument_charseq",
          "test_py_argument_char_seq_near_overflow",
          "test_py_argument_char_seq_truncate",
          "test_return_charseq_tuple",
          "test_literal_variable",
          "test_literal_unroll",
          "test_literal_variable_global_tuple",
          "test_literal_unroll_global_tuple",
          "test_literal_unroll_free_var_tuple",
          "test_error_w_invalid_field",
          "test_literal_unroll_dynamic_to_static_getitem_transform",
          "test_literal_variable",
          "test_literal_unroll",
          "test_literal_variable_global_tuple",
          "test_literal_unroll_global_tuple",
          "test_literal_unroll_free_var_tuple",
          "test_error_w_invalid_field",
          "setUp",
          "test_common_field",
          "test_tuple_of_records",
          "test_array_field",
          "test_no_subtyping1",
          "test_no_subtyping2",
          "test_no_subtyping3",
          "test_branch_pruning",
          "get_cfunc",
          "test_record_write_array",
          "test_record_write_2d_array",
          "test_record_read_array",
          "test_record_read_arrays",
          "test_record_read_2d_array",
          "test_set_record",
          "test_set_array",
          "test_set_arrays",
          "test_setitem",
          "test_setitem_whole_array_error",
          "test_getitem_idx",
          "test_getitem_idx_2darray",
          "test_return_getattr_getitem_fieldname",
          "test_return_array",
          "test_slice_2d_array",
          "test_shape",
          "test_size",
          "test_corner_slice",
          "test_broadcast_slice",
          "test_assign_array_to_nested",
          "test_assign_array_to_nested_2d",
          "test_issue_7693",
          "test_issue_1469_1",
          "test_issue_1469_2",
          "test_issue_1469_3",
          "test_issue_3158_1",
          "test_issue_3158_2",
          "check",
          "check",
          "check",
          "check",
          "pyfunc",
          "pyfunc",
          "cfunc",
          "get_field",
          "pyfunc",
          "set_field",
          "foo",
          "foo",
          "foo",
          "foo",
          "gen",
          "copy",
          "fn",
          "fn"
        ],
        "classes": [
          "TestRecordDtypeMakeCStruct",
          "TestRecordDtype",
          "TestRecordDtypeWithDispatcher",
          "TestRecordDtypeWithStructArrays",
          "TestRecordDtypeWithStructArraysAndDispatcher",
          "TestRecordDtypeWithCharSeq",
          "TestRecordArrayGetItem",
          "TestRecordArraySetItem",
          "TestSubtyping",
          "TestNestedArrays",
          "Ref",
          "Ref",
          "Complex",
          "Ref"
        ],
        "num_lines": 1791
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_types.py": {
        "functions": [
          "gen",
          "test_equality",
          "test_weaktype",
          "test_interning",
          "test_cache_trimming",
          "test_array_notation",
          "test_array_notation_for_dtype",
          "test_call_notation",
          "test_list_type_getitem",
          "test_function_incompatible_templates",
          "test_bitwidth",
          "test_minval_maxval",
          "test_from_bidwidth",
          "test_ordering",
          "test_properties",
          "predefined_types",
          "check_pickling",
          "test_predefined_types",
          "test_atomic_types",
          "test_arrays",
          "test_records",
          "test_optional",
          "test_tuples",
          "test_namedtuples",
          "test_enums",
          "test_lists",
          "test_generator",
          "test_external_function_pointers",
          "test_normalize_signature",
          "test_record_type_equiv",
          "test_user_specified",
          "test_type_attr",
          "test_kind",
          "test_dtype_with_type",
          "test_dtype_with_string",
          "test_create_temp_module",
          "test_create_temp_module_with_exception",
          "test_externally_defined_type_is_external",
          "test_mixin_against_real_example",
          "test_omitted_type",
          "test_type_of_literal",
          "test_issue_typeref_key",
          "test_issue_list_type_key",
          "test_int_enum_no_conversion",
          "check",
          "check_index_error",
          "check",
          "func_stub",
          "func_stub2",
          "ol",
          "check_order",
          "check",
          "check",
          "check_error",
          "foo",
          "conv",
          "assert_matches",
          "tkind",
          "impl",
          "impl",
          "inner",
          "inner_overload",
          "my_func",
          "f",
          "g",
          "inner",
          "inner_overload",
          "my_func",
          "f",
          "g",
          "_typ_foo",
          "unbox_foo",
          "false_if_not_array",
          "ol_false_if_not_array",
          "call_false_if_not_array",
          "false_if_not_array_closed_system",
          "ol_false_if_not_array_closed_system",
          "call_false_if_not_array_closed_system",
          "_typ_foo",
          "unbox_foo",
          "foo_eq",
          "foo_ne",
          "f",
          "__init__",
          "key",
          "__init__",
          "key"
        ],
        "classes": [
          "Dummy",
          "TestTypes",
          "TestNumbers",
          "TestNdIter",
          "TestPickling",
          "TestSignatures",
          "TestRecordDtype",
          "TestDType",
          "TestIsInternalTypeMarker",
          "TestIssues",
          "DummyTemplate",
          "DummyTemplate",
          "NoUniqueNameType",
          "NoUniqueNameType",
          "Foo",
          "Foo"
        ],
        "num_lines": 889
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_codegen.py": {
        "functions": [
          "setUp",
          "tearDown",
          "compile_module",
          "_check_unserialize_sum",
          "test_get_pointer_to_function",
          "test_magic_tuple",
          "_check_serialize_unserialize",
          "_check_unserialize_other_process",
          "test_serialize_unserialize_bitcode",
          "test_unserialize_other_process_bitcode",
          "test_serialize_unserialize_object_code",
          "test_unserialize_other_process_object_code",
          "test_cache_disabled_inspection",
          "test_library_lifetime",
          "test_noinline_on_main_call",
          "foo"
        ],
        "classes": [
          "JITCPUCodegenTestCase",
          "TestWrappers"
        ],
        "num_lines": 264
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_random.py": {
        "functions": [
          "get_py_state_ptr",
          "get_np_state_ptr",
          "numpy_randint1",
          "numpy_randint2",
          "random_randint",
          "random_randrange1",
          "random_randrange2",
          "random_randrange3",
          "numpy_choice1",
          "numpy_choice2",
          "numpy_choice3",
          "numpy_multinomial2",
          "numpy_multinomial3",
          "numpy_dirichlet",
          "numpy_dirichlet_default",
          "numpy_noncentral_chisquare",
          "numpy_noncentral_chisquare_default",
          "numpy_check_rand",
          "numpy_check_randn",
          "jit_with_args",
          "jit_with_kwargs",
          "jit_nullary",
          "jit_unary",
          "jit_binary",
          "jit_ternary",
          "_copy_py_state",
          "_copy_np_state",
          "sync_to_numpy",
          "py_chisquare",
          "py_f",
          "py_extract_randomness",
          "np_extract_randomness",
          "_follow_cpython",
          "_follow_numpy",
          "_check_get_set_state",
          "_check_shuffle",
          "_check_init",
          "_check_perturb",
          "test_get_set_state",
          "test_shuffle",
          "test_init",
          "test_perturb",
          "_check_random_seed",
          "test_random_random",
          "test_numpy_random",
          "_check_random_sized",
          "test_numpy_random_sized",
          "test_independent_generators",
          "_check_getrandbits",
          "test_random_getrandbits",
          "_check_dist",
          "_check_dist_kwargs",
          "_check_gauss",
          "test_random_gauss",
          "test_random_normalvariate",
          "test_numpy_normal",
          "test_numpy_standard_normal",
          "test_numpy_randn",
          "_check_lognormvariate",
          "test_random_lognormvariate",
          "test_numpy_lognormal",
          "_check_randrange",
          "test_random_randrange",
          "test_numpy_randint",
          "_check_randint",
          "test_random_randint",
          "_check_uniform",
          "_check_any_distrib_kwargs",
          "test_random_uniform",
          "test_numpy_uniform",
          "test_numpy_uniform_kwargs",
          "test_numpy_uniform_empty_size",
          "_check_triangular",
          "test_random_triangular",
          "test_numpy_triangular",
          "_check_gammavariate",
          "test_random_gammavariate",
          "test_numpy_gamma",
          "_check_betavariate",
          "test_random_betavariate",
          "test_numpy_beta",
          "_check_vonmisesvariate",
          "test_random_vonmisesvariate",
          "test_numpy_vonmises",
          "_check_expovariate",
          "test_random_expovariate",
          "_check_exponential",
          "test_numpy_exponential",
          "test_numpy_standard_exponential",
          "_check_paretovariate",
          "test_random_paretovariate",
          "test_numpy_pareto",
          "_check_weibullvariate",
          "test_random_weibullvariate",
          "test_numpy_weibull",
          "test_numpy_binomial",
          "test_numpy_chisquare",
          "test_numpy_f",
          "test_numpy_geometric",
          "test_numpy_gumbel",
          "test_numpy_gumbel_kwargs",
          "test_numpy_hypergeometric",
          "test_numpy_laplace",
          "test_numpy_logistic",
          "test_numpy_logseries",
          "test_numpy_poisson",
          "test_numpy_negative_binomial",
          "test_numpy_power",
          "test_numpy_rayleigh",
          "test_numpy_standard_cauchy",
          "test_numpy_standard_t",
          "test_numpy_wald",
          "test_numpy_wald_kwargs",
          "test_numpy_zipf",
          "_check_shuffle",
          "test_random_shuffle",
          "test_numpy_shuffle",
          "_check_startup_randomness",
          "test_random_random_startup",
          "test_random_gauss_startup",
          "test_numpy_random_startup",
          "test_numpy_gauss_startup",
          "test_numpy_random_permutation",
          "_compile_array_dist",
          "_check_array_dist",
          "_check_array_dist_gamma",
          "_check_array_dist_self",
          "test_numpy_randint",
          "test_numpy_random_random",
          "test_numpy_beta",
          "test_numpy_binomial",
          "test_numpy_chisquare",
          "test_numpy_exponential",
          "test_numpy_f",
          "test_numpy_gamma",
          "test_numpy_geometric",
          "test_numpy_gumbel",
          "test_numpy_hypergeometric",
          "test_numpy_laplace",
          "test_numpy_logistic",
          "test_numpy_lognormal",
          "test_numpy_logseries",
          "test_numpy_normal",
          "test_numpy_pareto",
          "test_numpy_poisson",
          "test_numpy_power",
          "test_numpy_rand",
          "test_numpy_randn",
          "test_numpy_rayleigh",
          "test_numpy_standard_cauchy",
          "test_numpy_standard_exponential",
          "test_numpy_standard_gamma",
          "test_numpy_standard_normal",
          "test_numpy_triangular",
          "test_numpy_uniform",
          "test_numpy_wald",
          "test_numpy_vonmises",
          "test_numpy_zipf",
          "_check_results",
          "_check_dist",
          "_accumulate_array_results",
          "_check_choice_1",
          "test_choice_scalar_1",
          "test_choice_array_1",
          "_check_array_results",
          "_check_choice_2",
          "test_choice_scalar_2",
          "test_choice_array_2",
          "_check_choice_3",
          "test_choice_scalar_3",
          "test_choice_array_3",
          "test_choice_follows_seed",
          "_check_sample",
          "test_multinomial_2",
          "test_multinomial_3_int",
          "test_multinomial_3_tuple",
          "_check_sample",
          "test_dirichlet_default",
          "test_dirichlet",
          "test_dirichlet_exceptions",
          "_check_sample",
          "test_noncentral_chisquare_default",
          "test_noncentral_chisquare",
          "test_noncentral_chisquare_exceptions",
          "setUp",
          "_get_output",
          "check_output",
          "check_several_outputs",
          "extract_in_threads",
          "check_thread_safety",
          "check_implicit_initialization",
          "test_py_thread_safety",
          "test_np_thread_safety",
          "test_py_implicit_initialization",
          "test_np_implicit_initialization",
          "extract_in_processes",
          "check_implicit_initialization",
          "test_py_implicit_initialization",
          "test_np_implicit_initialization",
          "test_call_by_name",
          "test_call_distributions_with_empty_size",
          "reset",
          "numba_rands",
          "target",
          "target_inner",
          "target"
        ],
        "classes": [
          "BaseTest",
          "TestInternals",
          "TestRandom",
          "TestRandomArrays",
          "TestRandomChoice",
          "TestRandomMultinomial",
          "TestRandomDirichlet",
          "TestRandomNoncentralChiSquare",
          "ConcurrencyBaseTest",
          "TestThreads",
          "TestProcesses",
          "TestNumPyRandomAPI"
        ],
        "num_lines": 1967
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_return.py": {
        "functions": [
          "array_return",
          "array_return_start_with_loop",
          "test_array_return",
          "test_array_return_start_with_loop"
        ],
        "classes": [
          "TestArrayReturn"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/tests/test_nan.py": {
        "functions": [
          "isnan",
          "isequal",
          "test_nans",
          "test_nans_npm"
        ],
        "classes": [
          "TestNaN"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/testing/__init__.py": {
        "functions": [
          "load_testsuite",
          "run_tests"
        ],
        "classes": [],
        "num_lines": 61
      },
      "/tmp/cs-hpc-demo-1/numba/testing/loader.py": {
        "functions": [
          "__init__",
          "_find_tests"
        ],
        "classes": [
          "TestLoader"
        ],
        "num_lines": 26
      },
      "/tmp/cs-hpc-demo-1/numba/testing/_runtests.py": {
        "functions": [
          "_main",
          "main",
          "__init__",
          "main",
          "save_failed_tests",
          "find_last_failed"
        ],
        "classes": [
          "_FailedFirstRunner"
        ],
        "num_lines": 114
      },
      "/tmp/cs-hpc-demo-1/numba/testing/notebook.py": {
        "functions": [
          "isstr",
          "_test_notebook",
          "_test_notebook_cell",
          "dump_canonical",
          "scrub_outputs",
          "strip_keys",
          "sanitize_cell",
          "transform_message",
          "should_continue",
          "isstr",
          "_scrubLines"
        ],
        "classes": [
          "NotebookTest"
        ],
        "num_lines": 171
      },
      "/tmp/cs-hpc-demo-1/numba/testing/main.py": {
        "functions": [
          "make_tag_decorator",
          "_get_mtime",
          "cuda_sensitive_mtime",
          "parse_slice",
          "_flatten_suite_inner",
          "_flatten_suite",
          "_choose_gitdiff_tests",
          "_choose_tagged_tests",
          "_choose_random_tests",
          "_refleak_cleanup",
          "_split_nonparallel_tests",
          "tag",
          "__init__",
          "run",
          "__init__",
          "addTest",
          "run",
          "__init__",
          "run",
          "__init__",
          "_getParentArgParser",
          "_handle_tags",
          "parseArgs",
          "_do_discovery",
          "runTests",
          "key",
          "__missing__",
          "_huntLeaks",
          "addSuccess",
          "add_results",
          "fixup_case",
          "__init__",
          "__init__",
          "getvalue",
          "__init__",
          "__call__",
          "cleanup_object",
          "is_parallelizable_test_case",
          "__init__",
          "_run_inner",
          "_run_parallel_tests",
          "run",
          "decorate",
          "git_diff_str",
          "run_tests_real",
          "check_rc_deltas",
          "check_alloc_deltas",
          "decide"
        ],
        "classes": [
          "TestLister",
          "SerialSuite",
          "BasicTestRunner",
          "NumbaTestProgram",
          "ReferenceLeakError",
          "IntPool",
          "RefleakTestResult",
          "RefleakTestRunner",
          "ParallelTestResult",
          "_MinimalResult",
          "_FakeStringIO",
          "_MinimalRunner",
          "ParallelTestRunner"
        ],
        "num_lines": 871
      },
      "/tmp/cs-hpc-demo-1/numba/testing/__main__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 4
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/setobj.py": {
        "functions": [
          "get_payload_struct",
          "get_entry_size",
          "get_hash_value",
          "_get_hash_value_intrinsic",
          "is_hash_empty",
          "is_hash_deleted",
          "is_hash_used",
          "check_all_set",
          "build_set",
          "set_empty_constructor",
          "set_constructor",
          "set_len",
          "in_set",
          "getiter_set",
          "iternext_listiter",
          "set_add",
          "_set_discard",
          "ol_set_discard",
          "_set_pop",
          "ol_set_pop",
          "_set_remove",
          "ol_set_remove",
          "_set_clear",
          "ol_set_clear",
          "_set_copy",
          "ol_set_copy",
          "set_difference_update",
          "_set_difference_update",
          "set_difference_update_impl",
          "set_intersection_update",
          "_set_intersection_update",
          "set_intersection_update_impl",
          "set_symmetric_difference_update",
          "_set_symmetric_difference_update",
          "set_symmetric_difference_update_impl",
          "set_update",
          "gen_operator_impl",
          "impl_set_difference",
          "set_intersection",
          "set_symmetric_difference",
          "set_union",
          "_set_isdisjoint",
          "set_isdisjoint",
          "_set_issubset",
          "set_issubset",
          "set_issuperset",
          "_set_eq",
          "set_eq",
          "set_ne",
          "_set_lt",
          "set_lt",
          "set_gt",
          "set_is",
          "set_to_set",
          "impl",
          "__init__",
          "mask",
          "mask",
          "used",
          "used",
          "fill",
          "fill",
          "finger",
          "finger",
          "dirty",
          "dirty",
          "entries",
          "ptr",
          "get_entry",
          "_lookup",
          "_iterate",
          "_next_entry",
          "__init__",
          "dtype",
          "payload",
          "value",
          "meminfo",
          "parent",
          "parent",
          "get_size",
          "set_dirty",
          "_add_entry",
          "_add_key",
          "_remove_entry",
          "_remove_key",
          "add",
          "add_pyapi",
          "_pyapi_get_hash_value",
          "contains",
          "discard",
          "pop",
          "clear",
          "copy",
          "intersect",
          "difference",
          "symmetric_difference",
          "issubset",
          "isdisjoint",
          "equals",
          "allocate_ex",
          "allocate",
          "from_meminfo",
          "choose_alloc_size",
          "upsize",
          "downsize",
          "_resize",
          "_replace_payload",
          "_allocate_payload",
          "_free_payload",
          "_copy_payload",
          "_imp_dtor",
          "incref_value",
          "decref_value",
          "__init__",
          "from_set",
          "value",
          "meminfo",
          "index",
          "index",
          "iternext",
          "set_discard",
          "set_pop",
          "set_remove",
          "set_clear",
          "set_copy",
          "_set_operator_intr",
          "_ol_set_operator",
          "difference_impl",
          "intersection_impl",
          "symmetric_difference_impl",
          "union_impl",
          "codegen",
          "codegen",
          "superset_impl",
          "codegen",
          "ne_impl",
          "codegen",
          "gt_impl",
          "check_entry",
          "wrapper",
          "check",
          "codegen"
        ],
        "classes": [
          "_SetPayload",
          "SetInstance",
          "SetIterInstance"
        ],
        "num_lines": 1711
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/printimpl.py": {
        "functions": [
          "print_item_impl",
          "print_item_impl",
          "print_varargs_impl"
        ],
        "classes": [],
        "num_lines": 82
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/cmathimpl.py": {
        "functions": [
          "is_nan",
          "is_inf",
          "is_finite",
          "isnan_float_impl",
          "isinf_float_impl",
          "isfinite_float_impl",
          "impl_cmath_rect",
          "intrinsic_complex_unary",
          "exp_impl",
          "log_impl",
          "log_base_impl",
          "impl_cmath_log10",
          "phase_impl",
          "polar_impl",
          "sqrt_impl",
          "cos_impl",
          "impl_cmath_cosh",
          "sin_impl",
          "impl_cmath_sinh",
          "tan_impl",
          "impl_cmath_tanh",
          "acos_impl",
          "impl_cmath_acosh",
          "asinh_impl",
          "asin_impl",
          "atan_impl",
          "atanh_impl",
          "wrapper",
          "log_base",
          "log10_impl",
          "impl",
          "impl",
          "sqrt_impl",
          "cos_impl",
          "cosh_impl",
          "sin_impl",
          "sinh_impl",
          "tan_impl",
          "tanh_impl",
          "acos_impl",
          "acosh_impl",
          "asinh_impl",
          "asin_impl",
          "atan_impl",
          "atanh_impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 542
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/tupleobj.py": {
        "functions": [
          "namedtuple_constructor",
          "tuple_add",
          "tuple_cmp_ordered",
          "tuple_eq",
          "tuple_ne",
          "tuple_lt",
          "tuple_le",
          "tuple_gt",
          "tuple_ge",
          "namedtuple_getattr",
          "unituple_constant",
          "unituple_constant",
          "getiter_unituple",
          "iternext_unituple",
          "getitem_literal_idx",
          "getitem_typed",
          "getitem_unituple",
          "static_getitem_tuple",
          "tuple_to_tuple",
          "tuple_index",
          "in_seq_empty_tuple",
          "getitem_literal_idx_impl",
          "tuple_index_impl"
        ],
        "classes": [],
        "num_lines": 412
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/mathimpl.py": {
        "functions": [
          "is_nan",
          "is_inf",
          "is_finite",
          "f64_as_int64",
          "int64_as_f64",
          "f32_as_int32",
          "int32_as_f32",
          "negate_real",
          "call_fp_intrinsic",
          "_unary_int_input_wrapper_impl",
          "unary_math_int_impl",
          "unary_math_intr",
          "unary_math_extern",
          "isnan_float_impl",
          "isnan_int_impl",
          "isinf_float_impl",
          "isinf_int_impl",
          "isfinite_float_impl",
          "isfinite_int_impl",
          "copysign_float_impl",
          "frexp_impl",
          "ldexp_impl",
          "atan2_s64_impl",
          "atan2_u64_impl",
          "atan2_float_impl",
          "hypot_s64_impl",
          "hypot_u64_impl",
          "hypot_float_impl",
          "radians_float_impl",
          "degrees_float_impl",
          "pow_impl",
          "nextafter_impl",
          "_unsigned",
          "_unsigned_impl",
          "gcd_impl",
          "implementer",
          "float_impl",
          "float_impl",
          "gcd",
          "hypot_impl",
          "hypot_impl"
        ],
        "classes": [],
        "num_lines": 469
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/unicode.py": {
        "functions": [
          "compile_time_get_string_data",
          "make_string_from_constant",
          "cast_from_literal",
          "constant_unicode",
          "unbox_unicode_str",
          "box_unicode_str",
          "make_deref_codegen",
          "deref_uint8",
          "deref_uint16",
          "deref_uint32",
          "_malloc_string",
          "_empty_string",
          "_get_code_point",
          "make_set_codegen",
          "set_uint8",
          "set_uint16",
          "set_uint32",
          "_set_code_point",
          "_pick_ascii",
          "_cmp_region",
          "_codepoint_to_kind",
          "_codepoint_is_ascii",
          "unicode_len",
          "unicode_eq",
          "unicode_ne",
          "unicode_lt",
          "unicode_gt",
          "unicode_le",
          "unicode_ge",
          "unicode_contains",
          "unicode_idx_check_type",
          "unicode_sub_check_type",
          "_bloom_add",
          "_bloom_check",
          "_default_find",
          "_default_rfind",
          "generate_finder",
          "unicode_find",
          "unicode_rfind",
          "unicode_rindex",
          "unicode_index",
          "unicode_partition",
          "unicode_count",
          "unicode_rpartition",
          "_adjust_indices",
          "unicode_startswith",
          "unicode_endswith",
          "unicode_expandtabs",
          "unicode_split",
          "generate_rsplit_whitespace_impl",
          "unicode_rsplit",
          "unicode_center",
          "gen_unicode_Xjust",
          "generate_splitlines_func",
          "unicode_splitlines",
          "join_list",
          "unicode_join",
          "unicode_zfill",
          "unicode_strip_left_bound",
          "unicode_strip_right_bound",
          "unicode_strip_types_check",
          "_count_args_types_check",
          "unicode_lstrip",
          "unicode_rstrip",
          "unicode_strip",
          "normalize_str_idx",
          "_normalize_slice_idx_count",
          "_normalize_slice",
          "_slice_span",
          "_strncpy",
          "_get_str_slice_view",
          "unicode_getitem",
          "unicode_concat",
          "_repeat_impl",
          "unicode_repeat",
          "unicode_not",
          "unicode_replace",
          "gen_isAlX",
          "_is_upper",
          "unicode_isupper",
          "unicode_isascii",
          "unicode_istitle",
          "unicode_islower",
          "unicode_isidentifier",
          "gen_isX",
          "case_operation",
          "_handle_capital_sigma",
          "_lower_ucs4",
          "_gen_unicode_upper_or_lower",
          "_gen_ascii_upper_or_lower",
          "unicode_lower",
          "unicode_upper",
          "_unicode_casefold",
          "_ascii_casefold",
          "unicode_casefold",
          "_unicode_capitalize",
          "_ascii_capitalize",
          "unicode_capitalize",
          "_unicode_title",
          "_ascii_title",
          "unicode_title",
          "_ascii_swapcase",
          "_unicode_swapcase",
          "unicode_swapcase",
          "ol_ord",
          "_unicode_char",
          "_PyUnicode_FromOrdinal",
          "ol_chr",
          "unicode_str",
          "unicode_repr",
          "integer_str",
          "integer_repr",
          "boolean_str",
          "getiter_unicode",
          "iternext_unicode",
          "__init__",
          "__init__",
          "codegen",
          "details",
          "codegen",
          "_pick_kind",
          "_kind_to_byte_width",
          "impl",
          "rindex_impl",
          "index_impl",
          "impl",
          "impl",
          "expandtabs_impl",
          "rsplit_whitespace_impl",
          "_unicode_rsplit_check_type",
          "rsplit_impl",
          "center_impl",
          "unicode_Xjust",
          "impl",
          "splitlines_impl",
          "zfill_impl",
          "lstrip_impl",
          "rstrip_impl",
          "strip_impl",
          "codegen",
          "codegen",
          "codegen",
          "impl",
          "unicode_isAlX",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "unicode_isX",
          "impl",
          "_do_upper_or_lower",
          "_ascii_upper_or_lower",
          "impl",
          "_pick_kind",
          "_kind_to_byte_width",
          "len_impl",
          "eq_impl",
          "ne_impl",
          "lt_impl",
          "gt_impl",
          "le_impl",
          "ge_impl",
          "contains_impl",
          "find_impl",
          "rfind_impl",
          "count_impl",
          "startswith_tuple_impl",
          "endswith_impl",
          "endswith_impl",
          "endswith_impl",
          "split_impl",
          "split_impl",
          "rsplit_whitespace_impl",
          "_rsplit_char",
          "center_impl",
          "impl",
          "lstrip_impl",
          "rstrip_impl",
          "strip_impl",
          "concat_impl",
          "concat_impl",
          "wrap",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "eq_impl",
          "eq_impl",
          "startswith_char_seq_impl",
          "split_whitespace_impl",
          "join_list_impl",
          "join_iter_impl",
          "getitem_char",
          "wrap",
          "startswith_unicode_impl",
          "ljust_impl",
          "rjust_impl",
          "join_list_impl",
          "join_str_impl",
          "getitem_slice"
        ],
        "classes": [
          "UnicodeModel",
          "UnicodeIteratorModel"
        ],
        "num_lines": 2675
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/heapq.py": {
        "functions": [
          "_siftdown",
          "_siftup",
          "_siftdown_max",
          "_siftup_max",
          "reversed_range",
          "_heapify_max",
          "_heapreplace_max",
          "assert_heap_type",
          "assert_item_type_consistent_with_heap_type",
          "hq_heapify",
          "hq_heappop",
          "heappush",
          "heapreplace",
          "heappushpop",
          "check_input_types",
          "nsmallest",
          "nlargest",
          "hq_heapify_impl",
          "hq_heappop_impl",
          "hq_heappush_impl",
          "hq_heapreplace",
          "hq_heappushpop_impl",
          "hq_nsmallest_impl",
          "hq_nlargest_impl"
        ],
        "classes": [],
        "num_lines": 266
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/builtins.py": {
        "functions": [
          "ol_truth",
          "generic_is_not",
          "generic_is",
          "opaque_is",
          "bool_is_impl",
          "const_eq_impl",
          "const_ne_impl",
          "gen_non_eq",
          "deferred_getattr",
          "any_to_deferred",
          "deferred_to_any",
          "getitem_cpointer",
          "setitem_cpointer",
          "do_minmax",
          "max_iterable",
          "max_vararg",
          "min_iterable",
          "min_vararg",
          "_round_intrinsic",
          "round_impl_unary",
          "round_impl_binary",
          "int_impl",
          "float_literal_impl",
          "complex_impl",
          "number_constructor",
          "constant_dummy",
          "constant_function_pointer",
          "constant_optional",
          "type_impl",
          "iter_impl",
          "next_impl",
          "not_in",
          "constsized_len",
          "sized_bool",
          "lower_empty_tuple",
          "lower_tuple",
          "bool_sequence",
          "bool_none",
          "get_type_max_value",
          "get_type_min_value",
          "lower_get_type_min_value",
          "lower_get_type_max_value",
          "impl_index_value",
          "indval_min",
          "boolval_min",
          "indval_max",
          "boolval_max",
          "min_max_impl",
          "iterable_min",
          "iterable_max",
          "redirect_type_ctor",
          "ol_sum",
          "ol_map",
          "ol_filter",
          "ol_isinstance",
          "_getattr_raise_attr_exc",
          "ol__getattr_raise_attr_exc",
          "resolve_getattr",
          "ol_getattr_2",
          "ol_getattr_3",
          "resolve_hasattr",
          "ol_hasattr",
          "ol_repr_generic",
          "ol_str_generic",
          "none_equality",
          "binary_minmax",
          "round_ndigits",
          "in_impl",
          "generic",
          "call_ctor",
          "impl",
          "impl",
          "true_impl",
          "false_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "foo",
          "bool_impl",
          "min_impl",
          "bool_min_impl",
          "max_impl",
          "bool_max_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "MinValInfer"
        ],
        "num_lines": 1025
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/randomimpl.py": {
        "functions": [
          "const_int",
          "get_state_ptr",
          "get_py_state_ptr",
          "get_np_state_ptr",
          "get_internal_state_ptr",
          "get_index_ptr",
          "get_array_ptr",
          "get_has_gauss_ptr",
          "get_gauss_ptr",
          "get_rnd_shuffle",
          "get_next_int32",
          "get_next_double",
          "get_next_int",
          "seed_impl",
          "seed_impl",
          "_seed_impl",
          "random_impl",
          "random_impl0",
          "random_impl1",
          "gauss_impl",
          "np_gauss_impl0",
          "np_gauss_impl1",
          "np_gauss_impl2",
          "standard_normal_impl1",
          "np_gauss_impl3",
          "_gauss_pair_impl",
          "_gauss_impl",
          "_double_preprocessor",
          "getrandbits_impl",
          "_randrange_impl",
          "randrange_impl_1",
          "randrange_impl_2",
          "_randrange_preprocessor",
          "randrange_impl_3",
          "randint_impl_1",
          "np_randint_impl_1",
          "np_randint_impl_2",
          "np_randint_impl_3",
          "np_uniform_impl0",
          "uniform_impl2",
          "np_uniform_impl2",
          "uniform_impl",
          "np_uniform_impl3",
          "triangular_impl_2",
          "triangular_impl_3",
          "triangular_impl_3",
          "triangular_impl",
          "gammavariate_impl",
          "ol_np_random_gamma1",
          "ol_np_random_gamma2",
          "_gammavariate_impl",
          "gamma_impl",
          "standard_gamma_impl",
          "betavariate_impl",
          "ol_np_random_beta",
          "_betavariate_impl",
          "beta_impl",
          "expovariate_impl",
          "exponential_impl",
          "exponential_impl",
          "exponential_impl",
          "standard_exponential_impl",
          "np_lognormal_impl0",
          "np_log_normal_impl1",
          "np_log_normal_impl2",
          "lognormal_impl",
          "lognormvariate_impl",
          "_lognormvariate_impl",
          "paretovariate_impl",
          "pareto_impl",
          "pareto_impl",
          "weibullvariate_impl",
          "weibull_impl",
          "weibull_impl2",
          "vonmisesvariate_impl",
          "vonmisesvariate_impl",
          "_vonmisesvariate_impl",
          "vonmises_impl",
          "binomial_impl",
          "binomial_impl",
          "chisquare_impl",
          "chisquare_impl2",
          "f_impl",
          "f_impl",
          "geometric_impl",
          "geometric_impl",
          "gumbel_impl",
          "gumbel_impl3",
          "hypergeometric_impl",
          "hypergeometric_impl",
          "laplace_impl0",
          "laplace_impl1",
          "laplace_impl2",
          "laplace_impl3",
          "laplace_impl",
          "logistic_impl0",
          "logistic_impl1",
          "logistic_impl2",
          "logistic_impl3",
          "logistic_impl",
          "_logseries_impl",
          "logseries_impl",
          "logseries_impl",
          "negative_binomial_impl",
          "poisson_impl0",
          "poisson_impl1",
          "poisson_impl2",
          "power_impl",
          "power_impl",
          "rayleigh_impl0",
          "rayleigh_impl1",
          "rayleigh_impl2",
          "cauchy_impl",
          "standard_cauchy_impl",
          "standard_t_impl",
          "standard_t_impl2",
          "wald_impl",
          "wald_impl2",
          "zipf_impl",
          "zipf_impl",
          "do_shuffle_impl",
          "shuffle_impl",
          "shuffle_impl",
          "permutation_impl",
          "rand",
          "randn",
          "choice",
          "multinomial",
          "dirichlet",
          "dirichlet",
          "dirichlet_arr",
          "noncentral_chisquare",
          "noncentral_chisquare",
          "noncentral_chisquare_single",
          "validate_noncentral_chisquare_input",
          "get_shifted_int",
          "_impl",
          "_impl",
          "_impl",
          "compute_gauss_pair",
          "_impl",
          "get_num",
          "impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "multinomial_inner",
          "impl",
          "codegen",
          "codegen",
          "codegen",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "impl",
          "_impl",
          "_impl",
          "impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "_impl",
          "impl",
          "impl",
          "permutation_impl",
          "rand_impl",
          "rand_impl",
          "randn_impl",
          "randn_impl",
          "get_source_size",
          "copy_source",
          "getitem",
          "choice_impl",
          "choice_impl",
          "multinomial_impl",
          "dirichlet_impl",
          "dirichlet_impl",
          "noncentral_chisquare_impl",
          "noncentral_chisquare_impl",
          "noncentral_chisquare_impl",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "permutation_impl",
          "get_source_size",
          "copy_source",
          "getitem",
          "multinomial_impl",
          "dirichlet_impl",
          "noncentral_chisquare_impl",
          "poisson_impl",
          "multinomial_impl",
          "dirichlet_impl"
        ],
        "classes": [],
        "num_lines": 2335
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/slicing.py": {
        "functions": [
          "fix_index",
          "fix_slice",
          "get_slice_length",
          "get_slice_bounds",
          "fix_stride",
          "guard_invalid_slice",
          "get_defaults",
          "slice_constructor_impl",
          "slice_start_impl",
          "slice_stop_impl",
          "slice_step_impl",
          "slice_indices",
          "make_slice_from_constant",
          "constant_slice",
          "cast_from_literal",
          "fix_bound",
          "get_arg_value"
        ],
        "classes": [],
        "num_lines": 302
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/numbers.py": {
        "functions": [
          "_int_arith_flags",
          "int_add_impl",
          "int_sub_impl",
          "int_mul_impl",
          "int_divmod_signed",
          "int_divmod",
          "_int_divmod_impl",
          "int_divmod_impl",
          "int_floordiv_impl",
          "int_truediv_impl",
          "int_rem_impl",
          "_get_power_zerodiv_return",
          "int_power_impl",
          "static_power_impl",
          "int_slt_impl",
          "int_sle_impl",
          "int_sgt_impl",
          "int_sge_impl",
          "int_ult_impl",
          "int_ule_impl",
          "int_ugt_impl",
          "int_uge_impl",
          "int_eq_impl",
          "int_ne_impl",
          "int_signed_unsigned_cmp",
          "int_unsigned_signed_cmp",
          "int_abs_impl",
          "uint_abs_impl",
          "int_shl_impl",
          "int_shr_impl",
          "int_and_impl",
          "int_or_impl",
          "int_xor_impl",
          "int_negate_impl",
          "int_positive_impl",
          "int_invert_impl",
          "int_sign_impl",
          "bool_negate_impl",
          "bool_unary_positive_impl",
          "_implement_integer_operators",
          "_implement_bitwise_operators",
          "real_add_impl",
          "real_sub_impl",
          "real_mul_impl",
          "real_div_impl",
          "real_divmod",
          "real_divmod_func_body",
          "real_divmod_impl",
          "real_mod_impl",
          "real_floordiv_impl",
          "real_power_impl",
          "real_lt_impl",
          "real_le_impl",
          "real_gt_impl",
          "real_ge_impl",
          "real_eq_impl",
          "real_ne_impl",
          "real_abs_impl",
          "real_negate_impl",
          "real_positive_impl",
          "real_sign_impl",
          "complex_real_impl",
          "complex_imag_impl",
          "complex_conjugate_impl",
          "real_real_impl",
          "real_imag_impl",
          "real_conjugate_impl",
          "complex_power_impl",
          "complex_add_impl",
          "complex_sub_impl",
          "complex_mul_impl",
          "complex_div_impl",
          "complex_negate_impl",
          "complex_positive_impl",
          "complex_eq_impl",
          "complex_ne_impl",
          "complex_abs_impl",
          "number_item_impl",
          "number_not_impl",
          "bool_as_bool",
          "int_as_bool",
          "float_as_bool",
          "complex_as_bool",
          "literal_int_to_number",
          "integer_to_integer",
          "integer_to_voidptr",
          "float_to_float",
          "integer_to_float",
          "float_to_integer",
          "non_complex_to_complex",
          "complex_to_complex",
          "any_to_boolean",
          "boolean_to_any",
          "literal_int_to_boolean",
          "constant_complex",
          "constant_integer",
          "scalar_view",
          "int_power",
          "mul",
          "impl",
          "impl",
          "complex_div",
          "complex_abs",
          "impl",
          "invert_impl",
          "invert_impl"
        ],
        "classes": [],
        "num_lines": 1395
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/listobj.py": {
        "functions": [
          "get_list_payload",
          "get_itemsize",
          "build_list",
          "list_constructor",
          "list_constructor",
          "list_len",
          "getiter_list",
          "iternext_listiter",
          "getitem_list",
          "setitem_list",
          "getslice_list",
          "setitem_list",
          "delitem_list_index",
          "delitem_list",
          "in_seq",
          "sequence_bool",
          "sequence_truth",
          "list_add",
          "list_add_inplace",
          "list_mul",
          "list_mul_inplace",
          "list_is",
          "list_eq",
          "all_list",
          "impl_list_ne",
          "impl_list_le",
          "impl_list_lt",
          "impl_list_ge",
          "impl_list_gt",
          "list_append",
          "list_clear",
          "list_copy",
          "list_count",
          "_list_extend_list",
          "list_extend",
          "list_index",
          "list_insert",
          "list_pop",
          "list_pop",
          "list_remove",
          "list_reverse",
          "gt",
          "_sort_check_reverse",
          "_sort_check_key",
          "ol_list_sort",
          "ol_sorted",
          "list_to_list",
          "literal_list_banned_append",
          "literal_list_banned_extend",
          "literal_list_banned_insert",
          "literal_list_banned_remove",
          "literal_list_banned_pop",
          "literal_list_banned_clear",
          "literal_list_banned_sort",
          "literal_list_banned_reverse",
          "literal_list_index",
          "literal_list_count",
          "literal_list_count",
          "literal_list_delitem",
          "literal_list_setitem",
          "literal_list_getitem",
          "literal_list_len",
          "literal_list_contains",
          "literallist_to_literallist",
          "size",
          "size",
          "dirty",
          "data",
          "_gep",
          "getitem",
          "fix_index",
          "is_out_of_bounds",
          "clamp_index",
          "guard_index",
          "fix_slice",
          "incref_value",
          "decref_value",
          "__init__",
          "__init__",
          "dtype",
          "_payload",
          "parent",
          "parent",
          "value",
          "meminfo",
          "set_dirty",
          "clear_value",
          "setitem",
          "inititem",
          "zfill",
          "allocate_ex",
          "define_dtor",
          "get_dtor",
          "allocate",
          "from_meminfo",
          "resize",
          "move",
          "__init__",
          "from_list",
          "_payload",
          "value",
          "index",
          "index",
          "list_impl",
          "list_delitem_impl",
          "seq_contains_impl",
          "sequence_bool_impl",
          "list_ne_impl",
          "list_le_impl",
          "list_lt_impl",
          "list_ge_impl",
          "list_gt_impl",
          "list_copy_impl",
          "list_count_impl",
          "list_extend",
          "list_index_impl",
          "list_remove_impl",
          "list_reverse_impl",
          "impl",
          "impl",
          "_payload_realloc",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [
          "_ListPayloadMixin",
          "ListPayloadAccessor",
          "ListInstance",
          "ListIterInstance"
        ],
        "num_lines": 1260
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/charseq.py": {
        "functions": [
          "make_deref_codegen",
          "deref_uint8",
          "deref_uint16",
          "deref_uint32",
          "charseq_get_code",
          "charseq_get_value",
          "unicode_charseq_get_code",
          "unicode_get_code",
          "bytes_get_code",
          "_get_code_impl",
          "_same_kind",
          "_is_bytes",
          "is_default",
          "unicode_charseq_get_value",
          "bytes_to_charseq",
          "_make_constant_bytes",
          "charseq_to_bytes",
          "unicode_to_bytes_cast",
          "_unicode_to_bytes",
          "unicode_to_unicode_charseq",
          "charseq_getitem",
          "charseq_len",
          "charseq_concat",
          "charseq_repeat",
          "charseq_not",
          "charseq_eq",
          "charseq_ne",
          "charseq_lt",
          "charseq_gt",
          "charseq_le",
          "charseq_ge",
          "charseq_contains",
          "charseq_isascii",
          "charseq_get_kind",
          "unicode_to_bytes_mth",
          "charseq_to_str_mth",
          "charseq_str",
          "charseq_bytes",
          "unicode_charseq_hash",
          "charseq_hash",
          "unicode_charseq_isupper",
          "charseq_isupper",
          "unicode_charseq_upper",
          "charseq_upper",
          "unicode_charseq_find",
          "unicode_charseq_rfind",
          "unicode_charseq_startswith",
          "unicode_charseq_endswith",
          "_map_bytes",
          "unicode_charseq_split",
          "unicode_charseq_ljust",
          "unicode_charseq_rjust",
          "unicode_charseq_center",
          "unicode_charseq_zfill",
          "unicode_charseq_lstrip",
          "unicode_charseq_rstrip",
          "unicode_charseq_strip",
          "unicode_charseq_join",
          "codegen",
          "codegen",
          "impl",
          "impl",
          "impl",
          "tostr_impl",
          "str_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "getitem_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "wrap",
          "wrap",
          "wrap",
          "wrap",
          "impl",
          "eq_impl",
          "ne_impl",
          "lt_impl",
          "gt_impl",
          "le_impl",
          "ge_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "len_impl",
          "len_impl",
          "contains_impl",
          "contains_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 1023
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/rangeobj.py": {
        "functions": [
          "make_range_iterator",
          "make_range_impl",
          "range_to_range",
          "make_range_attr",
          "impl_contains_helper",
          "impl_contains",
          "range1_impl",
          "range2_impl",
          "range3_impl",
          "range_len",
          "getiter_range32_impl",
          "rangetype_attr_getter",
          "range_attr",
          "impl_false",
          "from_range_state",
          "iternext",
          "get",
          "codegen",
          "impl",
          "impl"
        ],
        "classes": [
          "RangeIter"
        ],
        "num_lines": 247
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/unicode_support.py": {
        "functions": [
          "_PyUnicode_gettyperecord",
          "_gettyperecord_impl",
          "gettyperecord_impl",
          "_PyUnicode_ExtendedCase",
          "_PyUnicode_ToTitlecase",
          "_PyUnicode_IsTitlecase",
          "_PyUnicode_IsXidStart",
          "_PyUnicode_IsXidContinue",
          "_PyUnicode_ToDecimalDigit",
          "_PyUnicode_ToDigit",
          "_PyUnicode_IsNumeric",
          "_PyUnicode_IsPrintable",
          "_PyUnicode_IsLowercase",
          "_PyUnicode_IsUppercase",
          "_PyUnicode_IsLineBreak",
          "_PyUnicode_ToUppercase",
          "_PyUnicode_ToLowercase",
          "_PyUnicode_ToLowerFull",
          "_PyUnicode_ToTitleFull",
          "_PyUnicode_ToUpperFull",
          "_PyUnicode_ToFoldedFull",
          "_PyUnicode_IsCased",
          "_PyUnicode_IsCaseIgnorable",
          "_PyUnicode_IsDigit",
          "_PyUnicode_IsDecimalDigit",
          "_PyUnicode_IsSpace",
          "_PyUnicode_IsAlpha",
          "_Py_CHARMASK",
          "_Py_TOUPPER",
          "_Py_TOLOWER",
          "_Py_ISLOWER",
          "_Py_ISUPPER",
          "_Py_ISALPHA",
          "_Py_ISDIGIT",
          "_Py_ISXDIGIT",
          "_Py_ISALNUM",
          "_Py_ISSPACE",
          "_Py_ISLINEBREAK",
          "_Py_ISLINEFEED",
          "_Py_ISCARRIAGERETURN",
          "details",
          "details",
          "impl"
        ],
        "classes": [
          "_PyUnicode_TyperecordMasks",
          "_PY_CTF",
          "_PY_CTF_LB"
        ],
        "num_lines": 768
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/iterators.py": {
        "functions": [
          "iterator_getiter",
          "make_enumerate_object",
          "iternext_enumerate",
          "make_zip_object",
          "iternext_zip",
          "iternext_zip"
        ],
        "classes": [],
        "num_lines": 140
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/enumimpl.py": {
        "functions": [
          "enum_eq",
          "enum_is",
          "enum_ne",
          "enum_value",
          "int_enum_to_int",
          "enum_constant",
          "enum_class_getattr",
          "enum_class_getitem",
          "intenum_hash",
          "hash_impl"
        ],
        "classes": [],
        "num_lines": 89
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/hashing.py": {
        "functions": [
          "_defer_hash",
          "ol_defer_hash",
          "hash_overload",
          "process_return",
          "_Py_HashDouble",
          "_fpext",
          "_prng_random_hash",
          "_long_impl",
          "int_hash",
          "float_hash",
          "complex_hash",
          "_tuple_hash",
          "tuple_hash",
          "_build_hashsecret",
          "_inject_hashsecret_read",
          "_load_hashsecret",
          "_impl_load_hashsecret",
          "_Py_HashBytes",
          "unicode_hash",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "_PyHASH_XXROTATE",
          "_PyHASH_XXROTATE",
          "impl",
          "inject",
          "_ROTATE",
          "_HALF_ROUND",
          "_SINGLE_ROUND",
          "_DOUBLE_ROUND",
          "_gen_siphash",
          "impl",
          "imp",
          "impl",
          "impl",
          "impl",
          "_siphash"
        ],
        "classes": [
          "FNV",
          "SIPHASH",
          "DJBX33A",
          "EXPAT",
          "_Py_HashSecret_t"
        ],
        "num_lines": 743
      },
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor_lowering_utils.py": {
        "functions": [
          "__init__",
          "_context",
          "_typingctx",
          "_typemap",
          "_calltypes",
          "bind_global_function",
          "make_const_variable",
          "make_tuple_variable",
          "assign",
          "assign_inplace",
          "call",
          "setitem",
          "getitem"
        ],
        "classes": [
          "ParforLoweringBuilder"
        ],
        "num_lines": 216
      },
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor_lowering.py": {
        "functions": [
          "_lower_parfor_parallel",
          "_lower_parfor_parallel_std",
          "_parfor_lowering_finalize_reduction",
          "_lower_trivial_inplace_binops",
          "_lower_non_trivial_reduce",
          "_lower_var_to_var_assign",
          "_emit_getitem_call",
          "_emit_binop_reduce_call",
          "_is_right_op_and_rhs_is_init",
          "_fix_redvar_name_ssa_mismatch",
          "_create_shape_signature",
          "_print_block",
          "_print_body",
          "wrap_loop_body",
          "unwrap_loop_body",
          "add_to_def_once_sets",
          "compute_def_once_block",
          "wrap_find_topo",
          "compute_def_once_internal",
          "compute_def_once",
          "find_vars",
          "_hoist_internal",
          "find_setitems_block",
          "find_setitems_body",
          "empty_container_allocator_hoist",
          "hoist",
          "redtyp_is_scalar",
          "redtyp_to_redarraytype",
          "redarraytype_to_sig",
          "legalize_names_with_typemap",
          "to_scalar_from_0d",
          "_create_gufunc_for_parfor_body",
          "replace_var_with_array_in_block",
          "replace_var_with_array_internal",
          "replace_var_with_array",
          "call_parallel_gufunc",
          "lower_inst",
          "_disable_sroa_like_opt",
          "__init__",
          "reducer_getitem",
          "reduction_add",
          "reduction_mul",
          "bump_alpha",
          "load_range",
          "load_potential_tuple_var",
          "define_pipelines",
          "add_to_itemset"
        ],
        "classes": [
          "ParforLower",
          "ParforsUnexpectedReduceNodeError",
          "ParforGufuncCompiler"
        ],
        "num_lines": 2068
      },
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor.py": {
        "functions": [
          "print_wrapped",
          "init_prange",
          "init_prange_overload",
          "min_parallel_impl",
          "max_parallel_impl",
          "argmin_parallel_impl",
          "argmax_parallel_impl",
          "dotvv_parallel_impl",
          "dotvm_parallel_impl",
          "dotmv_parallel_impl",
          "dot_parallel_impl",
          "sum_parallel_impl",
          "prod_parallel_impl",
          "mean_parallel_impl",
          "var_parallel_impl",
          "std_parallel_impl",
          "arange_parallel_impl",
          "linspace_parallel_impl",
          "fill_parallel_impl",
          "max_checker",
          "min_checker",
          "argmin_checker",
          "argmax_checker",
          "_analyze_parfor",
          "find_template",
          "get_index_var",
          "_make_index_var",
          "_mk_parfor_loops",
          "_find_mask",
          "_remove_size_arg",
          "_get_call_arg_types",
          "_arrayexpr_tree_to_ir",
          "_gen_np_divide",
          "_gen_arrayexpr_getitem",
          "_find_func_var",
          "lower_parfor_sequential",
          "_lower_parfor_sequential_block",
          "_find_first_parfor",
          "get_parfor_params",
          "_combine_params_races_for_ssa_names",
          "get_parfor_params_inner",
          "_find_parfors",
          "_is_indirect_index",
          "get_array_indexed_with_parfor_index_internal",
          "get_array_indexed_with_parfor_index",
          "get_parfor_outputs",
          "get_parfor_reductions",
          "check_conflicting_reduction_operators",
          "get_reduction_init",
          "supported_reduction",
          "get_reduce_nodes",
          "get_expr_args",
          "visit_parfor_pattern_vars",
          "visit_vars_parfor",
          "parfor_defs",
          "_parfor_use_alloca",
          "parfor_insert_dels",
          "maximize_fusion",
          "maximize_fusion_inner",
          "expand_aliases",
          "_can_reorder_stmts",
          "is_assert_equiv",
          "get_parfor_writes",
          "try_fuse",
          "fuse_parfors_inner",
          "remove_duplicate_definitions",
          "has_cross_iter_dep",
          "dprint",
          "get_parfor_pattern_vars",
          "remove_dead_parfor",
          "_update_parfor_get_setitems",
          "remove_dead_parfor_recursive",
          "_add_liveness_return_block",
          "find_potential_aliases_parfor",
          "simplify_parfor_body_CFG",
          "wrap_parfor_blocks",
          "unwrap_parfor_blocks",
          "get_copies_parfor",
          "apply_copies_parfor",
          "push_call_vars",
          "_get_saved_call_nodes",
          "repr_arrayexpr",
          "fix_generator_types",
          "get_parfor_call_table",
          "get_parfor_tuple_table",
          "get_parfor_array_accesses",
          "parfor_add_offset_to_labels",
          "parfor_find_max_label",
          "parfor_typeinfer",
          "build_parfor_definitions",
          "dummy_return_in_loop_body",
          "ensure_parallel_support",
          "no_op",
          "__new__",
          "std_1",
          "arange_1",
          "arange_1_dtype",
          "arange_2",
          "arange_2_dtype",
          "arange_3",
          "arange_3_dtype",
          "linspace_2",
          "linspace_3",
          "__init__",
          "__repr__",
          "list_vars",
          "__init__",
          "__repr__",
          "get_loop_nest_vars",
          "list_vars",
          "get_shape_classes",
          "dump",
          "validate_params",
          "__init__",
          "setup",
          "has_setup",
          "has_setup",
          "count_parfors",
          "_get_nested_parfors",
          "_get_parfors",
          "get_parfors",
          "hoisted_allocations",
          "compute_graph_info",
          "get_stats",
          "reachable_nodes",
          "sort_pf_by_line",
          "get_parfors_simple",
          "get_all_lines",
          "source_listing",
          "print_unoptimised",
          "print_optimised",
          "allocation_hoist",
          "instruction_hoist",
          "dump",
          "__str__",
          "__repr__",
          "__init__",
          "run",
          "_replace_parallel_functions",
          "__init__",
          "__init__",
          "run",
          "_inplace_binop_to_parfor",
          "_type_getitem",
          "__init__",
          "run",
          "_setitem_to_parfor",
          "_type_getitem",
          "__init__",
          "run",
          "_is_C_order",
          "_is_C_or_F_order",
          "_arrayexpr_to_parfor",
          "_is_supported_npycall",
          "_numpy_to_parfor",
          "_numpy_map_to_parfor",
          "__init__",
          "run",
          "_reduce_to_parfor",
          "_mk_reduction_body",
          "__init__",
          "run",
          "_is_parallel_loop",
          "_get_loop_kind",
          "_get_prange_init_block",
          "_is_prange_init",
          "_replace_loop_access_indices",
          "_replace_multi_dim_ind",
          "_pre_run",
          "run",
          "_find_mask",
          "_mk_parfor_loops",
          "run",
          "fuse_parfors",
          "fuse_recursive_parfor",
          "run",
          "unversion",
          "cyclic_lookup",
          "noncyclic_lookup",
          "is_equiv",
          "get_user_varname",
          "add_check_position",
          "check_index",
          "generic",
          "min_1",
          "max_1",
          "sum_1",
          "prod_1",
          "mean_1",
          "var_1",
          "arange_4",
          "arange_4",
          "fill_1",
          "fill_1",
          "count_root",
          "print_nest",
          "print_fuse",
          "print_nest",
          "print_fuse",
          "__init__",
          "rename_global_or_getattr",
          "min_1",
          "max_1",
          "sum_1",
          "sum_1",
          "prod_1",
          "prod_1",
          "mean_1",
          "mean_1",
          "var_1",
          "var_1",
          "print_g",
          "print_g",
          "dump_graph_indented",
          "process_assign",
          "min_1",
          "min_1",
          "max_1",
          "max_1",
          "print_graph",
          "print_g",
          "find_indexed_arrays",
          "find_mask_from_size",
          "replace_func",
          "unver"
        ],
        "classes": [
          "internal_prange",
          "LoopNest",
          "Parfor",
          "ParforDiagnostics",
          "PreParforPass",
          "ParforPassStates",
          "ConvertInplaceBinop",
          "ConvertSetItemPass",
          "ConvertNumpyPass",
          "ConvertReducePass",
          "ConvertLoopPass",
          "ParforPass",
          "ParforFusionPass",
          "ParforPreLoweringPass",
          "ReduceInfer",
          "DummyFuncIR"
        ],
        "num_lines": 5253
      },
      "/tmp/cs-hpc-demo-1/numba/parfors/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 1
      },
      "/tmp/cs-hpc-demo-1/numba/parfors/array_analysis.py": {
        "functions": [
          "wrap_index",
          "wrap_index_literal",
          "assert_equiv",
          "codegen",
          "codegen",
          "__init__",
          "empty",
          "clone",
          "__repr__",
          "is_empty",
          "_get_ind",
          "_get_or_add_ind",
          "_insert",
          "is_equiv",
          "get_equiv_const",
          "get_equiv_set",
          "insert_equiv",
          "intersect",
          "__init__",
          "empty",
          "clone",
          "__repr__",
          "_get_names",
          "is_equiv",
          "get_equiv_const",
          "get_equiv_var",
          "get_equiv_set",
          "_insert",
          "insert_equiv",
          "has_shape",
          "get_shape",
          "_get_shape",
          "get_shape_classes",
          "intersect",
          "define",
          "union_defs",
          "__init__",
          "empty",
          "__repr__",
          "clone",
          "get_rel",
          "_get_or_set_rel",
          "define",
          "_insert",
          "set_shape_setitem",
          "_get_shape",
          "__init__",
          "__init__",
          "get_equiv_set",
          "remove_redefineds",
          "run",
          "_run_on_blocks",
          "_combine_to_new_block",
          "_determine_transform",
          "dump",
          "_define",
          "_analyze_inst",
          "_analyze_expr",
          "_analyze_op_getattr",
          "_analyze_op_cast",
          "_analyze_op_exhaust_iter",
          "gen_literal_slice_part",
          "gen_static_slice_size",
          "gen_explicit_neg",
          "update_replacement_slice",
          "slice_size",
          "_index_to_shape",
          "_analyze_op_getitem",
          "_analyze_op_static_getitem",
          "_analyze_op_unary",
          "_analyze_op_binop",
          "_analyze_op_inplace_binop",
          "_analyze_op_arrayexpr",
          "_analyze_op_build_tuple",
          "_analyze_op_call",
          "_analyze_op_call_builtins_len",
          "_analyze_op_call_numba_parfors_array_analysis_assert_equiv",
          "_analyze_op_call_numba_parfors_array_analysis_wrap_index",
          "_analyze_numpy_create_array",
          "_analyze_op_call_numpy_empty",
          "_analyze_op_call_numba_np_unsafe_ndarray_empty_inferred",
          "_analyze_op_call_numpy_zeros",
          "_analyze_op_call_numpy_ones",
          "_analyze_op_call_numpy_eye",
          "_analyze_op_call_numpy_identity",
          "_analyze_op_call_numpy_diag",
          "_analyze_numpy_array_like",
          "_analyze_op_call_numpy_ravel",
          "_analyze_op_call_numpy_copy",
          "_analyze_op_call_numpy_empty_like",
          "_analyze_op_call_numpy_zeros_like",
          "_analyze_op_call_numpy_ones_like",
          "_analyze_op_call_numpy_full_like",
          "_analyze_op_call_numpy_asfortranarray",
          "_analyze_op_call_numpy_reshape",
          "_analyze_op_call_numpy_transpose",
          "_analyze_op_call_numpy_random_rand",
          "_analyze_op_call_numpy_random_randn",
          "_analyze_op_numpy_random_with_size",
          "_analyze_op_call_numpy_random_ranf",
          "_analyze_op_call_numpy_random_random_sample",
          "_analyze_op_call_numpy_random_sample",
          "_analyze_op_call_numpy_random_random",
          "_analyze_op_call_numpy_random_standard_normal",
          "_analyze_op_call_numpy_random_chisquare",
          "_analyze_op_call_numpy_random_weibull",
          "_analyze_op_call_numpy_random_power",
          "_analyze_op_call_numpy_random_geometric",
          "_analyze_op_call_numpy_random_exponential",
          "_analyze_op_call_numpy_random_poisson",
          "_analyze_op_call_numpy_random_rayleigh",
          "_analyze_op_call_numpy_random_normal",
          "_analyze_op_call_numpy_random_uniform",
          "_analyze_op_call_numpy_random_beta",
          "_analyze_op_call_numpy_random_binomial",
          "_analyze_op_call_numpy_random_f",
          "_analyze_op_call_numpy_random_gamma",
          "_analyze_op_call_numpy_random_lognormal",
          "_analyze_op_call_numpy_random_laplace",
          "_analyze_op_call_numpy_random_randint",
          "_analyze_op_call_numpy_random_triangular",
          "_analyze_op_call_numpy_concatenate",
          "_analyze_op_call_numpy_stack",
          "_analyze_op_call_numpy_vstack",
          "_analyze_op_call_numpy_hstack",
          "_analyze_op_call_numpy_dstack",
          "_analyze_op_call_numpy_cumsum",
          "_analyze_op_call_numpy_cumprod",
          "_analyze_op_call_numpy_linspace",
          "_analyze_op_call_numpy_dot",
          "_analyze_stencil",
          "_analyze_op_call_numpy_linalg_inv",
          "_analyze_broadcast",
          "_broadcast_assert_shapes",
          "_call_assert_equiv",
          "_make_assert_equiv",
          "_gen_shape_call",
          "_isarray",
          "_istuple",
          "_sum_size",
          "unpack_shapes",
          "pairwise",
          "get_or_set",
          "__init__",
          "gen_wrap_if_not_known",
          "to_shape",
          "plus",
          "minus",
          "get_names",
          "handle_call_binop"
        ],
        "classes": [
          "EquivSet",
          "ShapeEquivSet",
          "SymbolicEquivSet",
          "WrapIndexMeta",
          "ArrayAnalysis",
          "AnalyzeResult"
        ],
        "num_lines": 3207
      },
      "/tmp/cs-hpc-demo-1/numba/cext/__init__.py": {
        "functions": [
          "get_extension_libs",
          "get_path"
        ],
        "classes": [],
        "num_lines": 23
      },
      "/tmp/cs-hpc-demo-1/numba/scripts/generate_lower_listing.py": {
        "functions": [
          "git_hash",
          "get_func_name",
          "gather_function_info",
          "bind_file_to_print",
          "format_signature",
          "format_function_infos",
          "gen_lower_listing",
          "fmt",
          "format_fname"
        ],
        "classes": [],
        "num_lines": 169
      },
      "/tmp/cs-hpc-demo-1/numba/scripts/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/typed/typedlist.py": {
        "functions": [
          "_make_list",
          "_length",
          "_allocated",
          "_is_mutable",
          "_make_mutable",
          "_make_immutable",
          "_append",
          "_setitem",
          "_getitem",
          "_contains",
          "_count",
          "_pop",
          "_delitem",
          "_extend",
          "_insert",
          "_remove",
          "_clear",
          "_reverse",
          "_copy",
          "_eq",
          "_ne",
          "_lt",
          "_le",
          "_gt",
          "_ge",
          "_index",
          "_sort",
          "_from_meminfo_ptr",
          "typedlist_empty",
          "box_lsttype",
          "unbox_listtype",
          "_guess_dtype",
          "typedlist_call",
          "impl_numba_typeref_ctor",
          "__getitem__",
          "__len__",
          "__new__",
          "empty_list",
          "__init__",
          "_parse_arg",
          "_numba_type_",
          "_typed",
          "_dtype",
          "_initialise_list",
          "__len__",
          "_allocated",
          "_is_mutable",
          "_make_mutable",
          "_make_immutable",
          "__eq__",
          "__ne__",
          "__lt__",
          "__le__",
          "__gt__",
          "__ge__",
          "append",
          "__setitem__",
          "__setitem__",
          "__setitem__",
          "__getitem__",
          "__getitem__",
          "__getitem__",
          "__iter__",
          "__contains__",
          "__delitem__",
          "insert",
          "count",
          "pop",
          "extend",
          "remove",
          "clear",
          "reverse",
          "copy",
          "index",
          "sort",
          "__str__",
          "__repr__",
          "impl",
          "attach_sig",
          "__call__",
          "impl",
          "mytyper",
          "impl",
          "impl"
        ],
        "classes": [
          "_Sequence",
          "List",
          "Typer"
        ],
        "num_lines": 688
      },
      "/tmp/cs-hpc-demo-1/numba/typed/dictimpl.py": {
        "functions": [
          "dict_constructor",
          "impl_dict",
          "dict_impl",
          "call_ctor"
        ],
        "classes": [],
        "num_lines": 43
      },
      "/tmp/cs-hpc-demo-1/numba/typed/__init__.py": {
        "functions": [
          "__getattr__"
        ],
        "classes": [],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/typed/listobject.py": {
        "functions": [
          "_check_for_none_typed",
          "_as_meminfo",
          "_from_meminfo",
          "_list_codegen_set_method_table",
          "_list_set_method_table",
          "list_is",
          "_call_list_free",
          "_imp_dtor",
          "new_list",
          "_add_meminfo",
          "_make_list",
          "_list_new_codegen",
          "_list_new",
          "impl_new_list",
          "impl_len",
          "_list_length",
          "impl_allocated",
          "_list_allocated",
          "impl_is_mutable",
          "_list_is_mutable",
          "impl_make_mutable",
          "impl_make_immutable",
          "_list_set_is_mutable",
          "_list_append",
          "impl_append",
          "fix_index",
          "handle_index",
          "handle_slice",
          "_gen_getitem",
          "impl_getitem",
          "_list_setitem",
          "impl_setitem",
          "impl_pop",
          "_list_delitem",
          "_list_delete_slice",
          "impl_delitem",
          "impl_contains",
          "impl_count",
          "impl_extend",
          "impl_insert",
          "impl_remove",
          "impl_clear",
          "impl_reverse",
          "impl_copy",
          "impl_index",
          "ol_list_sort",
          "ol_getitem_unchecked",
          "ol_list_hash",
          "impl_dtype",
          "_equals_helper",
          "impl_equals",
          "impl_not_equals",
          "compare_not_none",
          "compare_some_none",
          "compare_helper",
          "impl_less_than",
          "impl_less_than_or_equal",
          "impl_greater_than",
          "impl_greater_than_or_equal",
          "getiter_list",
          "iternext_listiter",
          "__init__",
          "__init__",
          "__init__",
          "__call__",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "imp",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "impl",
          "codegen",
          "impl",
          "codegen",
          "codegen",
          "codegen",
          "impl",
          "impl",
          "select_impl",
          "impl",
          "impl",
          "impl",
          "check_arg",
          "impl",
          "impl",
          "impl",
          "impl",
          "__init__",
          "from_list",
          "_size_of_list",
          "size",
          "value",
          "getitem",
          "index",
          "index",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "codegen",
          "impl_integer",
          "impl",
          "integer_impl",
          "impl",
          "impl",
          "impl_some_none",
          "impl_not_none",
          "impl",
          "impl",
          "integer_non_none_impl",
          "integer_none_impl",
          "slice_impl",
          "impl_slice",
          "slice_impl",
          "impl",
          "impl",
          "equals",
          "equals"
        ],
        "classes": [
          "ListModel",
          "ListIterModel",
          "ListStatus",
          "ErrorHandler",
          "ListIterInstance"
        ],
        "num_lines": 1543
      },
      "/tmp/cs-hpc-demo-1/numba/typed/dictobject.py": {
        "functions": [
          "new_dict",
          "_raise_if_error",
          "_as_meminfo",
          "_from_meminfo",
          "_call_dict_free",
          "_imp_dtor",
          "_dict_new_sized",
          "_dict_set_method_table",
          "_dict_insert",
          "_dict_length",
          "_dict_dump",
          "_dict_lookup",
          "_dict_popitem",
          "_dict_delitem",
          "_iterator_codegen",
          "_dict_items",
          "_dict_keys",
          "_dict_values",
          "_make_dict",
          "impl_new_dict",
          "impl_len",
          "impl_len_iters",
          "impl_setitem",
          "impl_get",
          "impl_hash",
          "impl_getitem",
          "impl_popitem",
          "impl_pop",
          "impl_delitem",
          "impl_contains",
          "impl_clear",
          "impl_copy",
          "impl_setdefault",
          "impl_items",
          "impl_keys",
          "impl_values",
          "ol_dict_update",
          "impl_equal",
          "impl_not_equal",
          "impl_iterable_getiter",
          "impl_dict_getiter",
          "impl_iterator_iternext",
          "build_map",
          "_mixed_values_to_tuple",
          "literalstrkeydict_impl_values",
          "literalstrkeydict_impl_keys",
          "literalstrkeydict_impl_equals",
          "literalstrkeydict_impl_get",
          "literalstrkeydict_impl_copy",
          "_str_items_mixed_values_to_tuple",
          "literalstrkeydict_impl_items",
          "literalstrkeydict_impl_contains",
          "literalstrkeydict_impl_len",
          "literalstrkeydict_banned_impl_setitem",
          "literalstrkeydict_banned_impl_delitem",
          "literalstrkeydict_banned_impl_mutators",
          "cast_LiteralStrKeyDict_LiteralStrKeyDict",
          "cast_DictType_DictType",
          "__init__",
          "__init__",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "imp",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl_type_matched",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl_type_mismatch",
          "make_dict",
          "put"
        ],
        "classes": [
          "DKIX",
          "Status",
          "DictModel",
          "DictIterModel"
        ],
        "num_lines": 1367
      },
      "/tmp/cs-hpc-demo-1/numba/typed/typedobjectutils.py": {
        "functions": [
          "_as_bytes",
          "_cast",
          "_sentry_safe_cast",
          "_sentry_safe_cast_default",
          "_nonoptional",
          "_container_get_data",
          "_container_get_meminfo",
          "_get_incref_decref",
          "_get_equal",
          "codegen",
          "warn",
          "codegen",
          "build_wrapper"
        ],
        "classes": [],
        "num_lines": 200
      },
      "/tmp/cs-hpc-demo-1/numba/typed/typeddict.py": {
        "functions": [
          "_make_dict",
          "_length",
          "_setitem",
          "_getitem",
          "_delitem",
          "_contains",
          "_get",
          "_setdefault",
          "_iter",
          "_popitem",
          "_copy",
          "_from_meminfo_ptr",
          "typeddict_empty",
          "box_dicttype",
          "unbox_dicttype",
          "typeddict_call",
          "impl_numba_typeref_ctor",
          "__new__",
          "empty",
          "__init__",
          "_parse_arg",
          "_numba_type_",
          "_typed",
          "_initialise_dict",
          "__getitem__",
          "__setitem__",
          "__delitem__",
          "__iter__",
          "__len__",
          "__contains__",
          "__str__",
          "__repr__",
          "get",
          "setdefault",
          "popitem",
          "copy",
          "impl",
          "typer",
          "impl",
          "convert",
          "impl"
        ],
        "classes": [
          "Dict"
        ],
        "num_lines": 417
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc_db.py": {
        "functions": [
          "_lazy_init_db",
          "get_ufuncs",
          "get_ufunc_info",
          "_fill_ufunc_db"
        ],
        "classes": [],
        "num_lines": 1211
      },
      "/tmp/cs-hpc-demo-1/numba/np/npyimpl.py": {
        "functions": [
          "_prepare_argument",
          "_broadcast_onto",
          "_build_array",
          "_unpack_output_types",
          "_unpack_output_values",
          "_pack_output_values",
          "numpy_ufunc_kernel",
          "numpy_gufunc_kernel",
          "_ufunc_db_function",
          "register_ufunc_kernel",
          "register_unary_operator_kernel",
          "register_binary_operator_kernel",
          "array_positive_impl",
          "register_ufuncs",
          "_make_dtype_object",
          "numpy_dtype",
          "update_indices",
          "as_values",
          "__init__",
          "create_iter_indices",
          "load_data",
          "store_data",
          "return_val",
          "update_indices",
          "as_values",
          "create_iter_indices",
          "_load_effective_address",
          "load_data",
          "store_data",
          "create_iter_indices",
          "_load_effective_address",
          "load_data",
          "guard_shape",
          "guard_match_core_dims",
          "make_intp_const",
          "__init__",
          "cast",
          "generate",
          "do_ufunc",
          "lower_unary_operator",
          "lower_binary_operator",
          "lower_inplace_operator",
          "from_nb_type",
          "raise_impl",
          "raise_impl",
          "__init__",
          "generate",
          "generate",
          "codegen",
          "imp"
        ],
        "classes": [
          "_ScalarIndexingHelper",
          "_ScalarHelper",
          "_ArrayIndexingHelper",
          "_ArrayHelper",
          "_ArrayGUHelper",
          "_Kernel",
          "_KernelImpl",
          "_UnaryPositiveKernel"
        ],
        "num_lines": 878
      },
      "/tmp/cs-hpc-demo-1/numba/np/numpy_support.py": {
        "functions": [
          "_from_str_dtype",
          "_from_datetime_dtype",
          "from_dtype",
          "as_dtype",
          "as_struct_dtype",
          "_check_struct_alignment",
          "map_arrayscalar_type",
          "is_array",
          "map_layout",
          "select_array_wrapper",
          "resolve_output_type",
          "supported_ufunc_loop",
          "_ufunc_loop_sig",
          "ufunc_can_cast",
          "ufunc_find_matching_loop",
          "_is_aligned_struct",
          "from_struct_dtype",
          "_get_bytes_buffer",
          "_get_array_from_ptr",
          "carray",
          "farray",
          "is_contiguous",
          "is_fortran",
          "type_can_asarray",
          "type_is_scalar",
          "check_is_integer",
          "lt_floats",
          "lt_complex",
          "numpy_inputs",
          "numpy_outputs",
          "choose_types",
          "set_output_dt_units",
          "make_specific",
          "make_datetime_specific"
        ],
        "classes": [
          "UFuncLoopSpec"
        ],
        "num_lines": 796
      },
      "/tmp/cs-hpc-demo-1/numba/np/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/np/extensions.py": {
        "functions": [],
        "classes": [],
        "num_lines": 10
      },
      "/tmp/cs-hpc-demo-1/numba/np/arraymath.py": {
        "functions": [
          "_check_blas",
          "_create_tuple_result_shape",
          "_gen_index_tuple",
          "array_sum",
          "_array_sum_axis_nop",
          "gen_sum_axis_impl",
          "array_sum_axis_dtype",
          "array_sum_dtype",
          "array_sum_axis",
          "get_accumulator",
          "array_prod",
          "array_cumsum",
          "array_cumprod",
          "array_mean",
          "array_var",
          "array_std",
          "min_comparator",
          "max_comparator",
          "return_false",
          "npy_min",
          "npy_max",
          "array_argmin_impl_datetime",
          "array_argmin_impl_float",
          "array_argmin_impl_generic",
          "array_argmin",
          "array_argmax_impl_datetime",
          "array_argmax_impl_float",
          "array_argmax_impl_generic",
          "build_argmax_or_argmin_with_axis_impl",
          "array_argmax",
          "np_all",
          "_allclose_scalars",
          "np_allclose",
          "np_any",
          "np_average",
          "get_isnan",
          "np_iscomplex",
          "np_isreal",
          "iscomplexobj",
          "isrealobj",
          "np_isscalar",
          "is_np_inf_impl",
          "isneginf",
          "isposinf",
          "less_than",
          "greater_than",
          "check_array",
          "nan_min_max_factory",
          "_isclose_item",
          "isclose",
          "np_nanmin",
          "np_nanmax",
          "np_nanmean",
          "np_nanvar",
          "np_nanstd",
          "np_nansum",
          "np_nanprod",
          "np_nancumprod",
          "np_nancumsum",
          "prepare_ptp_input",
          "_compute_current_val_impl_gen",
          "_compute_a_max",
          "_compute_a_min",
          "_compute_a_max_impl",
          "_compute_a_min_impl",
          "_early_return",
          "_early_return_impl",
          "np_ptp",
          "nan_aware_less_than",
          "_partition_factory",
          "_select_factory",
          "_select_two",
          "_median_inner",
          "np_median",
          "_collect_percentiles_inner",
          "_can_collect_percentiles",
          "check_valid",
          "percentile_is_valid",
          "quantile_is_valid",
          "_collect_percentiles",
          "_percentile_quantile_inner",
          "np_percentile",
          "np_nanpercentile",
          "np_quantile",
          "np_nanquantile",
          "np_nanmedian",
          "np_partition_impl_inner",
          "np_argpartition_impl_inner",
          "valid_kths",
          "np_partition",
          "np_argpartition",
          "_tri_impl",
          "np_tri",
          "_make_square",
          "np_tril_impl_2d",
          "my_tril",
          "np_tril_indices",
          "np_tril_indices_from",
          "np_triu_impl_2d",
          "my_triu",
          "np_triu_indices",
          "np_triu_indices_from",
          "_prepare_array",
          "_prepare_array_impl",
          "_dtype_of_compound",
          "np_ediff1d",
          "_select_element",
          "_select_element_impl",
          "_get_d",
          "get_d_impl",
          "np_trapz",
          "_np_vander",
          "_check_vander_params",
          "np_vander",
          "np_roll",
          "binary_search_with_guess",
          "np_interp_impl_complex_inner",
          "np_interp_impl_inner",
          "np_interp",
          "row_wise_average",
          "np_cov_impl_inner",
          "_prepare_cov_input_inner",
          "_prepare_cov_input_impl",
          "_handle_m_dim_change",
          "determine_dtype",
          "check_dimensions",
          "_handle_ddof",
          "_prepare_cov_input",
          "scalar_result_expected",
          "_clip_corr",
          "_clip_complex",
          "np_cov",
          "np_corrcoef",
          "np_argwhere",
          "np_flatnonzero",
          "_fill_diagonal_params",
          "_fill_diagonal_scalar",
          "_fill_diagonal",
          "_check_val_int",
          "_check_val_float",
          "_asarray",
          "_asarray_impl",
          "np_fill_diagonal",
          "_np_round_intrinsic",
          "_np_round_float",
          "round_ndigits",
          "impl_np_round",
          "impl_np_sinc",
          "ov_np_angle",
          "array_nonzero",
          "_where_zero_size_array_impl",
          "_where_generic_inner_impl",
          "_where_fast_inner_impl",
          "_where_generic_impl",
          "ov_np_where",
          "ov_np_where_x_y",
          "np_real",
          "np_imag",
          "np_contains",
          "np_count_nonzero",
          "np_delete",
          "np_diff_impl",
          "np_array_equal",
          "jit_np_intersect1d",
          "validate_1d_array_like",
          "np_bincount",
          "less_than_or_equal_complex",
          "_less_than_or_equal",
          "_less_than",
          "_less_then_datetime64",
          "_less_then_or_equal_datetime64",
          "_searchsorted",
          "make_searchsorted_implementation",
          "searchsorted",
          "np_digitize",
          "np_histogram",
          "_gen_np_machar",
          "generate_xinfo_body",
          "ol_np_finfo",
          "ol_np_iinfo",
          "_get_inner_prod",
          "_assert_1d",
          "_np_correlate_core",
          "_np_correlate_core_impl",
          "_np_correlate",
          "np_convolve",
          "np_asarray",
          "np_extract",
          "np_select",
          "np_union1d",
          "np_asarray_chkfinite",
          "numpy_unwrap",
          "np_bartlett_impl",
          "np_blackman_impl",
          "np_hamming_impl",
          "np_hanning_impl",
          "window_generator",
          "_chbevl",
          "_i0",
          "_i0n",
          "np_kaiser",
          "_cross_operation",
          "_cross",
          "_cross_impl",
          "np_cross",
          "_cross2d_operation",
          "cross2d",
          "cross2d_impl",
          "np_trim_zeros",
          "jit_np_setxor1d",
          "jit_np_setdiff1d",
          "jit_np_in1d",
          "jit_np_isin",
          "codegen",
          "codegen",
          "array_sum_impl",
          "inner",
          "array_sum_impl_axis",
          "array_sum_impl",
          "array_sum_impl_axis",
          "impl_min",
          "impl_max",
          "impl",
          "flat_all",
          "flat_any",
          "impl",
          "impl",
          "nanmean_impl",
          "nanvar_impl",
          "nanstd_impl",
          "nansum_impl",
          "nanprod_impl",
          "np_ptp_impl",
          "_partition",
          "_select",
          "median_impl",
          "np_percentile_q_scalar_impl",
          "np_percentile_impl",
          "nanmedian_impl",
          "np_partition_impl",
          "np_argpartition_impl",
          "tri_impl",
          "np_tril_impl_1d",
          "np_tril_impl_multi",
          "np_tril_indices_impl",
          "np_tril_indices_from_impl",
          "np_triu_impl_1d",
          "np_triu_impl_multi",
          "np_triu_indices_impl",
          "np_triu_indices_from_impl",
          "np_ediff1d_impl",
          "impl",
          "np_vander_impl",
          "np_vander_seq_impl",
          "np_roll_impl",
          "np_interp_impl",
          "np_interp_scalar_impl",
          "np_cov_impl",
          "np_cov_impl_single_variable",
          "np_corrcoef_impl",
          "np_corrcoef_impl_single_variable",
          "codegen",
          "impl",
          "impl",
          "where_cond_none_none",
          "np_real_impl",
          "np_imag_impl",
          "np_contains_impl",
          "diff_impl",
          "np_intersects1d_impl",
          "bincount_impl",
          "impl",
          "_monotonicity",
          "digitize_impl",
          "MachAr_impl",
          "impl",
          "impl",
          "impl",
          "_innerprod",
          "impl",
          "op_conj",
          "op_nop",
          "impl",
          "impl",
          "np_asfarray",
          "np_extract_impl",
          "np_select_arr_impl",
          "union_impl",
          "impl",
          "impl",
          "window_overload",
          "np_kaiser_impl",
          "_cross_preprocessing",
          "impl",
          "_cross_preprocessing",
          "impl",
          "impl",
          "np_setxor1d_impl",
          "np_setdiff1d_impl",
          "np_in1d_impl",
          "np_isin_impl",
          "array_indexer",
          "create_full_slice",
          "array_prod_impl",
          "array_cumsum_impl",
          "array_cumprod_impl",
          "array_mean_impl",
          "array_var_impl",
          "array_std_impl",
          "array_argmin_impl",
          "array_argmax_impl",
          "np_allclose_impl_scalar_scalar",
          "np_average_impl",
          "_trivial_isnan",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "isclose_impl",
          "nancumprod_impl",
          "nancumsum_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "_prepare_cov_input_inner",
          "_prepare_cov_input_inner",
          "impl",
          "impl",
          "impl",
          "impl",
          "scalar_impl",
          "non_scalar_impl",
          "impl",
          "impl",
          "check_0_dim",
          "impl",
          "impl",
          "impl",
          "np_delete_impl",
          "np_delete_scalar_impl",
          "impl",
          "impl",
          "validate_inputs",
          "count_item",
          "validate_inputs",
          "count_item",
          "impl",
          "histogram_impl",
          "impl",
          "_dot_wrap",
          "impl",
          "window_impl",
          "impl",
          "impl",
          "comp_func",
          "comp_func",
          "np_allclose_impl_scalar_array",
          "np_average_impl",
          "np_average_impl",
          "isclose_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "histogram_impl",
          "histogram_impl",
          "impl",
          "impl",
          "np_allclose_impl_array_scalar",
          "isclose_impl",
          "isclose_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "np_allclose_impl_array_array",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 5034
      },
      "/tmp/cs-hpc-demo-1/numba/np/linalg.py": {
        "functions": [
          "get_blas_kind",
          "ensure_blas",
          "ensure_lapack",
          "make_constant_slot",
          "make_contiguous",
          "check_c_int",
          "check_blas_return",
          "check_lapack_return",
          "call_xxdot",
          "call_xxgemv",
          "call_xxgemm",
          "dot_2_mm",
          "dot_2_vm",
          "dot_2_mv",
          "dot_2_vv",
          "dot_2",
          "matmul_2",
          "dot_2_impl",
          "vdot",
          "dot_3_vm_check_args",
          "dot_3_mv_check_args",
          "dot_3_vm",
          "dot_3_mm",
          "dot_3",
          "_check_finite_matrix",
          "_check_linalg_matrix",
          "_check_homogeneous_types",
          "_copy_to_fortran_order",
          "ol_copy_to_fortran_order",
          "_inv_err_handler",
          "_dummy_liveness_func",
          "inv_impl",
          "_handle_err_maybe_convergence_problem",
          "_check_linalg_1_or_2d_matrix",
          "cho_impl",
          "eig_impl",
          "eigvals_impl",
          "eigh_impl",
          "eigvalsh_impl",
          "svd_impl",
          "qr_impl",
          "_system_copy_in_b",
          "_system_copy_in_b_impl",
          "_system_compute_nrhs",
          "_system_compute_nrhs_impl",
          "_system_check_dimensionally_valid",
          "_system_check_dimensionally_valid_impl",
          "_system_check_non_empty",
          "_system_check_non_empty_impl",
          "_lstsq_residual",
          "_lstsq_residual_impl",
          "_lstsq_solution",
          "_lstsq_solution_impl",
          "lstsq_impl",
          "_solve_compute_return",
          "_solve_compute_return_impl",
          "solve_impl",
          "pinv_impl",
          "_get_slogdet_diag_walker",
          "slogdet_impl",
          "det_impl",
          "_compute_singular_values",
          "_compute_singular_values_impl",
          "_oneD_norm_2",
          "_oneD_norm_2_impl",
          "_get_norm_impl",
          "norm_impl",
          "cond_impl",
          "_get_rank_from_singular_values",
          "matrix_rank_impl",
          "matrix_power_impl",
          "matrix_trace_impl",
          "_check_scalar_or_lt_2d_mat",
          "outer_impl_none",
          "outer_impl_arr",
          "_get_outer_impl",
          "outer_impl",
          "_kron_normaliser_impl",
          "_kron_return",
          "kron_impl",
          "__init__",
          "numba_xxnrm2",
          "numba_xxgemm",
          "__init__",
          "numba_xxgetrf",
          "numba_ez_xxgetri",
          "numba_ez_rgeev",
          "numba_ez_cgeev",
          "numba_ez_xxxevd",
          "numba_xxpotrf",
          "numba_ez_gesdd",
          "numba_ez_geqrf",
          "numba_ez_xxgqr",
          "numba_ez_gelsd",
          "numba_xgesv",
          "impl",
          "get_array_param",
          "dot_impl",
          "dot_impl",
          "dot_impl",
          "check_args",
          "check_args",
          "impl",
          "inv_impl",
          "cho_impl",
          "real_eig_impl",
          "cmplx_eig_impl",
          "real_eigvals_impl",
          "cmplx_eigvals_impl",
          "eigh_impl",
          "eigvalsh_impl",
          "svd_impl",
          "qr_impl",
          "lstsq_impl",
          "solve_impl",
          "pinv_impl",
          "slogdet_impl",
          "det_impl",
          "sv_function",
          "impl",
          "impl",
          "_2d_matrix_rank_impl",
          "_get_matrix_rank_impl",
          "matrix_power_impl",
          "matrix_trace_impl",
          "outer_impl",
          "kron_impl",
          "_impl",
          "_impl",
          "_impl",
          "oneD_impl",
          "twoD_impl",
          "oneD_impl",
          "twoD_impl",
          "oneD_impl",
          "twoD_impl",
          "oneD_impl",
          "twoD_impl",
          "oneD_impl",
          "twoD_impl",
          "oneD_impl",
          "twoD_impl",
          "cmplx_diag_walker",
          "real_diag_walker",
          "nrm_shape",
          "_dot2_codegen",
          "codegen",
          "codegen",
          "cmplx_impl",
          "real_impl",
          "cmplx_impl",
          "real_impl",
          "oneD_impl",
          "oneD_impl",
          "_2d_tol_none_impl",
          "_2d_tol_not_none_impl",
          "_1d_matrix_rank_impl",
          "ret",
          "ret",
          "ret",
          "twoD_impl",
          "twoD_impl",
          "nrm_shape",
          "nrm_shape",
          "ret",
          "ret",
          "array_prepare",
          "array_prepare",
          "array_prepare"
        ],
        "classes": [
          "_BLAS",
          "_LAPACK"
        ],
        "num_lines": 2853
      },
      "/tmp/cs-hpc-demo-1/numba/np/npdatetime_helpers.py": {
        "functions": [
          "same_kind",
          "can_cast_timedelta_units",
          "_get_conversion_multiplier",
          "get_timedelta_conversion_factor",
          "get_datetime_timedelta_conversion",
          "combine_datetime_timedelta_units",
          "get_best_unit",
          "datetime_minimum",
          "datetime_maximum"
        ],
        "classes": [],
        "num_lines": 212
      },
      "/tmp/cs-hpc-demo-1/numba/np/npyfuncs.py": {
        "functions": [
          "_check_arity_and_homogeneity",
          "_call_func_by_name_with_cast",
          "_dispatch_func_by_name_type",
          "np_int_sdiv_impl",
          "np_int_srem_impl",
          "np_int_sdivrem_impl",
          "np_int_udiv_impl",
          "np_int_urem_impl",
          "np_int_udivrem_impl",
          "np_real_div_impl",
          "np_real_mod_impl",
          "np_real_fmod_impl",
          "_fabs",
          "np_complex_div_impl",
          "_npy_logaddexp",
          "_generate_logaddexp",
          "_npy_logaddexp",
          "np_real_logaddexp_impl",
          "_npy_logaddexp2",
          "npy_log2_1p",
          "ol_npy_log2_1p",
          "np_real_logaddexp2_impl",
          "np_int_truediv_impl",
          "np_real_floor_div_impl",
          "np_real_divmod_impl",
          "np_complex_floor_div_impl",
          "np_complex_power_impl",
          "real_float_power_impl",
          "np_complex_float_power_impl",
          "np_gcd_impl",
          "np_lcm_impl",
          "np_complex_sign_impl",
          "np_real_rint_impl",
          "np_complex_rint_impl",
          "np_real_exp_impl",
          "np_complex_exp_impl",
          "np_real_exp2_impl",
          "np_complex_exp2_impl",
          "np_real_log_impl",
          "np_complex_log_impl",
          "np_real_log2_impl",
          "np_complex_log2_impl",
          "np_real_log10_impl",
          "np_complex_log10_impl",
          "np_real_expm1_impl",
          "np_complex_expm1_impl",
          "np_real_log1p_impl",
          "np_complex_log1p_impl",
          "np_real_sqrt_impl",
          "np_complex_sqrt_impl",
          "np_int_square_impl",
          "np_real_square_impl",
          "np_complex_square_impl",
          "np_real_cbrt_impl",
          "np_int_reciprocal_impl",
          "np_real_reciprocal_impl",
          "np_complex_reciprocal_impl",
          "np_real_sin_impl",
          "np_complex_sin_impl",
          "np_real_cos_impl",
          "np_complex_cos_impl",
          "np_real_tan_impl",
          "np_real_asin_impl",
          "np_real_acos_impl",
          "np_real_atan_impl",
          "np_real_atan2_impl",
          "np_real_hypot_impl",
          "np_real_sinh_impl",
          "np_complex_sinh_impl",
          "np_real_cosh_impl",
          "np_complex_cosh_impl",
          "np_real_tanh_impl",
          "np_complex_tanh_impl",
          "np_real_asinh_impl",
          "np_real_acosh_impl",
          "np_complex_acosh_impl",
          "np_real_atanh_impl",
          "np_real_floor_impl",
          "np_real_ceil_impl",
          "np_real_trunc_impl",
          "np_real_fabs_impl",
          "np_complex_ge_impl",
          "np_complex_le_impl",
          "np_complex_gt_impl",
          "np_complex_lt_impl",
          "np_complex_eq_impl",
          "np_complex_ne_impl",
          "_complex_is_true",
          "np_logical_and_impl",
          "np_complex_logical_and_impl",
          "np_logical_or_impl",
          "np_complex_logical_or_impl",
          "np_logical_xor_impl",
          "np_complex_logical_xor_impl",
          "np_logical_not_impl",
          "np_complex_logical_not_impl",
          "np_int_smax_impl",
          "np_int_umax_impl",
          "np_real_maximum_impl",
          "np_real_fmax_impl",
          "np_complex_maximum_impl",
          "np_complex_fmax_impl",
          "np_int_smin_impl",
          "np_int_umin_impl",
          "np_real_minimum_impl",
          "np_real_fmin_impl",
          "np_complex_minimum_impl",
          "np_complex_fmin_impl",
          "np_int_isnan_impl",
          "np_real_isnan_impl",
          "np_complex_isnan_impl",
          "np_int_isfinite_impl",
          "np_datetime_isfinite_impl",
          "np_datetime_isnat_impl",
          "np_real_isfinite_impl",
          "np_complex_isfinite_impl",
          "np_int_isinf_impl",
          "np_real_isinf_impl",
          "np_complex_isinf_impl",
          "np_real_signbit_impl",
          "np_real_copysign_impl",
          "np_real_nextafter_impl",
          "np_real_spacing_impl",
          "np_real_ldexp_impl",
          "ol_npy_logaddexp",
          "impl",
          "lcm",
          "cbrt",
          "_cbrt",
          "impl",
          "complex_sign"
        ],
        "classes": [],
        "num_lines": 1707
      },
      "/tmp/cs-hpc-demo-1/numba/np/arrayobj.py": {
        "functions": [
          "set_range_metadata",
          "mark_positive",
          "make_array",
          "get_itemsize",
          "load_item",
          "store_item",
          "fix_integer_index",
          "normalize_index",
          "normalize_indices",
          "populate_array",
          "update_array_info",
          "normalize_axis",
          "normalize_axis_overloads",
          "getiter_array",
          "_getitem_array_single_int",
          "iternext_array",
          "basic_indexing",
          "make_view",
          "_getitem_array_generic",
          "getitem_arraynd_intp",
          "getitem_array_tuple",
          "setitem_array",
          "array_len",
          "array_item",
          "fancy_getitem",
          "fancy_getitem_array",
          "offset_bounds_from_strides",
          "compute_memory_extents",
          "get_array_memory_extents",
          "extents_may_overlap",
          "maybe_copy_source",
          "_bc_adjust_dimension",
          "_bc_adjust_shape_strides",
          "_broadcast_to_shape",
          "_numpy_broadcast_to",
          "get_readonly_array",
          "_can_broadcast",
          "_default_broadcast_to_impl",
          "numpy_broadcast_to",
          "numpy_broadcast_shapes_list",
          "ol_numpy_broadcast_shapes",
          "numpy_broadcast_arrays",
          "raise_with_shape_context",
          "ol_raise_with_shape_context_generic",
          "ol_raise_with_shape_context_cpu",
          "fancy_setslice",
          "vararg_to_tuple",
          "array_transpose",
          "permute_arrays",
          "array_transpose_tuple",
          "array_transpose_vararg",
          "numpy_transpose",
          "array_T",
          "numpy_logspace",
          "numpy_geomspace",
          "numpy_rot90",
          "_attempt_nocopy_reshape",
          "normalize_reshape_value",
          "array_reshape",
          "array_reshape_vararg",
          "numpy_resize",
          "np_append",
          "array_ravel",
          "np_ravel",
          "array_flatten",
          "_np_clip_impl",
          "_np_clip_impl_none",
          "np_clip",
          "array_clip",
          "_change_dtype",
          "np_shape",
          "np_size",
          "np_unique",
          "np_repeat",
          "np_repeat_impl_repeats_scaler",
          "array_repeat",
          "_intrin_get_itemsize",
          "_compatible_view",
          "ol_compatible_view",
          "array_view",
          "array_dtype",
          "array_shape",
          "array_strides",
          "array_ndim",
          "array_size",
          "array_itemsize",
          "array_nbytes",
          "array_contiguous",
          "array_c_contiguous",
          "array_f_contiguous",
          "array_readonly",
          "array_ctypes",
          "array_ctypes_data",
          "array_ctypes_to_pointer",
          "_call_contiguous_check",
          "array_flags",
          "array_flags_c_contiguous",
          "array_flags_f_contiguous",
          "array_real_part",
          "array_imag_part",
          "array_complex_attr",
          "array_conj",
          "dtype_type",
          "static_getitem_number_clazz",
          "array_record_getattr",
          "array_record_getitem",
          "record_getattr",
          "record_setattr",
          "record_static_getitem_str",
          "record_static_getitem_int",
          "record_static_setitem_str",
          "record_static_setitem_int",
          "constant_array",
          "constant_record",
          "constant_bytes",
          "array_is",
          "ol_array_hash",
          "make_array_flat_cls",
          "make_array_ndenumerate_cls",
          "_increment_indices",
          "_increment_indices_array",
          "make_nditer_cls",
          "make_ndindex_cls",
          "_make_flattening_iter_cls",
          "make_array_flatiter",
          "iternext_numpy_flatiter",
          "iternext_numpy_getitem",
          "iternext_numpy_getitem_any",
          "iternext_numpy_getitem_flat",
          "make_array_ndenumerate",
          "iternext_numpy_nditer",
          "make_array_ndindex",
          "make_array_ndindex_tuple",
          "iternext_numpy_ndindex",
          "make_array_nditer",
          "iternext_numpy_nditer2",
          "dtype_eq_impl",
          "_empty_nd_impl",
          "_ol_array_allocate",
          "_call_allocator",
          "intrin_alloc",
          "_parse_shape",
          "_parse_empty_args",
          "_parse_empty_like_args",
          "_check_const_str_dtype",
          "numpy_empty_nd",
          "ol_np_empty",
          "numpy_empty_like_nd",
          "ol_np_empty_like",
          "_zero_fill_array_method",
          "ol_array_zero_fill",
          "ol_np_zeros",
          "ol_np_zeros_like",
          "ol_np_ones_like",
          "impl_np_full",
          "impl_np_full_like",
          "ol_np_ones",
          "impl_np_identity",
          "_eye_none_handler",
          "_eye_none_handler_impl",
          "numpy_eye",
          "impl_np_diag",
          "numpy_indices",
          "numpy_diagflat",
          "generate_getitem_setitem_with_axis",
          "numpy_take",
          "_arange_dtype",
          "np_arange",
          "numpy_linspace",
          "_array_copy",
          "_array_copy_intrinsic",
          "array_copy",
          "impl_numpy_copy",
          "_as_layout_array",
          "_as_layout_array_intrinsic",
          "array_ascontiguousarray",
          "array_asfortranarray",
          "array_astype",
          "_array_tobytes_intrinsic",
          "impl_array_tobytes",
          "np_frombuffer",
          "impl_np_frombuffer",
          "impl_carray",
          "impl_farray",
          "get_cfarray_intrinsic",
          "np_cfarray",
          "_get_seq_size",
          "_get_borrowing_getitem",
          "compute_sequence_shape",
          "check_sequence_shape",
          "assign_sequence_to_array",
          "np_array_typer",
          "np_array",
          "impl_np_array",
          "_normalize_axis",
          "_insert_axis_in_shape",
          "_insert_axis_in_strides",
          "expand_dims",
          "np_expand_dims",
          "impl_np_expand_dims",
          "_atleast_nd",
          "_atleast_nd_transform",
          "np_atleast_1d",
          "np_atleast_2d",
          "np_atleast_3d",
          "_do_concatenate",
          "_np_concatenate",
          "_np_stack",
          "np_concatenate_typer",
          "np_concatenate",
          "impl_np_concatenate",
          "_column_stack_dims",
          "np_column_stack",
          "impl_column_stack",
          "_np_stack_common",
          "np_stack_common",
          "impl_np_stack",
          "NdStack_typer",
          "_np_hstack",
          "impl_np_hstack",
          "_np_vstack",
          "impl_np_vstack",
          "_np_dstack",
          "impl_np_dstack",
          "arr_fill",
          "array_dot",
          "np_flip_lr",
          "np_flip_ud",
          "_build_flip_slice_tuple",
          "np_flip",
          "np_array_split",
          "np_split",
          "numpy_vsplit",
          "numpy_hsplit",
          "numpy_dsplit",
          "default_lt",
          "get_sort_func",
          "lt_implementation",
          "array_sort",
          "impl_np_sort",
          "array_argsort",
          "array_to_array",
          "array0d_to_scalar",
          "array_to_unichrseq",
          "reshape_unchecked",
          "type_reshape_unchecked",
          "impl_shape_unchecked",
          "as_strided",
          "sliding_window_view",
          "ol_bool",
          "numpy_swapaxes",
          "_take_along_axis_impl",
          "arr_take_along_axis",
          "nan_to_num_impl",
          "impl",
          "array_itemset",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_size",
          "get_shape",
          "get_index_bounds",
          "loop_head",
          "loop_tail",
          "__init__",
          "prepare",
          "get_shape",
          "get_offset_bounds",
          "begin_loops",
          "end_loops",
          "src_getitem",
          "src_cleanup",
          "codegen",
          "codegen",
          "impl",
          "raise_shape_mismatch_error",
          "impl",
          "impl",
          "np_reshape",
          "np_reshape",
          "impl",
          "imp_nocopy",
          "imp_copy",
          "np_ravel_impl",
          "imp",
          "impl",
          "imp",
          "impl",
          "impl",
          "np_unique_impl",
          "np_repeat_impl_repeats_array_like",
          "array_repeat_impl",
          "codegen",
          "impl",
          "impl",
          "array_is_impl",
          "impl",
          "codegen",
          "safecast_intp",
          "codegen",
          "codegen",
          "impl",
          "codegen",
          "impl",
          "impl",
          "impl",
          "impl",
          "full",
          "full_like",
          "impl",
          "identity",
          "impl",
          "impl",
          "impl",
          "impl",
          "linspace",
          "codegen",
          "codegen",
          "impl",
          "intrinsic_cfarray",
          "wrap",
          "get_first_item",
          "_fail",
          "check_seq_size",
          "assign_item",
          "assign",
          "codegen",
          "impl",
          "codegen",
          "impl",
          "impl",
          "transform",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "codegen",
          "fill_impl",
          "dot_impl",
          "impl",
          "impl",
          "codegen",
          "impl",
          "impl",
          "impl",
          "impl",
          "array_sort_impl",
          "np_sort_impl",
          "array_argsort_impl",
          "impl",
          "impl",
          "check_shape",
          "typer",
          "as_strided_impl",
          "sliding_window_view_impl",
          "impl",
          "_make_refs",
          "shape",
          "impl",
          "impl",
          "impl",
          "impl",
          "np_transpose_impl",
          "np_transpose_impl",
          "impl",
          "impl",
          "np_reshape_impl",
          "np_reshape_impl",
          "impl",
          "impl",
          "np_clip_nn",
          "np_clip_ss",
          "__init__",
          "set_member_ptr",
          "member_ptr",
          "init_specific",
          "loop_continue",
          "loop_break",
          "init_specific",
          "compute_pointer",
          "loop_continue",
          "loop_break",
          "init_specific",
          "compute_pointer",
          "compute_pointer",
          "compute_pointer",
          "compute_pointer",
          "subiters",
          "init_specific",
          "iternext_specific",
          "_loop_continue",
          "_loop_break",
          "_make_views",
          "_make_view",
          "_arrays_or_scalars",
          "init_specific",
          "iternext_specific",
          "impl",
          "impl",
          "impl",
          "diag_impl",
          "numpy_copy",
          "numpy_copy",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "codegen",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "get_shape",
          "get_shape",
          "get_strides",
          "get_window_shape",
          "get_axis",
          "impl",
          "take_along_axis_impl",
          "take_along_axis_impl",
          "src_getitem",
          "src_cleanup",
          "src_getitem",
          "src_cleanup",
          "check_shape",
          "init_specific",
          "iternext_specific",
          "getitem",
          "setitem",
          "init_specific",
          "iternext_specific",
          "_ptr_for_index",
          "getitem",
          "setitem",
          "take_impl",
          "take_impl",
          "take_impl",
          "_squeeze",
          "take_impl",
          "take_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "np_hstack_impl",
          "np_vstack_impl",
          "np_vstack_impl",
          "impl",
          "get_window_shape",
          "get_axis",
          "impl",
          "np_clip_sn",
          "np_clip_sa",
          "np_vstack_impl",
          "impl",
          "get_axis",
          "impl",
          "impl",
          "np_clip_ns",
          "np_clip_as",
          "np_clip_na",
          "np_vstack_impl",
          "impl",
          "impl",
          "impl",
          "np_clip_an",
          "np_clip_aa",
          "impl"
        ],
        "classes": [
          "Indexer",
          "EntireIndexer",
          "IntegerIndexer",
          "IntegerArrayIndexer",
          "BooleanArrayIndexer",
          "SliceIndexer",
          "FancyIndexer",
          "ArrayStruct",
          "BaseSubIter",
          "FlatSubIter",
          "TrivialFlatSubIter",
          "IndexedSubIter",
          "ZeroDimSubIter",
          "ScalarSubIter",
          "NdIter",
          "NdIndexIter",
          "CContiguousFlatIter",
          "FlatIter"
        ],
        "num_lines": 7186
      },
      "/tmp/cs-hpc-demo-1/numba/np/npdatetime.py": {
        "functions": [
          "scale_by_constant",
          "unscale_by_constant",
          "add_constant",
          "scale_timedelta",
          "normalize_timedeltas",
          "alloc_timedelta_result",
          "alloc_boolean_result",
          "is_not_nat",
          "are_not_nat",
          "datetime_constant",
          "timedelta_pos_impl",
          "timedelta_neg_impl",
          "timedelta_abs_impl",
          "timedelta_sign_impl",
          "timedelta_add_impl",
          "timedelta_sub_impl",
          "_timedelta_times_number",
          "timedelta_times_number",
          "number_times_timedelta",
          "timedelta_over_number",
          "timedelta_over_timedelta",
          "timedelta_floor_div_timedelta",
          "timedelta_mod_timedelta",
          "_create_timedelta_comparison_impl",
          "_create_timedelta_ordering_impl",
          "is_leap_year",
          "year_to_days",
          "reduce_datetime_for_unit",
          "convert_datetime_for_arith",
          "_datetime_timedelta_arith",
          "datetime_plus_timedelta",
          "timedelta_plus_datetime",
          "datetime_minus_timedelta",
          "datetime_minus_datetime",
          "_create_datetime_comparison_impl",
          "_gen_datetime_max_impl",
          "_gen_datetime_min_impl",
          "_gen_timedelta_max_impl",
          "_gen_timedelta_min_impl",
          "_cast_to_timedelta",
          "_np_isnat_impl",
          "_cast_npdatetime_int64",
          "ol_hash_npdatetime",
          "impl",
          "impl",
          "impl",
          "impl",
          "datetime_max_impl",
          "datetime_min_impl",
          "timedelta_max_impl",
          "timedelta_min_impl",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 840
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/dufunc.py": {
        "functions": [
          "make_dufunc_kernel",
          "__init__",
          "run",
          "need_advanced_indexing",
          "_prepare",
          "_load_val",
          "_load_flat",
          "_store_val",
          "_compile_ufunc",
          "_call_ufunc",
          "__init__",
          "__init__",
          "_initialize",
          "_reduce_states",
          "_rebuild",
          "build_ufunc",
          "targetoptions",
          "nin",
          "nout",
          "nargs",
          "ntypes",
          "types",
          "identity",
          "signature",
          "disable_compile",
          "add",
          "__call__",
          "_compile_for_args",
          "_compile_for_argtys",
          "match_signature",
          "_install_ufunc_attributes",
          "_install_ufunc_methods",
          "_install_ufunc_at",
          "_install_ufunc_reduce",
          "_install_ufunc_reduceat",
          "at",
          "_install_type",
          "find_ewise_function",
          "_type_me",
          "__init__",
          "get_attr_fn",
          "ol_at",
          "ol_reduce",
          "ol_reduceat",
          "impl",
          "apply_ufunc_codegen",
          "apply_a_b_ufunc",
          "apply_a_ufunc",
          "impl_cast",
          "impl_generic",
          "impl_indices_empty_b_scalar",
          "impl_scalar_scalar",
          "tuple_slice",
          "tuple_slice_append",
          "compute_flat_idx",
          "fixup_axis",
          "find_min",
          "impl_1d",
          "impl_nd_axis_int",
          "impl_nd_axis_tuple",
          "impl_axis_empty_tuple",
          "impl_axis_none",
          "tuple_slice",
          "impl",
          "gen_block",
          "codegen",
          "impl_cast"
        ],
        "classes": [
          "UfuncAtIterator",
          "DUFuncLowerer",
          "DUFunc",
          "DUFuncKernel"
        ],
        "num_lines": 1010
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/ufuncbuilder.py": {
        "functions": [
          "_compile_element_wise_function",
          "_finalize_ufunc_signature",
          "_build_element_wise_ufunc_wrapper",
          "parse_identity",
          "_suppress_deprecation_warning_nopython_not_supplied",
          "_get_transform_arg",
          "finalize",
          "__init__",
          "typing_context",
          "target_context",
          "__init__",
          "_reduce_states",
          "_rebuild",
          "enable_caching",
          "compile",
          "_compile_core",
          "add",
          "disable_compile",
          "__init__",
          "_finalize_signature",
          "build_ufunc",
          "build",
          "__init__",
          "_finalize_signature",
          "build_ufunc",
          "build",
          "transform_arg",
          "store_overloads_on_success"
        ],
        "classes": [
          "UFuncTargetOptions",
          "UFuncTarget",
          "UFuncDispatcher",
          "_BaseUFuncBuilder",
          "UFuncBuilder",
          "GUFuncBuilder"
        ],
        "num_lines": 444
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/sigparse.py": {
        "functions": [
          "parse_signature",
          "stripws",
          "tokenizer",
          "parse",
          "readline"
        ],
        "classes": [],
        "num_lines": 63
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/__init__.py": {
        "functions": [
          "_init",
          "init_cuda_vectorize",
          "init_cuda_guvectorize"
        ],
        "classes": [],
        "num_lines": 32
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/gufunc.py": {
        "functions": [
          "make_gufunc_kernel",
          "_is_array_wrapper",
          "__init__",
          "__init__",
          "_initialize",
          "_reduce_states",
          "_rebuild",
          "__repr__",
          "_install_type",
          "add",
          "build_ufunc",
          "expected_ndims",
          "_type_me",
          "_compile_for_argtys",
          "match_signature",
          "is_dynamic",
          "_get_ewise_dtypes",
          "_num_args_match",
          "_get_function_type",
          "__call__",
          "__init__",
          "cast",
          "generate"
        ],
        "classes": [
          "GUFuncLowerer",
          "GUFunc",
          "GUFuncKernel"
        ],
        "num_lines": 325
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/array_exprs.py": {
        "functions": [
          "_is_ufunc",
          "_arr_expr_to_ast",
          "_legalize_parameter_names",
          "_fix_invalid_lineno_ranges",
          "_lower_array_expr",
          "__init__",
          "match",
          "_match_array_expr",
          "_has_explicit_output",
          "_get_array_operator",
          "_get_operands",
          "_translate_expr",
          "_handle_matches",
          "_get_final_replacement",
          "apply",
          "generic_visit",
          "generate"
        ],
        "classes": [
          "RewriteArrayExprs",
          "_EraseInvalidLineRanges",
          "ExprKernel"
        ],
        "num_lines": 428
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/wrappers.py": {
        "functions": [
          "_build_ufunc_loop_body",
          "_build_ufunc_loop_body_objmode",
          "build_slow_loop_body",
          "build_obj_loop_body",
          "build_fast_loop_body",
          "build_ufunc_wrapper",
          "build_gufunc_wrapper",
          "_prepare_call_to_object_mode",
          "load",
          "store",
          "load",
          "store",
          "load",
          "store",
          "__init__",
          "load_direct",
          "load_aligned",
          "store_direct",
          "store_aligned",
          "__init__",
          "library",
          "context",
          "call_conv",
          "signature",
          "fndesc",
          "env",
          "_wrapper_function_type",
          "_build_wrapper",
          "_compile_wrapper",
          "build",
          "gen_loop_body",
          "gen_prologue",
          "gen_epilogue",
          "gen_loop_body",
          "gen_prologue",
          "gen_epilogue",
          "__init__",
          "get_array_at_offset",
          "__init__",
          "load",
          "__init__",
          "load",
          "_shape_and_strides",
          "_shape_and_strides"
        ],
        "classes": [
          "UArrayArg",
          "_GufuncWrapper",
          "_GufuncObjectWrapper",
          "GUArrayArg",
          "_ScalarArgLoader",
          "_ArrayArgLoader",
          "_ArrayAsScalarArgLoader"
        ],
        "num_lines": 743
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/parallel.py": {
        "functions": [
          "get_thread_count",
          "build_gufunc_kernel",
          "build_ufunc_wrapper",
          "build_gufunc_wrapper",
          "_set_init_process_lock",
          "threading_layer",
          "_check_tbb_version_compatible",
          "_launch_threads",
          "_load_threading_functions",
          "gen_snt_check",
          "ol_snt_check",
          "set_num_threads",
          "ol_set_num_threads",
          "get_num_threads",
          "ol_get_num_threads",
          "_iget_num_threads",
          "get_thread_id",
          "ol_get_thread_id",
          "_iget_thread_id",
          "set_parallel_chunksize",
          "get_parallel_chunksize",
          "ol_set_parallel_chunksize",
          "ol_get_parallel_chunksize",
          "as_void_ptr",
          "build",
          "__init__",
          "build",
          "__enter__",
          "__exit__",
          "snt_check",
          "impl",
          "impl",
          "codegen",
          "impl",
          "codegen",
          "impl",
          "impl",
          "select_known_backend",
          "select_from_backends",
          "raise_with_hint"
        ],
        "classes": [
          "ParallelUFuncBuilder",
          "ParallelGUFuncBuilder",
          "_nop"
        ],
        "num_lines": 763
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/ufunc_base.py": {
        "functions": [
          "__init__",
          "__call__",
          "nin",
          "nout",
          "nargs",
          "ntypes",
          "types",
          "identity",
          "signature",
          "accumulate",
          "at",
          "outer",
          "reduce",
          "reduceat",
          "disable_compile",
          "_install_cg",
          "find_ewise_function"
        ],
        "classes": [
          "UfuncLowererBase",
          "UfuncBase"
        ],
        "num_lines": 113
      },
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/decorators.py": {
        "functions": [
          "vectorize",
          "guvectorize",
          "get_identity",
          "get_cache",
          "get_writable_args",
          "get_target_implementation",
          "__new__",
          "__new__",
          "wrap",
          "wrap"
        ],
        "classes": [
          "_BaseVectorize",
          "Vectorize",
          "GUVectorize"
        ],
        "num_lines": 208
      },
      "/tmp/cs-hpc-demo-1/numba/np/math/cmathimpl.py": {
        "functions": [
          "is_nan",
          "is_inf",
          "is_finite",
          "isnan_float_impl",
          "isinf_float_impl",
          "isfinite_float_impl",
          "impl_cmath_rect",
          "intrinsic_complex_unary",
          "exp_impl",
          "log_impl",
          "log_base_impl",
          "impl_cmath_log10",
          "phase_impl",
          "polar_impl",
          "sqrt_impl",
          "cos_impl",
          "impl_cmath_cosh",
          "sin_impl",
          "impl_cmath_sinh",
          "tan_impl",
          "impl_cmath_tanh",
          "acos_impl",
          "impl_cmath_acosh",
          "asinh_impl",
          "asin_impl",
          "atan_impl",
          "atanh_impl",
          "wrapper",
          "log_base",
          "log10_impl",
          "impl",
          "impl",
          "sqrt_impl",
          "cos_impl",
          "cosh_impl",
          "sin_impl",
          "sinh_impl",
          "tan_impl",
          "tanh_impl",
          "acos_impl",
          "acosh_impl",
          "asinh_impl",
          "asin_impl",
          "atan_impl",
          "atanh_impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 542
      },
      "/tmp/cs-hpc-demo-1/numba/np/math/mathimpl.py": {
        "functions": [
          "is_nan",
          "is_inf",
          "is_finite",
          "f64_as_int64",
          "int64_as_f64",
          "f32_as_int32",
          "int32_as_f32",
          "negate_real",
          "call_fp_intrinsic",
          "_unary_int_input_wrapper_impl",
          "unary_math_int_impl",
          "unary_math_intr",
          "unary_math_extern",
          "isnan_float_impl",
          "isnan_int_impl",
          "isinf_float_impl",
          "isinf_int_impl",
          "isfinite_float_impl",
          "isfinite_int_impl",
          "copysign_float_impl",
          "frexp_impl",
          "ldexp_impl",
          "atan2_s64_impl",
          "atan2_u64_impl",
          "atan2_float_impl",
          "hypot_s64_impl",
          "hypot_u64_impl",
          "hypot_float_impl",
          "radians_float_impl",
          "degrees_float_impl",
          "pow_impl",
          "_unsigned",
          "_unsigned_impl",
          "gcd_impl",
          "implementer",
          "float_impl",
          "float_impl",
          "gcd",
          "hypot_impl",
          "hypot_impl"
        ],
        "classes": [],
        "num_lines": 455
      },
      "/tmp/cs-hpc-demo-1/numba/np/math/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/np/math/numbers.py": {
        "functions": [
          "_int_arith_flags",
          "int_add_impl",
          "int_sub_impl",
          "int_mul_impl",
          "int_divmod_signed",
          "int_divmod",
          "_int_divmod_impl",
          "int_divmod_impl",
          "int_floordiv_impl",
          "int_truediv_impl",
          "int_rem_impl",
          "_get_power_zerodiv_return",
          "int_power_impl",
          "static_power_impl",
          "int_slt_impl",
          "int_sle_impl",
          "int_sgt_impl",
          "int_sge_impl",
          "int_ult_impl",
          "int_ule_impl",
          "int_ugt_impl",
          "int_uge_impl",
          "int_eq_impl",
          "int_ne_impl",
          "int_signed_unsigned_cmp",
          "int_unsigned_signed_cmp",
          "int_abs_impl",
          "identity_impl",
          "uint_abs_impl",
          "int_shl_impl",
          "int_shr_impl",
          "int_and_impl",
          "int_or_impl",
          "int_xor_impl",
          "int_negate_impl",
          "int_positive_impl",
          "int_invert_impl",
          "int_sign_impl",
          "bool_negate_impl",
          "bool_unary_positive_impl",
          "real_add_impl",
          "real_sub_impl",
          "real_mul_impl",
          "real_div_impl",
          "real_divmod",
          "real_divmod_func_body",
          "real_divmod_impl",
          "real_mod_impl",
          "real_floordiv_impl",
          "real_power_impl",
          "real_lt_impl",
          "real_le_impl",
          "real_gt_impl",
          "real_ge_impl",
          "real_eq_impl",
          "real_ne_impl",
          "real_abs_impl",
          "real_negate_impl",
          "real_positive_impl",
          "real_sign_impl",
          "complex_real_impl",
          "complex_imag_impl",
          "complex_conjugate_impl",
          "real_real_impl",
          "real_imag_impl",
          "real_conjugate_impl",
          "complex_power_impl",
          "complex_add_impl",
          "complex_sub_impl",
          "complex_mul_impl",
          "complex_div_impl",
          "complex_negate_impl",
          "complex_positive_impl",
          "complex_eq_impl",
          "complex_ne_impl",
          "complex_abs_impl",
          "number_item_impl",
          "number_not_impl",
          "bool_as_bool",
          "int_as_bool",
          "float_as_bool",
          "complex_as_bool",
          "literal_int_to_number",
          "integer_to_integer",
          "integer_to_voidptr",
          "float_to_float",
          "integer_to_float",
          "float_to_integer",
          "non_complex_to_complex",
          "complex_to_complex",
          "any_to_boolean",
          "boolean_to_any",
          "literal_int_to_boolean",
          "constant_complex",
          "constant_integer",
          "scalar_view",
          "int_power",
          "mul",
          "impl",
          "impl",
          "complex_div",
          "complex_abs",
          "impl",
          "invert_impl",
          "invert_impl"
        ],
        "classes": [],
        "num_lines": 1395
      },
      "/tmp/cs-hpc-demo-1/numba/np/unsafe/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/np/unsafe/ndarray.py": {
        "functions": [
          "empty_inferred",
          "to_fixed_tuple",
          "codegen",
          "codegen",
          "impl"
        ],
        "classes": [],
        "num_lines": 79
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/_constants.py": {
        "functions": [],
        "classes": [],
        "num_lines": 1229
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/generator_methods.py": {
        "functions": [
          "_get_proper_func",
          "check_size",
          "check_types",
          "NumPyRandomGeneratorType_integers",
          "NumPyRandomGeneratorType_shuffle",
          "NumPyRandomGeneratorType_permutation",
          "NumPyRandomGeneratorType_random",
          "NumPyRandomGeneratorType_standard_exponential",
          "NumPyRandomGeneratorType_standard_normal",
          "NumPyRandomGeneratorType_standard_gamma",
          "NumPyRandomGeneratorType_normal",
          "NumPyRandomGeneratorType_uniform",
          "NumPyRandomGeneratorType_exponential",
          "NumPyRandomGeneratorType_gamma",
          "NumPyRandomGeneratorType_beta",
          "NumPyRandomGeneratorType_f",
          "NumPyRandomGeneratorType_chisquare",
          "NumPyRandomGeneratorType_standard_cauchy",
          "NumPyRandomGeneratorType_pareto",
          "NumPyRandomGeneratorType_weibull",
          "NumPyRandomGeneratorType_power",
          "NumPyRandomGeneratorType_laplace",
          "NumPyRandomGeneratorType_logistic",
          "NumPyRandomGeneratorType_lognormal",
          "NumPyRandomGeneratorType_rayleigh",
          "NumPyRandomGeneratorType_standard_t",
          "NumPyRandomGeneratorType_wald",
          "NumPyRandomGeneratorType_geometric",
          "NumPyRandomGeneratorType_zipf",
          "NumPyRandomGeneratorType_triangular",
          "NumPyRandomGeneratorType_poisson",
          "NumPyRandomGeneratorType_negative_binomial",
          "NumPyRandomGeneratorType_noncentral_chisquare",
          "NumPyRandomGeneratorType_noncentral_f",
          "NumPyRandomGeneratorType_logseries",
          "NumPyRandomGeneratorType_binomial",
          "impl",
          "impl",
          "check_arg_bounds",
          "check_arg_bounds",
          "check_arg_bounds",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 971
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/random_methods.py": {
        "functions": [
          "gen_mask",
          "buffered_bounded_bool",
          "buffered_uint8",
          "buffered_uint16",
          "buffered_bounded_lemire_uint8",
          "buffered_bounded_lemire_uint16",
          "buffered_bounded_lemire_uint32",
          "bounded_lemire_uint64",
          "random_bounded_uint64_fill",
          "random_bounded_uint32_fill",
          "random_bounded_uint16_fill",
          "random_bounded_uint8_fill",
          "random_bounded_bool_fill",
          "_randint_arg_check",
          "random_interval"
        ],
        "classes": [],
        "num_lines": 365
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/distributions.py": {
        "functions": [
          "np_log1p",
          "np_log1pf",
          "random_rayleigh",
          "np_expm1",
          "random_standard_normal",
          "random_standard_normal_f",
          "random_standard_exponential",
          "random_standard_exponential_f",
          "random_standard_exponential_inv",
          "random_standard_exponential_inv_f",
          "random_standard_gamma",
          "random_standard_gamma_f",
          "random_normal",
          "random_normal_f",
          "random_exponential",
          "random_uniform",
          "random_gamma",
          "random_gamma_f",
          "random_beta",
          "random_chisquare",
          "random_f",
          "random_standard_cauchy",
          "random_pareto",
          "random_weibull",
          "random_power",
          "random_laplace",
          "random_logistic",
          "random_lognormal",
          "random_standard_t",
          "random_wald",
          "random_geometric_search",
          "random_geometric_inversion",
          "random_geometric",
          "random_triangular",
          "random_loggam",
          "random_poisson_mult",
          "random_poisson_ptrs",
          "random_poisson",
          "random_negative_binomial",
          "random_noncentral_chisquare",
          "random_noncentral_f",
          "random_logseries",
          "random_binomial_btpe",
          "random_binomial_inversion",
          "random_binomial",
          "random_zipf",
          "random_zipf"
        ],
        "classes": [],
        "num_lines": 740
      },
      "/tmp/cs-hpc-demo-1/numba/np/random/generator_core.py": {
        "functions": [
          "_generate_next_binding",
          "next_double",
          "next_uint32",
          "next_uint64",
          "__init__",
          "__init__",
          "intrin_NumPyRandomBitGeneratorType_next_ty",
          "ol_next_ty",
          "next_float",
          "next_float",
          "codegen",
          "impl"
        ],
        "classes": [
          "NumPyRngBitGeneratorModel",
          "NumPyRandomGeneratorTypeModel"
        ],
        "num_lines": 132
      },
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/polynomial_functions.py": {
        "functions": [
          "roots_impl",
          "polyutils_trimseq",
          "polyutils_as_series",
          "_get_list_type",
          "_poly_result_dtype",
          "numpy_polyadd",
          "numpy_polysub",
          "numpy_polymul",
          "poly_polyval",
          "poly_polyint",
          "numpy_polydiv",
          "roots_impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 375
      },
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/polynomial_core.py": {
        "functions": [
          "type_polynomial",
          "impl_polynomial1",
          "impl_polynomial3",
          "unbox_polynomial",
          "box_polynomial",
          "__init__",
          "typer",
          "to_double",
          "const_impl",
          "to_double"
        ],
        "classes": [
          "PolynomialModel"
        ],
        "num_lines": 223
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/tuple.py": {
        "functions": [
          "tuple_setitem",
          "build_full_slice_tuple",
          "unpack_single_tuple",
          "codegen",
          "codegen",
          "codegen",
          "impl"
        ],
        "classes": [],
        "num_lines": 84
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/numbers.py": {
        "functions": [
          "viewer",
          "trailing_zeros",
          "leading_zeros",
          "codegen",
          "codegen",
          "codegen"
        ],
        "classes": [],
        "num_lines": 53
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_break_on_symbol_version.py": {
        "functions": [
          "foo_factory",
          "call_foo",
          "foo",
          "test"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 65
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_basic.py": {
        "functions": [
          "test",
          "foo"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 39
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 10
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_break_on_symbol.py": {
        "functions": [
          "foo",
          "test"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 34
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_pretty_print.py": {
        "functions": [
          "test",
          "foo"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_conditional_breakpoint.py": {
        "functions": [
          "test",
          "foo",
          "call_foo"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 45
      },
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_array_arg.py": {
        "functions": [
          "test",
          "foo"
        ],
        "classes": [
          "Test"
        ],
        "num_lines": 51
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_setuptools.py": {
        "functions": [
          "run_setup"
        ],
        "classes": [],
        "num_lines": 11
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/source_module.py": {
        "functions": [
          "get_const",
          "ones"
        ],
        "classes": [],
        "num_lines": 18
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_distutils.py": {
        "functions": [
          "run_setup"
        ],
        "classes": [],
        "num_lines": 13
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_setuptools_nested.py": {
        "functions": [
          "run_setup"
        ],
        "classes": [],
        "num_lines": 11
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_distutils_nested.py": {
        "functions": [
          "run_setup"
        ],
        "classes": [],
        "num_lines": 14
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_rec_array.py": {
        "functions": [
          "test_documentation_example1",
          "test_documentation_example2",
          "get_field_sum",
          "get_field_sum"
        ],
        "classes": [
          "TestExample"
        ],
        "num_lines": 46
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_interval_example.py": {
        "functions": [
          "test_interval_class_usage",
          "typeof_index",
          "type_interval",
          "get_width",
          "impl_interval",
          "unbox_interval",
          "box_interval",
          "inside_interval",
          "interval_width",
          "sum_intervals",
          "check_equal_intervals",
          "__init__",
          "__repr__",
          "width",
          "__init__",
          "typer",
          "__init__",
          "getter",
          "__float__"
        ],
        "classes": [
          "IntervalExampleTest",
          "Interval",
          "IntervalType",
          "IntervalModel",
          "NotAFloat"
        ],
        "num_lines": 242
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_llvm_pass_timings.py": {
        "functions": [
          "test_pass_timings",
          "foo"
        ],
        "classes": [
          "DocsLLVMPassTimings"
        ],
        "num_lines": 31
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_literal_container_usage.py": {
        "functions": [
          "test_ex_literal_dict_compile_time_consts",
          "test_ex_initial_value_dict_compile_time_consts",
          "test_ex_literal_list",
          "test_ex_initial_value_list_compile_time_consts",
          "specialize",
          "ol_specialize",
          "foo",
          "specialize",
          "ol_specialize",
          "foo",
          "specialize",
          "ol_specialize",
          "foo",
          "specialize",
          "ol_specialize",
          "foo",
          "impl",
          "impl"
        ],
        "classes": [
          "DocsLiteralContainerUsageTest"
        ],
        "num_lines": 161
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_literally_usage.py": {
        "functions": [
          "test_literally_usage",
          "power",
          "ov_power",
          "test_power"
        ],
        "classes": [
          "DocsLiterallyUsageTest"
        ],
        "num_lines": 59
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 10
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_numpy_generators.py": {
        "functions": [
          "test_numpy_gen_usage",
          "do_stuff"
        ],
        "classes": [
          "NumpyGeneratorUsageTest"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_typed_list_usage.py": {
        "functions": [
          "test_ex_inferred_list_jit",
          "test_ex_inferred_list",
          "test_ex_nested_list",
          "foo",
          "foo"
        ],
        "classes": [
          "DocsTypedListUsageTest"
        ],
        "num_lines": 95
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_structref_usage.py": {
        "functions": [
          "MyStruct_get_name",
          "MyStruct_get_vector",
          "preprocess_fields",
          "__new__",
          "name",
          "vector",
          "test_type_definition",
          "test_overload_method",
          "print",
          "make_bob",
          "distance",
          "ol_distance",
          "test",
          "impl"
        ],
        "classes": [
          "MyStructType",
          "MyStruct",
          "TestStructRefUsage"
        ],
        "num_lines": 149
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_parallel_chunksize.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_unbalanced_example",
          "test_chunksize_manual",
          "test_chunksize_with",
          "func1",
          "func1",
          "func2",
          "func1",
          "func2"
        ],
        "classes": [
          "ChunksizeExamplesTest"
        ],
        "num_lines": 122
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_typed_dict_usage.py": {
        "functions": [
          "test_ex_typed_dict_from_cpython",
          "test_ex_typed_dict_njit",
          "test_ex_inferred_dict_njit",
          "move",
          "foo",
          "foo"
        ],
        "classes": [
          "DocsTypedDictUsageTest"
        ],
        "num_lines": 111
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_examples.py": {
        "functions": [
          "find_spec",
          "__init__",
          "setUp",
          "tearDown",
          "test_mandelbrot",
          "test_moving_average",
          "test_nogil",
          "test_vectorize_one_signature",
          "test_vectorize_multiple_signatures",
          "test_guvectorize",
          "test_guvectorize_scalar_return",
          "test_guvectorize_jit",
          "test_guvectorize_jit_fail",
          "test_guvectorize_overwrite",
          "test_vectorize_dynamic",
          "test_guvectorize_dynamic",
          "mandel",
          "create_fractal",
          "move_mean",
          "func_np",
          "inner_func_nb",
          "timefunc",
          "make_singlethread",
          "make_multithread",
          "f",
          "f",
          "g",
          "g",
          "copy",
          "jit_fn",
          "copy",
          "jit_fn",
          "init_values",
          "init_values",
          "f",
          "g",
          "g",
          "func",
          "func_mt"
        ],
        "classes": [
          "MatplotlibBlocker",
          "DocsExamplesTest"
        ],
        "num_lines": 660
      },
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_jitclass.py": {
        "functions": [
          "test_ex_jitclass",
          "test_ex_jitclass_type_hints",
          "__init__",
          "size",
          "increment",
          "add",
          "__init__",
          "get",
          "__init__",
          "get"
        ],
        "classes": [
          "DocsJitclassUsageTest",
          "Bag",
          "Counter",
          "ListLoopIterator"
        ],
        "num_lines": 97
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_ufuncbuilding.py": {
        "functions": [
          "test_basic_ufunc",
          "test_ufunc_struct",
          "test_ufunc_forceobj",
          "test_nested_call",
          "test_nested_call_explicit",
          "setUp",
          "tearDown",
          "test_basic_gufunc",
          "test_gufunc_struct",
          "test_gufunc_struct_forceobj",
          "setUp",
          "tearDown",
          "test_vectorize",
          "test_vectorize_objmode",
          "test_vectorize_bool_return",
          "test_vectorize_identity",
          "test_vectorize_no_args",
          "test_vectorize_only_kws",
          "test_vectorize_output_kwarg",
          "test_guvectorize",
          "test_guvectorize_no_output",
          "test_guvectorize_objectmode",
          "test_guvectorize_scalar_objectmode",
          "test_guvectorize_error_in_objectmode",
          "test_guvectorize_identity",
          "test_guvectorize_invalid_layout",
          "__init__",
          "__array__",
          "tolist",
          "__array_ufunc__",
          "__init__",
          "__array_ufunc__",
          "_dask_method",
          "test_all",
          "test_dask_array",
          "setUp",
          "tearDown",
          "check",
          "check",
          "check",
          "new_ufunc",
          "double_static_vectorize",
          "double_dynamic_vectorize",
          "double_guvectorize"
        ],
        "classes": [
          "TestUfuncBuilding",
          "TestUfuncBuildingJitDisabled",
          "TestGUfuncBuilding",
          "TestGUfuncBuildingJitDisabled",
          "TestVectorizeDecor",
          "NEP13Array",
          "FakeDaskArray",
          "TestNEP13WithoutSignature",
          "TestDask",
          "TestVectorizeDecorJitDisabled"
        ],
        "num_lines": 471
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_errors.py": {
        "functions": [
          "sqrt",
          "gufunc_foo",
          "truediv",
          "floordiv",
          "remainder",
          "power",
          "check_ufunc_raise",
          "test_ufunc_raise",
          "test_ufunc_raise_objmode",
          "check_gufunc_raise",
          "test_gufunc_raise",
          "test_gufunc_raise_objmode",
          "check_truediv_real",
          "test_truediv_float",
          "test_truediv_integer",
          "check_divmod_float",
          "test_floordiv_float",
          "test_remainder_float",
          "check_divmod_int",
          "test_floordiv_int",
          "test_remainder_int",
          "test_power_float",
          "test_power_integer"
        ],
        "classes": [
          "TestExceptions",
          "TestFloatingPointExceptions"
        ],
        "num_lines": 174
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 10
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_vectorize_decor.py": {
        "functions": [
          "sinc",
          "scaled_sinc",
          "vector_add",
          "_run_and_compare",
          "test_1",
          "test_2",
          "test_3",
          "test_4",
          "_test_target_nopython",
          "test_target_cpu_nopython",
          "test_target_cpu_nopython_no_sig",
          "test_target_parallel_nopython",
          "_test_target_unrecognized_arg",
          "test_target_cpu_unrecognized_arg",
          "test_target_cpu_unrecognized_arg_no_sig",
          "test_target_parallel_unrecognized_arg"
        ],
        "classes": [
          "BaseVectorizeDecor",
          "TestCPUVectorizeDecor",
          "TestParallelVectorizeDecor",
          "TestCPUVectorizeJitted",
          "BaseVectorizeNopythonArg",
          "TestVectorizeNopythonArg",
          "BaseVectorizeUnrecognizedArg",
          "TestVectorizeUnrecognizedArg"
        ],
        "num_lines": 151
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/cache_usecases.py": {
        "functions": [
          "direct_ufunc_cache_usecase",
          "indirect_ufunc_cache_usecase",
          "direct_dufunc_cache_usecase",
          "indirect_dufunc_cache_usecase",
          "direct_gufunc_cache_usecase",
          "indirect_gufunc_cache_usecase",
          "ufunc",
          "indirect_ufunc_core",
          "ufunc",
          "ufunc",
          "indirect_ufunc_core",
          "ufunc",
          "gufunc",
          "core",
          "gufunc"
        ],
        "classes": [],
        "num_lines": 76
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_update_inplace.py": {
        "functions": [
          "py_replace_2nd",
          "py_update_3",
          "_run_test_for_gufunc",
          "test_update_inplace",
          "test_update_inplace_with_cache",
          "test_update_inplace_parallel",
          "test_update_inplace_3",
          "test_exceptions"
        ],
        "classes": [
          "TestUpdateInplace"
        ],
        "num_lines": 122
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_ufunc_issues.py": {
        "functions": [
          "test_thread_response",
          "test_gil_reacquire_deadlock",
          "test_gil_reacquire_deadlock",
          "fnv",
          "bar",
          "foo",
          "bar",
          "foo"
        ],
        "classes": [
          "TestParUfuncIssues",
          "TestParGUfuncIssues"
        ],
        "num_lines": 128
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_dufunc.py": {
        "functions": [
          "pyuadd",
          "pysub",
          "pymult",
          "pydiv",
          "pymin",
          "nopython_dufunc",
          "test_frozen",
          "test_scalar",
          "test_npm_call",
          "test_npm_call_implicit_output",
          "test_ufunc_props",
          "test_ufunc_props_jit",
          "_generate_jit",
          "_reduce",
          "_reduceat",
          "_at",
          "_compare_output",
          "test_numpy_ufunc_at_basic",
          "test_ufunc_at_inner_loop",
          "test_ufunc_at_ellipsis",
          "test_ufunc_at_negative",
          "test_ufunc_at_large",
          "test_cast_index_fastpath",
          "test_ufunc_at_scalar_value_fastpath",
          "test_ufunc_at_multiD",
          "test_ufunc_at_0D",
          "test_ufunc_at_dtypes",
          "test_ufunc_at_boolean",
          "test_ufunc_at_boolean2",
          "test_ufunc_at_advanced",
          "test_ufunc_at_advanced_2",
          "test_ufunc_at_advanced_3",
          "test_ufunc_at_advanced_4",
          "test_ufunc_at_advanced_5",
          "test_ufunc_at_negative_indexes",
          "test_ufunc_at_not_none_signature",
          "test_ufunc_at_no_loop_for_op",
          "test_ufunc_at_output_casting",
          "test_ufunc_at_broadcast_failure",
          "test_ufunc_at_dynamic",
          "test_ufunc_at_experimental_warning",
          "_generate_jit",
          "test_numpy_scalar_reduction",
          "check_identityless_reduction",
          "test_numpy_identityless_reduction_corder",
          "test_numpy_identityless_reduction_forder",
          "test_numpy_identityless_reduction_otherorder",
          "test_numpy_identityless_reduction_noncontig",
          "test_numpy_identityless_reduction_noncontig_unaligned",
          "test_numpy_initial_reduction",
          "test_numpy_empty_reduction_and_identity",
          "test_identityless_reduction_nonreorderable",
          "test_reduce_zero_axis",
          "_check_reduce",
          "_check_reduce_axis",
          "test_add_reduce",
          "test_mul_reduce",
          "test_non_associative_reduce",
          "test_reduce_dtype",
          "test_min_reduce",
          "test_add_reduce_initial",
          "test_add_reduce_no_initial_or_identity",
          "test_invalid_input",
          "test_dufunc_negative_axis",
          "test_dufunc_invalid_axis",
          "_compare_output",
          "test_reduceat_out_kw",
          "test_reduceat_axis_kw",
          "test_reduceat_invalid_axis",
          "test_reduceat_cast_args_to_array",
          "test_reduceat_basic",
          "test_reduceat_basic_2d",
          "test_reduceat_shifting_sum",
          "test_reduceat_int_array_reduceat_inplace",
          "test_reduceat_out_shape_mismatch",
          "test_reduceat_empty",
          "test_reduceat_error_ndim_2",
          "test_reduceat_error_non_binary_function",
          "test_reduceat_error_argument_types",
          "check",
          "test_unrestricted",
          "test_restricted",
          "npmadd",
          "npmadd",
          "get_attr_fn",
          "negative_jit_2",
          "inc",
          "fn",
          "compare_output",
          "ok",
          "err",
          "t",
          "foo",
          "foo",
          "_check",
          "foo",
          "foo",
          "foo",
          "neg",
          "neg_reduceat",
          "foo",
          "ident",
          "ident",
          "fn",
          "fn",
          "fn"
        ],
        "classes": [
          "TestDUFunc",
          "TestDUFuncMethodsBase",
          "TestDUFuncAt",
          "TestDUFuncReduceNumPyTests",
          "TestDUFuncReduce",
          "TestDUFuncReduceAt",
          "TestDUFuncPickling"
        ],
        "num_lines": 1139
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_env_variable.py": {
        "functions": [
          "test_num_threads_variable"
        ],
        "classes": [
          "TestParallelEnvVariable"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_low_work.py": {
        "functions": [
          "vector_add",
          "test_low_workcount",
          "test"
        ],
        "classes": [
          "TestParallelLowWorkCount"
        ],
        "num_lines": 44
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_ufunc.py": {
        "functions": [
          "add",
          "add_multiple_args",
          "gufunc_add",
          "ufunc_reduce",
          "_test_ufunc_attributes",
          "_test_broadcasting",
          "test_ufunc_attributes",
          "test_broadcasting",
          "test_implicit_broadcasting",
          "test_ufunc_exception_on_write_to_readonly",
          "test_optional_type_handling",
          "test_exp2",
          "test_log2",
          "inner",
          "foo",
          "foo",
          "test"
        ],
        "classes": [
          "TestUFuncs",
          "TestUFuncsMisc"
        ],
        "num_lines": 173
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_caching.py": {
        "functions": [
          "_fix_raw_path",
          "check_cache_saved",
          "check_cache_loaded",
          "check_ufunc_cache",
          "test_direct_ufunc_cache",
          "test_direct_ufunc_cache_objmode",
          "test_direct_ufunc_cache_parallel",
          "test_indirect_ufunc_cache",
          "test_indirect_ufunc_cache_parallel",
          "check_dufunc_usecase",
          "test_direct_dufunc_cache",
          "test_indirect_dufunc_cache",
          "test_filename_prefix",
          "test_direct_gufunc_cache",
          "test_direct_gufunc_cache_objmode",
          "test_direct_gufunc_cache_parallel",
          "test_indirect_gufunc_cache",
          "test_indirect_gufunc_cache_parallel",
          "run_in_separate_process",
          "test_first_load_cached_ufunc",
          "test_first_load_cached_gufunc"
        ],
        "classes": [
          "UfuncCacheTest",
          "TestUfuncCacheTest",
          "TestDUfuncCacheTest",
          "TestGUfuncCacheTest",
          "TestCacheSpecificIssue"
        ],
        "num_lines": 228
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/ufuncbuilding_usecases.py": {
        "functions": [
          "add",
          "equals",
          "mul",
          "guadd",
          "inner",
          "inner_explicit",
          "outer",
          "outer_explicit",
          "guadd_obj",
          "guadd_scalar_obj",
          "guerror"
        ],
        "classes": [
          "Dummy",
          "MyException"
        ],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_gufunc.py": {
        "functions": [
          "matmulcore",
          "axpy",
          "check_matmul_gufunc",
          "test_gufunc",
          "test_guvectorize_decor",
          "test_ufunc_like",
          "test_axis",
          "test_docstring",
          "test_multiple_outputs_same_type_passed_in",
          "test_multiple_outputs_distinct_values",
          "test_multiple_output_dtypes",
          "test_incorrect_number_of_pos_args",
          "test_dynamic_matmul",
          "test_dynamic_ufunc_like",
          "test_dynamic_scalar_output",
          "test_axis",
          "test_gufunc_attributes",
          "test_gufunc_attributes2",
          "test_scalar_output",
          "test_scalar_input",
          "test_scalar_input_core_type",
          "test_scalar_input_core_type_error",
          "test_ndim_mismatch",
          "test_pickle_gufunc_non_dyanmic",
          "test_pickle_gufunc_dyanmic_null_init",
          "test_pickle_gufunc_dynamic_initialized",
          "check_add_gufunc",
          "test_add_static",
          "test_add_static_cast_args",
          "test_add_dynamic",
          "test_object_mode",
          "check_matmul",
          "test_njit_matmul_call",
          "test_axpy",
          "test_output_scalar",
          "test_input_scalar",
          "test_gufunc_ndim_mismatch",
          "test_mismatch_inner_dimensions",
          "test_mismatch_inner_dimensions_input_output",
          "test_mismatch_inner_dimensions_output",
          "test_mismatch_loop_shape",
          "test_mismatch_loop_shape_2",
          "my_cumsum",
          "gufunc",
          "copy",
          "copy_and_double",
          "copy_and_multiply",
          "f",
          "check_matmul_gufunc",
          "check_ufunc_output",
          "sum_row",
          "my_cumsum",
          "gufunc",
          "add",
          "sum_row",
          "foo",
          "pyfunc",
          "double",
          "double",
          "double",
          "jit_add",
          "add",
          "add",
          "add",
          "add",
          "matmul_jit",
          "axpy_jit",
          "gufunc",
          "jit_func",
          "gufunc",
          "jit_func",
          "bar",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo",
          "bar",
          "foo",
          "gufunc",
          "jit_func",
          "pyfunc",
          "pyfunc"
        ],
        "classes": [
          "TestGUFunc",
          "TestMultipleOutputs",
          "TestGUFuncParallel",
          "TestDynamicGUFunc",
          "TestGUVectorizeScalar",
          "TestGUVectorizeScalarParallel",
          "TestGUVectorizePickling",
          "TestGUVectorizeJit"
        ],
        "num_lines": 849
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/nested/source_module.py": {
        "functions": [
          "get_const",
          "ones"
        ],
        "classes": [],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/nested/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/reduction.py": {
        "functions": [
          "_gpu_reduce_factory",
          "inner_warp_reduction",
          "device_reduce_full_block",
          "device_reduce_partial_block",
          "gpu_reduce_block_strided",
          "__init__",
          "_compile",
          "__call__"
        ],
        "classes": [
          "Reduce"
        ],
        "num_lines": 262
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/transpose.py": {
        "functions": [
          "transpose",
          "kernel"
        ],
        "classes": [],
        "num_lines": 65
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 24
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/compiler.py": {
        "functions": [],
        "classes": [],
        "num_lines": 9
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/kernel.py": {
        "functions": [
          "_push_kernel_context",
          "_get_kernel_context",
          "max_cooperative_grid_blocks",
          "__getitem__",
          "__init__",
          "__call__",
          "__getitem__",
          "bind",
          "specialize",
          "forall",
          "overloads",
          "py_func",
          "__init__",
          "run",
          "syncthreads",
          "syncthreads_count",
          "syncthreads_and",
          "syncthreads_or",
          "__str__",
          "__init__",
          "run",
          "fake_arg",
          "debug_wrapper",
          "target"
        ],
        "classes": [
          "FakeOverload",
          "FakeOverloadDict",
          "FakeCUDAKernel",
          "BlockThread",
          "BlockManager"
        ],
        "num_lines": 312
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/reduction.py": {
        "functions": [
          "Reduce",
          "reduce_wrapper"
        ],
        "classes": [],
        "num_lines": 15
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/vector_types.py": {
        "functions": [
          "make_simulated_vector_type",
          "_initialize",
          "__init__",
          "name",
          "num_elements",
          "as_list"
        ],
        "classes": [
          "SimulatedVectorType"
        ],
        "num_lines": 63
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/api.py": {
        "functions": [
          "select_device",
          "is_float16_supported",
          "synchronize",
          "close",
          "declare_device",
          "detect",
          "list_devices",
          "jit",
          "defer_cleanup",
          "auto_synchronize",
          "synchronize",
          "record",
          "wait",
          "synchronize",
          "elapsed_time",
          "jitwrapper"
        ],
        "classes": [
          "stream",
          "Event"
        ],
        "num_lines": 110
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/kernelapi.py": {
        "functions": [
          "swapped_cuda_module",
          "__init__",
          "__str__",
          "__repr__",
          "__iter__",
          "sync",
          "this_grid",
          "array",
          "array_like",
          "__init__",
          "array",
          "add",
          "sub",
          "and_",
          "or_",
          "xor",
          "inc",
          "dec",
          "exch",
          "max",
          "min",
          "nanmax",
          "nanmin",
          "compare_and_swap",
          "cas",
          "hadd",
          "hsub",
          "hmul",
          "hdiv",
          "hfma",
          "hneg",
          "habs",
          "hsin",
          "hcos",
          "hlog",
          "hlog2",
          "hlog10",
          "hexp",
          "hexp2",
          "hexp10",
          "hsqrt",
          "hrsqrt",
          "hceil",
          "hfloor",
          "hrcp",
          "htrunc",
          "hrint",
          "heq",
          "hne",
          "hge",
          "hgt",
          "hle",
          "hlt",
          "hmax",
          "hmin",
          "__init__",
          "cg",
          "local",
          "shared",
          "const",
          "atomic",
          "fp16",
          "threadIdx",
          "blockIdx",
          "warpsize",
          "laneid",
          "syncthreads",
          "threadfence",
          "threadfence_block",
          "threadfence_system",
          "syncthreads_count",
          "syncthreads_and",
          "syncthreads_or",
          "popc",
          "fma",
          "cbrt",
          "brev",
          "clz",
          "ffs",
          "selp",
          "grid",
          "gridsize"
        ],
        "classes": [
          "Dim3",
          "GridGroup",
          "FakeCUDACg",
          "FakeCUDALocal",
          "FakeCUDAConst",
          "FakeCUDAShared",
          "FakeCUDAAtomic",
          "FakeCUDAFp16",
          "FakeCUDAModule"
        ],
        "num_lines": 495
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/enums.py": {
        "functions": [],
        "classes": [],
        "num_lines": 607
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/error.py": {
        "functions": [
          "__str__",
          "__str__"
        ],
        "classes": [
          "CudaDriverError",
          "CudaRuntimeError",
          "CudaSupportError",
          "NvvmError",
          "NvvmSupportError",
          "NvvmWarning",
          "NvrtcError",
          "NvrtcCompilationError",
          "NvrtcSupportError"
        ],
        "num_lines": 36
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 9
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/nvvm.py": {
        "functions": [
          "is_available",
          "ccs_supported_by_ctk",
          "get_supported_ccs",
          "find_closest_arch",
          "get_arch_option",
          "ir_cas",
          "ir_numba_atomic_binary",
          "ir_numba_atomic_minmax",
          "ir_numba_atomic_inc",
          "ir_numba_atomic_dec",
          "llvm_replace",
          "compile_ir",
          "llvm140_to_70_ir",
          "set_cuda_kernel",
          "add_ir_version",
          "__new__",
          "__init__",
          "data_layout",
          "supported_ccs",
          "get_version",
          "get_ir_version",
          "check_error",
          "__init__",
          "__del__",
          "add_module",
          "lazy_add_module",
          "compile",
          "_try_error",
          "get_log",
          "__init__",
          "get",
          "stringify_option"
        ],
        "classes": [
          "NVVM",
          "CompilationUnit",
          "LibDevice"
        ],
        "num_lines": 707
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/runtime.py": {
        "functions": [
          "get_version",
          "__init__",
          "__str__",
          "__init__",
          "_initialize",
          "__getattr__",
          "_wrap_api_call",
          "_check_error",
          "_find_api",
          "get_version",
          "is_supported_version",
          "supported_versions",
          "safe_cuda_api_call",
          "absent_function"
        ],
        "classes": [
          "CudaRuntimeAPIError",
          "Runtime"
        ],
        "num_lines": 142
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/nvrtc.py": {
        "functions": [
          "compile",
          "__init__",
          "handle",
          "__del__",
          "__new__",
          "get_version",
          "create_program",
          "compile_program",
          "destroy_program",
          "get_compile_log",
          "get_ptx",
          "checked_call"
        ],
        "classes": [
          "NvrtcResult",
          "NvrtcProgram",
          "NVRTC"
        ],
        "num_lines": 260
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/ndarray.py": {
        "functions": [
          "_calc_array_sizeof",
          "ndarray_device_allocate_data"
        ],
        "classes": [],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/dummyarray.py": {
        "functions": [
          "compute_index",
          "iter_strides_f_contig",
          "iter_strides_c_contig",
          "is_element_indexing",
          "_compute_size",
          "__init__",
          "__getitem__",
          "get_offset",
          "__repr__",
          "normalize",
          "copy",
          "is_contiguous",
          "__init__",
          "iter_contiguous_extent",
          "from_desc",
          "__init__",
          "_compute_layout",
          "_compute_extent",
          "__repr__",
          "__getitem__",
          "is_c_contig",
          "is_f_contig",
          "iter_contiguous_extent",
          "reshape",
          "squeeze",
          "ravel",
          "gen"
        ],
        "classes": [
          "Dim",
          "Element",
          "Array"
        ],
        "num_lines": 452
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/drvapi.py": {
        "functions": [],
        "classes": [],
        "num_lines": 394
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/rtapi.py": {
        "functions": [],
        "classes": [],
        "num_lines": 10
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/driver.py": {
        "functions": [
          "make_logger",
          "locate_driver_and_loader",
          "load_driver",
          "find_driver",
          "_raise_driver_not_found",
          "_raise_driver_error",
          "_build_reverse_error_map",
          "_getpid",
          "_build_reverse_device_attrs",
          "met_requirement_for_device",
          "_ensure_memory_manager",
          "set_memory_manager",
          "load_module_image",
          "load_module_image_ctypes",
          "load_module_image_cuda_python",
          "_alloc_finalizer",
          "_hostalloc_finalizer",
          "_pin_finalizer",
          "_event_finalizer",
          "_stream_finalizer",
          "_module_finalizer",
          "event_elapsed_time",
          "launch_kernel",
          "get_devptr_for_active_ctx",
          "device_extents",
          "device_memory_size",
          "_is_datetime_dtype",
          "_workaround_for_datetime",
          "host_pointer",
          "host_memory_extents",
          "memory_size_from_info",
          "host_memory_size",
          "device_pointer",
          "device_ctypes_pointer",
          "is_device_memory",
          "require_device_memory",
          "device_memory_depends",
          "host_to_device",
          "device_to_host",
          "device_to_device",
          "device_memset",
          "profile_start",
          "profile_stop",
          "profiling",
          "get_version",
          "__init__",
          "__str__",
          "__new__",
          "__init__",
          "ensure_initialized",
          "_initialize_extras",
          "is_available",
          "__getattr__",
          "_ctypes_wrap_fn",
          "_cuda_python_wrap_fn",
          "_find_api",
          "_detect_fork",
          "_check_ctypes_error",
          "_check_cuda_python_error",
          "get_device",
          "get_device_count",
          "list_devices",
          "reset",
          "pop_active_context",
          "get_active_context",
          "get_version",
          "__enter__",
          "__exit__",
          "__bool__",
          "from_identity",
          "__init__",
          "get_device_identity",
          "__repr__",
          "__getattr__",
          "__hash__",
          "__eq__",
          "__ne__",
          "get_primary_context",
          "release_primary_context",
          "reset",
          "supports_float16",
          "__init__",
          "memalloc",
          "memhostalloc",
          "mempin",
          "initialize",
          "get_ipc_handle",
          "get_memory_info",
          "reset",
          "defer_cleanup",
          "interface_version",
          "__init__",
          "_attempt_allocation",
          "memhostalloc",
          "mempin",
          "memallocmanaged",
          "reset",
          "defer_cleanup",
          "get_ipc_handle",
          "initialize",
          "memalloc",
          "get_memory_info",
          "interface_version",
          "__new__",
          "__str__",
          "__init__",
          "_max_pending_bytes",
          "add_item",
          "clear",
          "disable",
          "is_disabled",
          "__len__",
          "__init__",
          "reset",
          "get_memory_info",
          "get_active_blocks_per_multiprocessor",
          "_cuda_python_active_blocks_per_multiprocessor",
          "_ctypes_active_blocks_per_multiprocessor",
          "get_max_potential_block_size",
          "_ctypes_max_potential_block_size",
          "_cuda_python_max_potential_block_size",
          "prepare_for_use",
          "push",
          "pop",
          "memalloc",
          "memallocmanaged",
          "memhostalloc",
          "mempin",
          "get_ipc_handle",
          "open_ipc_handle",
          "enable_peer_access",
          "can_access_peer",
          "create_module_ptx",
          "create_module_image",
          "unload_module",
          "get_default_stream",
          "get_legacy_default_stream",
          "get_per_thread_default_stream",
          "create_stream",
          "create_external_stream",
          "create_event",
          "synchronize",
          "defer_cleanup",
          "__repr__",
          "__eq__",
          "__ne__",
          "core",
          "core",
          "core",
          "core",
          "core",
          "core",
          "__init__",
          "open",
          "close",
          "__init__",
          "open",
          "close",
          "__init__",
          "_sentry_source_info",
          "can_access_peer",
          "open_staged",
          "open_direct",
          "open",
          "open_array",
          "close",
          "__reduce__",
          "_rebuild",
          "__init__",
          "owner",
          "own",
          "free",
          "memset",
          "view",
          "device_ctypes_pointer",
          "device_pointer_value",
          "__init__",
          "__init__",
          "own",
          "__init__",
          "own",
          "__init__",
          "own",
          "__init__",
          "__getattr__",
          "__init__",
          "__int__",
          "__repr__",
          "synchronize",
          "auto_synchronize",
          "add_callback",
          "_stream_callback",
          "async_done",
          "__init__",
          "query",
          "record",
          "synchronize",
          "wait",
          "elapsed_time",
          "__init__",
          "unload",
          "get_function",
          "get_global_symbol",
          "get_function",
          "get_global_symbol",
          "get_function",
          "get_global_symbol",
          "__init__",
          "__repr__",
          "device",
          "cache_config",
          "read_func_attr",
          "read_func_attr_all",
          "cache_config",
          "read_func_attr",
          "read_func_attr_all",
          "cache_config",
          "read_func_attr",
          "read_func_attr_all",
          "new",
          "__init__",
          "info_log",
          "error_log",
          "add_ptx",
          "add_cu",
          "add_file",
          "add_cu_file",
          "add_file_guess_ext",
          "complete",
          "__init__",
          "info_log",
          "error_log",
          "add_ptx",
          "add_file",
          "complete",
          "__init__",
          "info_log",
          "error_log",
          "add_ptx",
          "add_file",
          "complete",
          "__init__",
          "info_log",
          "error_log",
          "add_ptx",
          "add_file",
          "complete",
          "verbose_cuda_api_call",
          "safe_cuda_api_call",
          "verbose_cuda_api_call",
          "safe_cuda_api_call",
          "absent_function",
          "allocator",
          "module_unload",
          "deref",
          "resolver",
          "callback",
          "allocator",
          "allocator",
          "allocator",
          "allocator",
          "allocator",
          "allocator"
        ],
        "classes": [
          "DeadMemoryError",
          "LinkerError",
          "CudaAPIError",
          "Driver",
          "_ActiveContext",
          "Device",
          "BaseCUDAMemoryManager",
          "HostOnlyCUDAMemoryManager",
          "GetIpcHandleMixin",
          "NumbaCUDAMemoryManager",
          "_SizeNotSet",
          "_PendingDeallocs",
          "Context",
          "_CudaIpcImpl",
          "_StagedIpcImpl",
          "IpcHandle",
          "MemoryPointer",
          "AutoFreePointer",
          "MappedMemory",
          "PinnedMemory",
          "ManagedMemory",
          "OwnedPointer",
          "MappedOwnedPointer",
          "ManagedOwnedPointer",
          "Stream",
          "Event",
          "Module",
          "CtypesModule",
          "CudaPythonModule",
          "Function",
          "CtypesFunction",
          "CudaPythonFunction",
          "Linker",
          "MVCLinker",
          "CtypesLinker",
          "CudaPythonLinker"
        ],
        "num_lines": 3224
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/devices.py": {
        "functions": [
          "get_context",
          "require_context",
          "reset",
          "__getattr__",
          "__getitem__",
          "__str__",
          "__iter__",
          "__len__",
          "current",
          "__init__",
          "__getattr__",
          "__enter__",
          "__exit__",
          "__str__",
          "__init__",
          "ensure_context",
          "get_or_create_context",
          "_get_or_create_context_uncached",
          "_activate_context_for",
          "_get_attached_context",
          "_set_attached_context",
          "reset",
          "_destroy_all_contexts",
          "_require_cuda_context"
        ],
        "classes": [
          "_DeviceList",
          "_DeviceContextManager",
          "_Runtime"
        ],
        "num_lines": 248
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/devicearray.py": {
        "functions": [
          "is_cuda_ndarray",
          "verify_cuda_ndarray_interface",
          "require_cuda_ndarray",
          "_assign_kernel",
          "from_array_like",
          "from_record_like",
          "array_core",
          "is_contiguous",
          "sentry_contiguous",
          "auto_device",
          "check_array_compatibility",
          "requires_attr",
          "__init__",
          "__cuda_array_interface__",
          "bind",
          "T",
          "transpose",
          "_default_stream",
          "_numba_type_",
          "device_ctypes_pointer",
          "copy_to_device",
          "copy_to_host",
          "split",
          "as_cuda_arg",
          "get_ipc_handle",
          "squeeze",
          "view",
          "nbytes",
          "__init__",
          "flags",
          "_numba_type_",
          "__getitem__",
          "getitem",
          "_do_getitem",
          "__setitem__",
          "setitem",
          "_do_setitem",
          "kernel",
          "is_f_contiguous",
          "flags",
          "is_c_contiguous",
          "__array__",
          "__len__",
          "reshape",
          "ravel",
          "__getitem__",
          "getitem",
          "_do_getitem",
          "__setitem__",
          "setitem",
          "_do_setitem",
          "__init__",
          "open",
          "close",
          "__enter__",
          "__exit__",
          "device_setup",
          "device_setup",
          "lru_cache",
          "kernel"
        ],
        "classes": [
          "DeviceNDArrayBase",
          "DeviceRecord",
          "DeviceNDArray",
          "IpcArrayHandle",
          "MappedNDArray",
          "ManagedNDArray"
        ],
        "num_lines": 904
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/libs.py": {
        "functions": [
          "get_libdevice",
          "open_libdevice",
          "get_cudalib",
          "open_cudalib",
          "check_static_lib",
          "_get_source_variable",
          "test"
        ],
        "classes": [],
        "num_lines": 176
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/error.py": {
        "functions": [],
        "classes": [
          "CudaSupportError",
          "NvrtcError"
        ],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 2
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/nvvm.py": {
        "functions": [
          "is_available",
          "get_supported_ccs",
          "__init__"
        ],
        "classes": [
          "NvvmSupportError",
          "NVVM"
        ],
        "num_lines": 29
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/runtime.py": {
        "functions": [
          "get_version",
          "is_supported_version",
          "supported_versions"
        ],
        "classes": [
          "FakeRuntime"
        ],
        "num_lines": 19
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/dummyarray.py": {
        "functions": [],
        "classes": [],
        "num_lines": 4
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/drvapi.py": {
        "functions": [],
        "classes": [],
        "num_lines": 4
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/driver.py": {
        "functions": [
          "device_memset",
          "host_to_device",
          "device_to_host",
          "device_memory_size",
          "device_to_device",
          "launch_kernel",
          "get_device_count",
          "new",
          "lto"
        ],
        "classes": [
          "FakeDriver",
          "Linker",
          "LinkerError",
          "NvrtcError",
          "CudaAPIError"
        ],
        "num_lines": 62
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/devices.py": {
        "functions": [
          "reset",
          "get_context",
          "require_context",
          "__init__",
          "compute_capability",
          "__init__",
          "__enter__",
          "__exit__",
          "__str__",
          "id",
          "device",
          "compute_capability",
          "reset",
          "get_memory_info",
          "memalloc",
          "memhostalloc",
          "__init__",
          "__getitem__",
          "__str__",
          "__iter__",
          "__len__",
          "current"
        ],
        "classes": [
          "FakeCUDADevice",
          "FakeCUDAContext",
          "FakeDeviceList"
        ],
        "num_lines": 117
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/devicearray.py": {
        "functions": [
          "array_core",
          "is_contiguous",
          "sentry_contiguous",
          "check_array_compatibility",
          "to_device",
          "pinned",
          "mapped_array",
          "pinned_array",
          "managed_array",
          "device_array",
          "_contiguous_strides_like_array",
          "_order_like_array",
          "device_array_like",
          "pinned_array_like",
          "auto_device",
          "is_cuda_ndarray",
          "verify_cuda_ndarray_interface",
          "require_cuda_ndarray",
          "__getitem__",
          "__init__",
          "__wrap_if_fake",
          "__getattr__",
          "__setattr__",
          "__getitem__",
          "__setitem__",
          "__len__",
          "__array_ufunc__",
          "__init__",
          "alloc_size",
          "nbytes",
          "__getattr__",
          "bind",
          "T",
          "transpose",
          "__getitem__",
          "__setitem__",
          "copy_to_host",
          "copy_to_device",
          "shape",
          "ravel",
          "reshape",
          "view",
          "is_c_contiguous",
          "is_f_contiguous",
          "__str__",
          "__repr__",
          "__len__",
          "__eq__",
          "__ne__",
          "__lt__",
          "__le__",
          "__gt__",
          "__ge__",
          "__add__",
          "__sub__",
          "__mul__",
          "__floordiv__",
          "__truediv__",
          "__mod__",
          "__pow__",
          "split",
          "requires_attr",
          "convert_fakes"
        ],
        "classes": [
          "FakeShape",
          "FakeWithinKernelCUDAArray",
          "FakeCUDAArray"
        ],
        "num_lines": 436
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/libs.py": {
        "functions": [
          "check_static_lib"
        ],
        "classes": [],
        "num_lines": 2
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/support.py": {
        "functions": [
          "cuda_module_in_device_function"
        ],
        "classes": [],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/test_cudasim_issues.py": {
        "functions": [
          "test_record_access",
          "test_recarray_setting",
          "test_cuda_module_in_device_function",
          "test_deadlock_on_exception",
          "simple_kernel",
          "simple_kernel",
          "outer",
          "assert_no_blockthreads",
          "assign_with_sync"
        ],
        "classes": [
          "TestCudaSimIssues"
        ],
        "num_lines": 102
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_dummyarray.py": {
        "functions": [
          "assertSameContig",
          "test_slice0_1d",
          "test_slice1_1d",
          "test_slice2_1d",
          "test_slice0_2d",
          "test_slice1_2d",
          "test_slice2_2d",
          "test_strided_1d",
          "test_strided_2d",
          "test_strided_3d",
          "test_issue_2766",
          "test_reshape_2d2d",
          "test_reshape_2d1d",
          "test_reshape_3d3d",
          "test_reshape_3d2d",
          "test_reshape_3d1d",
          "test_reshape_infer2d2d",
          "test_reshape_infer2d1d",
          "test_reshape_infer3d3d",
          "test_reshape_infer3d2d",
          "test_reshape_infer3d1d",
          "test_reshape_infer_two_unknowns",
          "test_reshape_infer_invalid_shape",
          "test_squeeze",
          "test_squeeze_invalid_axis",
          "test_extent_1d",
          "test_extent_2d",
          "test_extent_iter_1d",
          "test_extent_iter_2d",
          "test_for_loop",
          "_assert_equal_shape_strides"
        ],
        "classes": [
          "TestSlicing",
          "TestReshape",
          "TestSqueeze",
          "TestExtent",
          "TestIterate"
        ],
        "num_lines": 359
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_nvvm.py": {
        "functions": [
          "test_nvvm_accepts_encoding"
        ],
        "classes": [
          "TestNvvmWithoutCuda"
        ],
        "num_lines": 54
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 8
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_import.py": {
        "functions": [
          "test_no_impl_import"
        ],
        "classes": [
          "TestImport"
        ],
        "num_lines": 49
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_function_resolution.py": {
        "functions": [
          "test_fp16_binary_operators",
          "test_fp16_unary_operators"
        ],
        "classes": [
          "TestFunctionResolution"
        ],
        "num_lines": 36
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_library_lookup.py": {
        "functions": [
          "remove_env",
          "check_lib_lookup",
          "_fake_non_conda_env",
          "setUp",
          "tearDown",
          "remote_do",
          "do_terminate",
          "test_libdevice_path_decision",
          "do_clear_envs",
          "do_set_cuda_home",
          "test_nvvm_path_decision",
          "do_clear_envs",
          "do_set_cuda_home",
          "test_cudalib_path_decision",
          "do_clear_envs",
          "do_set_cuda_home"
        ],
        "classes": [
          "LibraryLookupBase",
          "TestLibDeviceLookUp",
          "TestNvvmLookUp",
          "TestCudaLibLookUp"
        ],
        "num_lines": 238
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_ipc.py": {
        "functions": [
          "core_ipc_handle_test",
          "base_ipc_handle_test",
          "serialize_ipc_handle_test",
          "ipc_array_test",
          "staged_ipc_handle_test",
          "staged_ipc_array_test",
          "the_work",
          "the_work",
          "test_ipc_handle",
          "variants",
          "check_ipc_handle_serialization",
          "test_ipc_handle_serialization",
          "check_ipc_array",
          "test_ipc_array",
          "the_work",
          "test_staged",
          "test_ipc_array",
          "test_unsupported"
        ],
        "classes": [
          "TestIpcMemory",
          "TestIpcStaged",
          "TestIpcNotSupported"
        ],
        "num_lines": 314
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize.py": {
        "functions": [
          "test_scalar",
          "test_1d",
          "test_1d_async",
          "test_nd",
          "test_output_arg",
          "test_reduce",
          "test_reduce_async",
          "test_manual_transfer",
          "test_ufunc_output_2d",
          "check_tuple_arg",
          "test_tuple_arg",
          "test_namedtuple_arg",
          "test_tuple_of_array_arg",
          "test_tuple_of_namedtuple_arg",
          "test_namedtuple_of_array_arg",
          "test_name_attribute",
          "test_no_transfer_for_device_data",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "vector_add",
          "bar",
          "raising_transfer",
          "func"
        ],
        "classes": [
          "TestCUDAVectorize"
        ],
        "num_lines": 283
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_forall.py": {
        "functions": [
          "foo",
          "test_forall_1",
          "test_forall_2",
          "test_forall_no_work",
          "test_forall_negative_work",
          "bar"
        ],
        "classes": [
          "TestForAll"
        ],
        "num_lines": 52
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cuda_array_interface.py": {
        "functions": [
          "assertPointersEqual",
          "test_as_cuda_array",
          "get_stream_value",
          "test_ownership",
          "test_kernel_arg",
          "test_ufunc_arg",
          "test_gufunc_arg",
          "test_array_views",
          "test_negative_strided_issue",
          "test_negative_strided_copy_to_host",
          "test_masked_array",
          "test_zero_size_array",
          "test_strides",
          "test_consuming_strides",
          "test_produce_no_stream",
          "test_produce_managed_no_stream",
          "test_produce_stream",
          "test_produce_managed_stream",
          "test_consume_no_stream",
          "test_consume_stream",
          "test_consume_no_sync",
          "test_consume_sync",
          "test_consume_sync_disabled",
          "test_launch_no_sync",
          "test_launch_sync",
          "test_launch_sync_two_streams",
          "test_launch_sync_disabled",
          "mutate",
          "vadd",
          "vadd",
          "base_offset",
          "add_one",
          "f",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "TestCudaArrayInterface"
        ],
        "num_lines": 435
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_atomics.py": {
        "functions": [
          "atomic_cast_to_uint64",
          "atomic_cast_to_int",
          "atomic_cast_none",
          "atomic_binary_1dim_shared",
          "atomic_binary_1dim_shared2",
          "atomic_binary_2dim_shared",
          "atomic_binary_2dim_global",
          "atomic_binary_1dim_global",
          "atomic_add",
          "atomic_add_wrap",
          "atomic_add2",
          "atomic_add2_wrap",
          "atomic_add3",
          "atomic_add_float",
          "atomic_add_float_wrap",
          "atomic_add_float_2",
          "atomic_add_float_2_wrap",
          "atomic_add_float_3",
          "atomic_add_double_global",
          "atomic_add_double_global_wrap",
          "atomic_add_double_global_2",
          "atomic_add_double_global_2_wrap",
          "atomic_add_double_global_3",
          "atomic_add_double",
          "atomic_add_double_wrap",
          "atomic_add_double_2",
          "atomic_add_double_2_wrap",
          "atomic_add_double_3",
          "atomic_sub",
          "atomic_sub2",
          "atomic_sub3",
          "atomic_sub_float",
          "atomic_sub_float_2",
          "atomic_sub_float_3",
          "atomic_sub_double",
          "atomic_sub_double_2",
          "atomic_sub_double_3",
          "atomic_sub_double_global",
          "atomic_sub_double_global_2",
          "atomic_sub_double_global_3",
          "atomic_and",
          "atomic_and2",
          "atomic_and3",
          "atomic_and_global",
          "atomic_and_global_2",
          "atomic_or",
          "atomic_or2",
          "atomic_or3",
          "atomic_or_global",
          "atomic_or_global_2",
          "atomic_xor",
          "atomic_xor2",
          "atomic_xor3",
          "atomic_xor_global",
          "atomic_xor_global_2",
          "atomic_inc32",
          "atomic_inc64",
          "atomic_inc2_32",
          "atomic_inc2_64",
          "atomic_inc3",
          "atomic_inc_global",
          "atomic_inc_global_2",
          "atomic_dec32",
          "atomic_dec64",
          "atomic_dec2_32",
          "atomic_dec2_64",
          "atomic_dec3",
          "atomic_dec_global",
          "atomic_dec_global_2",
          "atomic_exch",
          "atomic_exch2",
          "atomic_exch3",
          "atomic_exch_global",
          "gen_atomic_extreme_funcs",
          "atomic_compare_and_swap",
          "atomic_cas_1dim",
          "atomic_cas_2dim",
          "setUp",
          "test_atomic_add",
          "test_atomic_add2",
          "test_atomic_add3",
          "test_atomic_add_float",
          "test_atomic_add_float_2",
          "test_atomic_add_float_3",
          "assertCorrectFloat64Atomics",
          "test_atomic_add_double",
          "test_atomic_add_double_2",
          "test_atomic_add_double_3",
          "test_atomic_add_double_global",
          "test_atomic_add_double_global_2",
          "test_atomic_add_double_global_3",
          "test_atomic_sub",
          "test_atomic_sub2",
          "test_atomic_sub3",
          "test_atomic_sub_float",
          "test_atomic_sub_float_2",
          "test_atomic_sub_float_3",
          "test_atomic_sub_double",
          "test_atomic_sub_double_2",
          "test_atomic_sub_double_3",
          "test_atomic_sub_double_global",
          "test_atomic_sub_double_global_2",
          "test_atomic_sub_double_global_3",
          "test_atomic_and",
          "test_atomic_and2",
          "test_atomic_and3",
          "test_atomic_and_global",
          "test_atomic_and_global_2",
          "test_atomic_or",
          "test_atomic_or2",
          "test_atomic_or3",
          "test_atomic_or_global",
          "test_atomic_or_global_2",
          "test_atomic_xor",
          "test_atomic_xor2",
          "test_atomic_xor3",
          "test_atomic_xor_global",
          "test_atomic_xor_global_2",
          "inc_dec_1dim_setup",
          "inc_dec_2dim_setup",
          "check_inc_index",
          "check_inc_index2",
          "check_inc",
          "test_atomic_inc_32",
          "test_atomic_inc_64",
          "test_atomic_inc2_32",
          "test_atomic_inc2_64",
          "test_atomic_inc3",
          "test_atomic_inc_global_32",
          "test_atomic_inc_global_64",
          "test_atomic_inc_global_2_32",
          "test_atomic_inc_global_2_64",
          "check_dec_index",
          "check_dec_index2",
          "check_dec",
          "test_atomic_dec_32",
          "test_atomic_dec_64",
          "test_atomic_dec2_32",
          "test_atomic_dec2_64",
          "test_atomic_dec3_new",
          "test_atomic_dec_global_32",
          "test_atomic_dec_global_64",
          "test_atomic_dec_global2_32",
          "test_atomic_dec_global2_64",
          "test_atomic_exch",
          "test_atomic_exch2",
          "test_atomic_exch3",
          "test_atomic_exch_global",
          "check_atomic_max",
          "test_atomic_max_int32",
          "test_atomic_max_uint32",
          "test_atomic_max_int64",
          "test_atomic_max_uint64",
          "test_atomic_max_float32",
          "test_atomic_max_double",
          "test_atomic_max_double_normalizedindex",
          "test_atomic_max_double_oneindex",
          "check_atomic_min",
          "test_atomic_min_int32",
          "test_atomic_min_uint32",
          "test_atomic_min_int64",
          "test_atomic_min_uint64",
          "test_atomic_min_float",
          "test_atomic_min_double",
          "test_atomic_min_double_normalizedindex",
          "test_atomic_min_double_oneindex",
          "_test_atomic_minmax_nan_location",
          "_test_atomic_minmax_nan_val",
          "test_atomic_min_nan_location",
          "test_atomic_max_nan_location",
          "test_atomic_min_nan_val",
          "test_atomic_max_nan_val",
          "test_atomic_max_double_shared",
          "test_atomic_min_double_shared",
          "check_cas",
          "test_atomic_compare_and_swap",
          "test_atomic_compare_and_swap2",
          "test_atomic_compare_and_swap3",
          "test_atomic_compare_and_swap4",
          "test_atomic_cas_1dim",
          "test_atomic_cas_2dim",
          "test_atomic_cas2_1dim",
          "test_atomic_cas2_2dim",
          "test_atomic_cas3_1dim",
          "test_atomic_cas3_2dim",
          "test_atomic_cas4_1dim",
          "test_atomic_cas4_2dim",
          "_test_atomic_returns_old",
          "test_atomic_add_returns_old",
          "test_atomic_max_returns_no_replace",
          "test_atomic_max_returns_old_replace",
          "test_atomic_max_returns_old_nan_in_array",
          "test_atomic_max_returns_old_nan_val",
          "test_atomic_min_returns_old_no_replace",
          "test_atomic_min_returns_old_replace",
          "test_atomic_min_returns_old_nan_in_array",
          "test_atomic_min_returns_old_nan_val",
          "check_atomic_nanmax",
          "test_atomic_nanmax_int32",
          "test_atomic_nanmax_uint32",
          "test_atomic_nanmax_int64",
          "test_atomic_nanmax_uint64",
          "test_atomic_nanmax_float32",
          "test_atomic_nanmax_double",
          "test_atomic_nanmax_double_shared",
          "test_atomic_nanmax_double_oneindex",
          "check_atomic_nanmin",
          "test_atomic_nanmin_int32",
          "test_atomic_nanmin_uint32",
          "test_atomic_nanmin_int64",
          "test_atomic_nanmin_uint64",
          "test_atomic_nanmin_float",
          "test_atomic_nanmin_double",
          "test_atomic_nanmin_double_shared",
          "test_atomic_nanmin_double_oneindex",
          "_test_atomic_nan_returns_old",
          "test_atomic_nanmax_returns_old_no_replace",
          "test_atomic_nanmax_returns_old_replace",
          "test_atomic_nanmax_returns_old_nan_in_array",
          "test_atomic_nanmax_returns_old_nan_val",
          "test_atomic_nanmin_returns_old_no_replace",
          "test_atomic_nanmin_returns_old_replace",
          "test_atomic_nanmin_returns_old_nan_in_array",
          "test_atomic_nanmin_returns_old_nan_val",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel"
        ],
        "classes": [
          "TestCudaAtomics"
        ],
        "num_lines": 1620
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_debuginfo.py": {
        "functions": [
          "setUp",
          "_getasm",
          "_check",
          "test_no_debuginfo_in_asm",
          "test_debuginfo_in_asm",
          "test_environment_override",
          "test_issue_5835",
          "test_wrapper_has_debuginfo",
          "test_debug_function_calls_internal_impl",
          "test_debug_function_calls_device_function",
          "_test_chained_device_function",
          "test_chained_device_function",
          "_test_chained_device_function_two_calls",
          "test_chained_device_function_two_calls",
          "test_chained_device_three_functions",
          "foo",
          "foo",
          "f",
          "f",
          "f",
          "threadid",
          "kernel",
          "f2",
          "f1",
          "kernel",
          "f2",
          "f1",
          "kernel",
          "three_device_fns",
          "foo",
          "bar",
          "f3",
          "f2",
          "f1",
          "kernel"
        ],
        "classes": [
          "TestCudaDebugInfo"
        ],
        "num_lines": 221
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_iterators.py": {
        "functions": [
          "test_enumerate",
          "_test_twoarg_function",
          "test_zip",
          "test_enumerate_zip",
          "test_zip_enumerate",
          "enumerator",
          "zipper",
          "enumerator_zipper",
          "zipper_enumerator"
        ],
        "classes": [
          "TestIterators"
        ],
        "num_lines": 99
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_retrieve_autoconverted_arrays.py": {
        "functions": [
          "nocopy",
          "set_array_to_three",
          "set_record_to_three",
          "prepare_args",
          "setUp",
          "test_array_inout",
          "test_array_in",
          "test_array_in_from_config",
          "test_array_default",
          "test_record_in",
          "test_record_inout",
          "test_record_default",
          "test_record_in_from_config"
        ],
        "classes": [
          "DefaultIn",
          "TestRetrieveAutoconvertedArrays"
        ],
        "num_lines": 83
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_py2_div_issue.py": {
        "functions": [
          "test_py2_div_issue",
          "preCalc"
        ],
        "classes": [
          "TestCudaPy2Div"
        ],
        "num_lines": 33
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_freevar.py": {
        "functions": [
          "test_freevar",
          "foo"
        ],
        "classes": [
          "TestFreeVar"
        ],
        "num_lines": 29
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_localmem.py": {
        "functions": [
          "culocal",
          "culocalcomplex",
          "culocal1tuple",
          "test_local_array",
          "test_local_array_1_tuple",
          "test_local_array_complex",
          "check_dtype",
          "test_numba_dtype",
          "test_numpy_dtype",
          "test_string_dtype",
          "test_invalid_string_dtype",
          "test_type_with_struct_data_model",
          "test_struct_model_type_arr",
          "_check_local_array_size_fp16",
          "test_issue_fp16_support",
          "f",
          "f",
          "f",
          "f",
          "f",
          "s",
          "f"
        ],
        "classes": [
          "TestCudaLocalMem"
        ],
        "num_lines": 164
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_const_string.py": {
        "functions": [
          "test_const_string",
          "test_assign_const_unicode_string",
          "test_assign_const_byte_string",
          "test_assign_const_string_in_record",
          "test_assign_const_bytes_in_record",
          "str_assign",
          "bytes_assign",
          "f",
          "f"
        ],
        "classes": [
          "TestConstStringCodegen",
          "TestConstString"
        ],
        "num_lines": 129
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_print.py": {
        "functions": [
          "run_code",
          "test_cuhello",
          "test_printfloat",
          "test_printempty",
          "test_string",
          "test_too_many_args"
        ],
        "classes": [
          "TestPrint"
        ],
        "num_lines": 128
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_laplace.py": {
        "functions": [
          "test_laplace_small",
          "get_max",
          "jocabi_relax_core"
        ],
        "classes": [
          "TestCudaLaplace"
        ],
        "num_lines": 119
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_debug.py": {
        "functions": [
          "simple_cuda",
          "compile_simple_cuda",
          "assert_fails",
          "check_debug_output",
          "_check_dump_bytecode",
          "_check_dump_cfg",
          "_check_dump_ir",
          "_check_dump_llvm",
          "_check_dump_assembly",
          "test_dump_bytecode",
          "test_dump_ir",
          "test_dump_cfg",
          "test_dump_llvm",
          "test_dump_assembly"
        ],
        "classes": [
          "TestDebugOutput"
        ],
        "num_lines": 101
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_powi.py": {
        "functions": [
          "cu_mat_power",
          "cu_mat_power_binop",
          "vec_pow",
          "vec_pow_binop",
          "vec_pow_inplace_binop",
          "random_complex",
          "test_powi",
          "test_powi_binop",
          "_test_cpow",
          "test_cpow_complex64_pow",
          "test_cpow_complex64_binop",
          "test_cpow_complex128_pow",
          "test_cpow_complex128_binop",
          "_test_cpow_inplace_binop",
          "test_cpow_complex64_inplace_binop",
          "test_cpow_complex128_inplace_binop"
        ],
        "classes": [
          "TestCudaPowi"
        ],
        "num_lines": 124
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_operator.py": {
        "functions": [
          "simple_fp16_div_scalar",
          "simple_fp16add",
          "simple_fp16_iadd",
          "simple_fp16_isub",
          "simple_fp16_imul",
          "simple_fp16_idiv",
          "simple_fp16sub",
          "simple_fp16mul",
          "simple_fp16neg",
          "simple_fp16abs",
          "simple_fp16_gt",
          "simple_fp16_ge",
          "simple_fp16_lt",
          "simple_fp16_le",
          "simple_fp16_eq",
          "simple_fp16_ne",
          "hlt_func_1",
          "hlt_func_2",
          "test_multiple_hcmp_1",
          "test_multiple_hcmp_2",
          "test_multiple_hcmp_3",
          "test_multiple_hcmp_4",
          "test_multiple_hcmp_5",
          "setUp",
          "operator_template",
          "test_add",
          "test_sub",
          "test_mul",
          "test_truediv",
          "test_floordiv",
          "test_fp16_binary",
          "test_fp16_binary_ptx",
          "test_mixed_fp16_binary_arithmetic",
          "test_fp16_inplace_binary_ptx",
          "test_fp16_inplace_binary",
          "test_fp16_unary",
          "test_fp16_neg_ptx",
          "test_fp16_abs_ptx",
          "test_fp16_comparison",
          "test_mixed_fp16_comparison",
          "test_multiple_float16_comparisons",
          "test_multiple_float16_comparisons_false",
          "test_fp16_comparison_ptx",
          "test_fp16_int8_comparison_ptx",
          "test_mixed_fp16_comparison_promotion_ptx",
          "foo"
        ],
        "classes": [
          "TestOperatorModule"
        ],
        "num_lines": 401
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_transpose.py": {
        "functions": [
          "test_transpose",
          "test_transpose_record",
          "test_transpose_bool",
          "test_transpose_view"
        ],
        "classes": [
          "TestTranspose"
        ],
        "num_lines": 80
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_minmax.py": {
        "functions": [
          "builtin_max",
          "builtin_min",
          "_run",
          "test_max_f8f8",
          "test_max_f4f8",
          "test_max_f8f4",
          "test_max_f4f4",
          "test_min_f8f8",
          "test_min_f4f8",
          "test_min_f8f4",
          "test_min_f4f4"
        ],
        "classes": [
          "TestCudaMinMax"
        ],
        "num_lines": 113
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_nondet.py": {
        "functions": [
          "generate_input",
          "test_for_pre",
          "diagproduct"
        ],
        "classes": [
          "TestCudaNonDet"
        ],
        "num_lines": 49
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sync.py": {
        "functions": [
          "useless_syncthreads",
          "useless_syncwarp",
          "useless_syncwarp_with_mask",
          "coop_syncwarp",
          "simple_smem",
          "coop_smem2d",
          "dyn_shared_memory",
          "use_threadfence",
          "use_threadfence_block",
          "use_threadfence_system",
          "use_syncthreads_count",
          "use_syncthreads_and",
          "use_syncthreads_or",
          "_safe_cc_check",
          "_test_useless",
          "test_useless_syncthreads",
          "test_useless_syncwarp",
          "test_useless_syncwarp_with_mask",
          "test_coop_syncwarp",
          "test_simple_smem",
          "test_coop_smem2d",
          "test_dyn_shared_memory",
          "test_threadfence_codegen",
          "test_threadfence_block_codegen",
          "test_threadfence_system_codegen",
          "_test_syncthreads_count",
          "test_syncthreads_count",
          "test_syncthreads_count_upcast",
          "test_syncthreads_count_downcast",
          "_test_syncthreads_and",
          "test_syncthreads_and",
          "test_syncthreads_and_upcast",
          "test_syncthreads_and_downcast",
          "_test_syncthreads_or",
          "test_syncthreads_or",
          "test_syncthreads_or_upcast",
          "test_syncthreads_or_downcast"
        ],
        "classes": [
          "TestCudaSync"
        ],
        "num_lines": 271
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_lang.py": {
        "functions": [
          "test_enumerate",
          "test_zip",
          "test_issue_872",
          "foo",
          "foo",
          "cuda_kernel_api_in_multiple_blocks"
        ],
        "classes": [
          "TestLang"
        ],
        "num_lines": 64
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multithreads.py": {
        "functions": [
          "check_concurrent_compiling",
          "spawn_process_entry",
          "foo",
          "use_foo",
          "test_concurrent_compiling",
          "test_spawn_concurrent_compilation",
          "test_invalid_context_error_with_d2h",
          "test_invalid_context_error_with_d2d",
          "d2h",
          "d2d"
        ],
        "classes": [
          "TestMultiThreadCompiling"
        ],
        "num_lines": 101
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_errors.py": {
        "functions": [
          "noop",
          "test_too_many_dims",
          "test_non_integral_dims",
          "_test_unconfigured",
          "test_unconfigured_typed_cudakernel",
          "test_unconfigured_untyped_cudakernel",
          "test_typing_error",
          "dev_func",
          "kernel_func"
        ],
        "classes": [
          "TestJitErrors"
        ],
        "num_lines": 79
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_extending.py": {
        "functions": [
          "interval_width",
          "sum_intervals",
          "__init__",
          "__repr__",
          "width",
          "typeof_interval",
          "type_interval",
          "impl_interval",
          "cuda_Interval_width",
          "test_attributes",
          "test_property",
          "test_extension_type_as_arg",
          "test_extension_type_as_retvalue",
          "__init__",
          "typer",
          "__init__",
          "resolve_width",
          "f",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "Interval",
          "TestExtending",
          "IntervalType",
          "IntervalModel",
          "Interval_attrs"
        ],
        "num_lines": 155
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_complex.py": {
        "functions": [
          "test_vectorize_complex",
          "vcomp"
        ],
        "classes": [
          "TestVectorizeComplex"
        ],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_warning.py": {
        "functions": [
          "test_inefficient_launch_configuration",
          "test_efficient_launch_configuration",
          "test_warn_on_host_array",
          "test_pinned_warn_on_host_array",
          "test_nowarn_on_mapped_array",
          "test_nowarn_on_managed_array",
          "test_nowarn_on_device_array",
          "test_warn_on_debug_and_opt",
          "test_warn_on_debug_and_opt_default",
          "test_no_warn_on_debug_and_no_opt",
          "test_no_warn_with_no_debug_and_opt_kwargs",
          "kernel",
          "kernel",
          "foo",
          "foo",
          "foo",
          "foo",
          "foo"
        ],
        "classes": [
          "TestWarnings"
        ],
        "num_lines": 139
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_slicing.py": {
        "functions": [
          "foo",
          "copy",
          "test_slice_as_arg",
          "test_assign_empty_slice",
          "test_array_slice_assignment_from_sequence_error_handling_codegen",
          "test_array_slice_assignment_from_array_error_handling_codegen",
          "check_sequence_setslice",
          "check_array_setslice"
        ],
        "classes": [
          "TestCudaSlicing"
        ],
        "num_lines": 77
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multiprocessing.py": {
        "functions": [
          "fork_test",
          "test_fork"
        ],
        "classes": [
          "TestMultiprocessing"
        ],
        "num_lines": 46
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_montecarlo.py": {
        "functions": [
          "test_montecarlo",
          "step"
        ],
        "classes": [
          "TestCudaMonteCarlo"
        ],
        "num_lines": 22
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array.py": {
        "functions": [
          "test_gpu_array_zero_length",
          "test_null_shape",
          "test_gpu_array_strided",
          "test_gpu_array_interleaved",
          "test_auto_device_const",
          "_test_array_like_same",
          "test_array_like_1d",
          "test_array_like_2d",
          "test_array_like_2d_transpose",
          "test_array_like_3d",
          "test_array_like_1d_f",
          "test_array_like_2d_f",
          "test_array_like_2d_f_transpose",
          "test_array_like_3d_f",
          "_test_array_like_view",
          "test_array_like_1d_view",
          "test_array_like_1d_view_f",
          "test_array_like_2d_view",
          "test_array_like_2d_view_f",
          "test_array_like_2d_view_transpose_device",
          "test_array_like_2d_view_transpose_simulator",
          "test_array_like_2d_view_f_transpose",
          "test_issue_4628",
          "kernel",
          "copykernel",
          "func"
        ],
        "classes": [
          "TestCudaArray"
        ],
        "num_lines": 260
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/cache_with_cpu_usecases.py": {
        "functions": [
          "target_shared_assign",
          "self_test",
          "_call",
          "check_module"
        ],
        "classes": [
          "CPUUseCase",
          "_TestModule"
        ],
        "num_lines": 41
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sm.py": {
        "functions": [
          "test_issue_953_sm_linkage_conflict",
          "_check_shared_array_size",
          "test_issue_1051_shared_size_broken_1d",
          "test_issue_1051_shared_size_broken_2d",
          "test_issue_1051_shared_size_broken_3d",
          "_check_shared_array_size_fp16",
          "test_issue_fp16_support",
          "test_issue_2393",
          "_test_shared",
          "test_shared_recarray",
          "test_shared_bool",
          "_test_dynshared_slice",
          "test_dynshared_slice_write",
          "test_dynshared_slice_read",
          "test_dynshared_slice_diff_sizes",
          "test_dynshared_slice_overlap",
          "test_dynshared_slice_gaps",
          "test_dynshared_slice_write_backwards",
          "test_dynshared_slice_nonunit_stride",
          "test_dynshared_slice_nonunit_reverse_stride",
          "test_issue_5073",
          "test_invalid_array_type",
          "test_struct_model_type_static",
          "inner",
          "outer",
          "s",
          "s",
          "costs_func",
          "use_sm_chunk_copy",
          "slice_write",
          "slice_read",
          "slice_diff_sizes",
          "slice_overlap",
          "slice_gaps",
          "slice_write_backwards",
          "slice_nonunit_stride",
          "slice_nonunit_reverse_stride",
          "sm_slice_copy",
          "unsupported_type",
          "invalid_string_type",
          "write_then_reverse_read_static"
        ],
        "classes": [
          "TestSharedMemoryIssue",
          "TestSharedMemory"
        ],
        "num_lines": 444
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_intrinsics.py": {
        "functions": [
          "simple_threadidx",
          "fill_threadidx",
          "fill3d_threadidx",
          "simple_grid1d",
          "simple_grid2d",
          "simple_gridsize1d",
          "simple_gridsize2d",
          "intrinsic_forloop_step",
          "simple_popc",
          "simple_fma",
          "simple_hadd",
          "simple_hadd_scalar",
          "simple_hfma",
          "simple_hfma_scalar",
          "simple_hsub",
          "simple_hsub_scalar",
          "simple_hmul",
          "simple_hmul_scalar",
          "simple_hdiv_scalar",
          "simple_hdiv_kernel",
          "simple_hneg",
          "simple_hneg_scalar",
          "simple_habs",
          "simple_habs_scalar",
          "simple_heq_scalar",
          "simple_hne_scalar",
          "simple_hge_scalar",
          "simple_hgt_scalar",
          "simple_hle_scalar",
          "simple_hlt_scalar",
          "hlt_func_1",
          "hlt_func_2",
          "test_multiple_hcmp_1",
          "test_multiple_hcmp_2",
          "test_multiple_hcmp_3",
          "test_multiple_hcmp_4",
          "test_multiple_hcmp_5",
          "simple_hmax_scalar",
          "simple_hmin_scalar",
          "simple_hsin",
          "simple_hcos",
          "simple_hlog",
          "simple_hlog2",
          "simple_hlog10",
          "simple_hexp",
          "simple_hexp2",
          "simple_hsqrt",
          "simple_hrsqrt",
          "numpy_hrsqrt",
          "simple_hceil",
          "simple_hfloor",
          "simple_hrcp",
          "simple_htrunc",
          "simple_hrint",
          "simple_cbrt",
          "simple_brev",
          "simple_clz",
          "simple_ffs",
          "simple_round",
          "simple_round_to",
          "branching_with_ifs",
          "branching_with_selps",
          "simple_laneid",
          "simple_warpsize",
          "nonliteral_grid",
          "nonliteral_gridsize",
          "setUp",
          "test_simple_threadidx",
          "test_fill_threadidx",
          "test_fill3d_threadidx",
          "test_nonliteral_grid_error",
          "test_nonliteral_gridsize_error",
          "test_simple_grid1d",
          "test_simple_grid2d",
          "test_simple_gridsize1d",
          "test_issue_9229",
          "test_selp",
          "test_simple_gridsize2d",
          "test_intrinsic_forloop_step",
          "test_3dgrid",
          "test_3dgrid_2",
          "test_popc_u4",
          "test_popc_u8",
          "test_fma_f4",
          "test_fma_f8",
          "test_hadd",
          "test_hadd_scalar",
          "test_hadd_ptx",
          "test_hfma",
          "test_hfma_scalar",
          "test_hfma_ptx",
          "test_hsub",
          "test_hsub_scalar",
          "test_hsub_ptx",
          "test_hmul",
          "test_hmul_scalar",
          "test_hmul_ptx",
          "test_hdiv_scalar",
          "test_hdiv",
          "test_hneg",
          "test_hneg_scalar",
          "test_hneg_ptx",
          "test_habs",
          "test_habs_scalar",
          "test_habs_ptx",
          "test_fp16_intrinsics_common",
          "test_hexp10",
          "test_fp16_comparison",
          "test_multiple_float16_comparisons",
          "test_hmax",
          "test_hmin",
          "test_cbrt_f32",
          "test_cbrt_f64",
          "test_brev_u4",
          "test_brev_u8",
          "test_clz_i4",
          "test_clz_u4",
          "test_clz_i4_1s",
          "test_clz_i4_0s",
          "test_clz_i8",
          "test_ffs_i4",
          "test_ffs_u4",
          "test_ffs_i4_1s",
          "test_ffs_i4_0s",
          "test_ffs_i8",
          "test_simple_laneid",
          "test_simple_warpsize",
          "test_round_f4",
          "test_round_f8",
          "test_round_to_f4",
          "test_round_to_f4_overflow",
          "test_round_to_f4_halfway",
          "test_round_to_f8",
          "test_round_to_f8_overflow",
          "test_round_to_f8_halfway",
          "c_contigous",
          "f_contigous",
          "f",
          "foo",
          "foo",
          "hexp10_vectors"
        ],
        "classes": [
          "TestCudaIntrinsic"
        ],
        "num_lines": 1106
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/recursion_usecases.py": {
        "functions": [
          "fib1",
          "make_fib2",
          "type_change_self",
          "fib3",
          "runaway_self",
          "raise_self",
          "raise_self_kernel",
          "make_optional_return_case",
          "make_growing_tuple_case",
          "fib2",
          "foo",
          "bar",
          "make_list"
        ],
        "classes": [],
        "num_lines": 100
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_mandel.py": {
        "functions": [
          "test_mandel",
          "mandel"
        ],
        "classes": [
          "TestCudaMandel"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_boolean.py": {
        "functions": [
          "boolean_func",
          "test_boolean"
        ],
        "classes": [
          "TestCudaBoolean"
        ],
        "num_lines": 24
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc_scalar.py": {
        "functions": [
          "test_gufunc_scalar_output",
          "test_gufunc_scalar_output_bug",
          "test_gufunc_scalar_input_saxpy",
          "test_gufunc_scalar_cast",
          "test_gufunc_old_style_scalar_as_array",
          "sum_row",
          "twice",
          "saxpy",
          "foo",
          "gufunc"
        ],
        "classes": [
          "TestGUFuncScalar"
        ],
        "num_lines": 159
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_recursion.py": {
        "functions": [
          "setUp",
          "check_fib",
          "test_global_explicit_sig",
          "test_inner_explicit_sig",
          "test_global_implicit_sig",
          "test_runaway",
          "test_type_change",
          "test_raise",
          "test_optional_return",
          "test_growing_return_tuple",
          "kernel",
          "kernel",
          "kernel",
          "cpu_kernel",
          "kernel",
          "kernel"
        ],
        "classes": [
          "TestSelfRecursion"
        ],
        "num_lines": 125
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_compiler.py": {
        "functions": [
          "f_module",
          "test_global_kernel",
          "test_device_function",
          "test_fastmath",
          "check_debug_info",
          "test_device_function_with_debug",
          "test_kernel_with_debug",
          "check_line_info",
          "test_device_function_with_line_info",
          "test_kernel_with_line_info",
          "test_non_void_return_type",
          "test_c_abi_disallowed_for_kernel",
          "test_unsupported_abi",
          "test_c_abi_device_function",
          "test_c_abi_device_function_module_scope",
          "test_c_abi_with_abi_name",
          "test_compile_defaults_to_c_abi",
          "test_compile_to_ltoir",
          "test_compile_to_invalid_error",
          "_check_ptx_for_current_device",
          "test_compile_ptx_for_current_device",
          "test_compile_for_current_device",
          "test_nanosleep",
          "f",
          "add",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "add",
          "use_nanosleep"
        ],
        "classes": [
          "TestCompile",
          "TestCompileForCurrentDevice",
          "TestCompileOnlyTests"
        ],
        "num_lines": 276
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 8
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_globals.py": {
        "functions": [
          "simple_smem",
          "coop_smem2d",
          "test_global_int_const",
          "test_global_tuple_const"
        ],
        "classes": [
          "TestCudaTestGlobal"
        ],
        "num_lines": 60
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_idiv.py": {
        "functions": [
          "test_inplace_div",
          "test_inplace_div_double",
          "div",
          "div_double"
        ],
        "classes": [
          "TestCudaIDiv"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_device_func.py": {
        "functions": [
          "test_use_add2f",
          "test_indirect_add2f",
          "_check_cpu_dispatcher",
          "test_cpu_dispatcher",
          "test_cpu_dispatcher_invalid",
          "test_cpu_dispatcher_other_module",
          "test_inspect_llvm",
          "test_inspect_asm",
          "test_inspect_sass_disallowed",
          "test_device_func_as_kernel_disallowed",
          "test_device_casting",
          "_test_declare_device",
          "test_declare_device_signature",
          "test_declare_device_string",
          "test_bad_declare_device_tuple",
          "test_bad_declare_device_string",
          "add2f",
          "use_add2f",
          "add2f",
          "indirect",
          "indirect_add2f",
          "add_kernel",
          "add",
          "add",
          "add",
          "add_kernel",
          "foo",
          "foo",
          "foo",
          "f",
          "rgba",
          "rgba_caller"
        ],
        "classes": [
          "TestDeviceFunc"
        ],
        "num_lines": 222
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_constmem.py": {
        "functions": [
          "cuconstEmpty",
          "cuconst",
          "cuconst2d",
          "cuconst3d",
          "cuconstRecEmpty",
          "cuconstRec",
          "cuconstRecAlign",
          "cuconstAlign",
          "test_const_array",
          "test_const_empty",
          "test_const_align",
          "test_const_array_2d",
          "test_const_array_3d",
          "test_const_record_empty",
          "test_const_record",
          "test_const_record_align"
        ],
        "classes": [
          "TestCudaConstantMemory"
        ],
        "num_lines": 176
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cffi.py": {
        "functions": [
          "test_from_buffer",
          "mutate_array"
        ],
        "classes": [
          "TestCFFI"
        ],
        "num_lines": 33
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_overload.py": {
        "functions": [
          "generic_func_1",
          "cuda_func_1",
          "generic_func_2",
          "cuda_func_2",
          "generic_calls_generic",
          "generic_calls_cuda",
          "cuda_calls_generic",
          "cuda_calls_cuda",
          "target_overloaded",
          "generic_calls_target_overloaded",
          "cuda_calls_target_overloaded",
          "target_overloaded_calls_target_overloaded",
          "ol_generic_func_1",
          "ol_cuda_func_1",
          "ol_generic_func_2",
          "ol_cuda_func",
          "ol_generic_calls_generic",
          "ol_generic_calls_cuda",
          "ol_cuda_calls_generic",
          "ol_cuda_calls_cuda",
          "ol_target_overloaded_generic",
          "ol_target_overloaded_cuda",
          "ol_generic_calls_target_overloaded",
          "ol_cuda_calls_target_overloaded",
          "ol_generic_calls_target_overloaded_generic",
          "ol_generic_calls_target_overloaded_cuda",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "impl",
          "check_overload",
          "check_overload_cpu",
          "test_generic",
          "test_cuda",
          "test_generic_and_cuda",
          "test_call_two_generic_calls",
          "test_call_two_cuda_calls",
          "test_generic_calls_generic",
          "test_generic_calls_cuda",
          "test_cuda_calls_generic",
          "test_cuda_calls_cuda",
          "test_call_target_overloaded",
          "test_generic_calls_target_overloaded",
          "test_cuda_calls_target_overloaded",
          "test_target_overloaded_calls_target_overloaded",
          "test_overload_attribute_target",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "ov_dummy_cuda_attr",
          "cuda_target_attr_use",
          "imp",
          "illegal_target_attr_use"
        ],
        "classes": [
          "TestOverload"
        ],
        "num_lines": 327
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_decor.py": {
        "functions": [
          "test_broadcast",
          "test_device_broadcast",
          "test_target_cuda_nopython",
          "test_target_cuda_unrecognized_arg",
          "fn",
          "fngpu",
          "fn",
          "fngpu"
        ],
        "classes": [
          "TestVectorizeDecor",
          "TestGPUVectorizeBroadcast",
          "TestVectorizeNopythonArg",
          "TestVectorizeUnrecognizedArg"
        ],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_alignment.py": {
        "functions": [
          "test_record_alignment",
          "test_record_alignment_error",
          "foo",
          "foo"
        ],
        "classes": [
          "TestAlignment"
        ],
        "num_lines": 42
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_reduction.py": {
        "functions": [
          "_sum_reduce",
          "test_sum_reduce",
          "test_empty_array_host",
          "test_empty_array_device",
          "test_prod_reduce",
          "test_max_reduce",
          "test_non_identity_init",
          "test_result_on_device"
        ],
        "classes": [
          "TestReduction"
        ],
        "num_lines": 76
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array_methods.py": {
        "functions": [
          "reinterpret_array_type",
          "test_reinterpret_array_type"
        ],
        "classes": [
          "TestCudaArrayMethods"
        ],
        "num_lines": 35
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_enums.py": {
        "functions": [
          "test_compare",
          "test_getattr_getitem",
          "test_return_from_device_func",
          "test_int_coerce",
          "test_int_cast",
          "test_vectorize",
          "f",
          "f",
          "inner",
          "f",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "EnumTest"
        ],
        "num_lines": 121
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_scalar_arg.py": {
        "functions": [
          "test_vectorize_scalar_arg",
          "test_vectorize_all_scalars",
          "vector_add",
          "vector_add"
        ],
        "classes": [
          "TestCUDAVectorizeScalarArg"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_matmul.py": {
        "functions": [
          "test_func",
          "cu_square_matrix_mul"
        ],
        "classes": [
          "TestCudaMatMul"
        ],
        "num_lines": 74
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_datetime.py": {
        "functions": [
          "test_basic_datetime_kernel",
          "test_scalar_datetime_kernel",
          "test_ufunc",
          "test_gufunc",
          "test_datetime_view_as_int64",
          "test_timedelta_view_as_int64",
          "foo",
          "foo",
          "timediff",
          "timediff"
        ],
        "classes": [
          "TestCudaDateTime"
        ],
        "num_lines": 94
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/cache_usecases.py": {
        "functions": [
          "add_usecase_kernel",
          "add_nocache_usecase_kernel",
          "inner",
          "outer_kernel",
          "outer_uncached_kernel",
          "record_return",
          "make_closure",
          "ambiguous_function",
          "ambiguous_function",
          "many_locals",
          "simple_usecase_kernel",
          "cg_usecase_kernel",
          "self_test",
          "__init__",
          "__call__",
          "func",
          "_call",
          "closure",
          "check_module"
        ],
        "classes": [
          "UseCase",
          "CUDAUseCase",
          "_TestModule"
        ],
        "num_lines": 234
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cuda_jit_no_types.py": {
        "functions": [
          "test_device_array",
          "test_device_jit",
          "test_device_jit_2",
          "test_jit_debug_simulator",
          "foo",
          "mapper",
          "reducer",
          "driver",
          "inner",
          "outer",
          "f"
        ],
        "classes": [
          "TestCudaJitNoTypes"
        ],
        "num_lines": 90
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multigpu.py": {
        "functions": [
          "test_multigpu_context",
          "test_multithreaded",
          "test_with_context",
          "test_with_context_peer_copy",
          "copy_plus_1",
          "check",
          "work",
          "vector_add_scalar"
        ],
        "classes": [
          "TestMultiGPUContext"
        ],
        "num_lines": 140
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_complex_kernel.py": {
        "functions": [
          "test_cuda_complex_arg",
          "foo"
        ],
        "classes": [
          "TestCudaComplex"
        ],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_lineinfo.py": {
        "functions": [
          "_loc_directive_regex",
          "_check",
          "test_no_lineinfo_in_asm",
          "test_lineinfo_in_asm",
          "test_lineinfo_maintains_error_model",
          "test_no_lineinfo_in_device_function",
          "test_lineinfo_in_device_function",
          "test_debug_and_lineinfo_warning",
          "foo",
          "foo",
          "divide_kernel",
          "callee",
          "caller",
          "callee",
          "caller",
          "f"
        ],
        "classes": [
          "TestCudaLineInfo"
        ],
        "num_lines": 199
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_inspect.py": {
        "functions": [
          "cc",
          "test_monotyped",
          "test_polytyped",
          "_test_inspect_sass",
          "test_inspect_sass_eager",
          "test_inspect_sass_lazy",
          "test_inspect_sass_nvdisasm_missing",
          "test_inspect_sass_cfg",
          "foo",
          "foo",
          "add",
          "add",
          "f",
          "add"
        ],
        "classes": [
          "TestInspect"
        ],
        "num_lines": 165
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_casting.py": {
        "functions": [
          "native_cast",
          "to_int8",
          "to_int16",
          "to_int32",
          "to_int64",
          "to_uint8",
          "to_uint16",
          "to_uint32",
          "to_uint64",
          "to_float16",
          "to_float32",
          "to_float64",
          "to_complex64",
          "to_complex128",
          "cuda_int_literal_to_float16",
          "reference_int_literal_to_float16",
          "cuda_float_literal_to_float16",
          "reference_float_literal_to_float16",
          "_create_wrapped",
          "test_float_to_int",
          "test_float16_to_int_ptx",
          "test_float_to_uint",
          "test_float16_to_uint_ptx",
          "test_int_to_float",
          "test_literal_to_float16",
          "test_int_to_float16_ptx",
          "test_uint_to_float16_ptx",
          "test_float_to_float",
          "test_float16_to_float_ptx",
          "test_float_to_complex",
          "test_native_cast",
          "cuda_wrapper_fn",
          "wrapper_fn"
        ],
        "classes": [
          "TestCasting"
        ],
        "num_lines": 257
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_blackscholes.py": {
        "functions": [
          "cnd",
          "black_scholes",
          "randfloat",
          "test_blackscholes",
          "cnd_cuda",
          "black_scholes_cuda"
        ],
        "classes": [
          "TestBlackScholes"
        ],
        "num_lines": 120
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_exception.py": {
        "functions": [
          "setUp",
          "test_exception",
          "test_user_raise",
          "case_raise_causing_warp_diverge",
          "test_raise_causing_warp_diverge",
          "test_no_zero_division_error",
          "test_zero_division_error_in_debug",
          "test_raise_in_device_function",
          "foo",
          "foo",
          "problematic",
          "oracle",
          "f",
          "f",
          "f",
          "kernel"
        ],
        "classes": [
          "TestException"
        ],
        "num_lines": 174
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_serialize.py": {
        "functions": [
          "check_call",
          "test_pickling_jit_typing",
          "test_pickling_jit",
          "test_pickling_vectorize",
          "inner",
          "foo",
          "inner",
          "foo",
          "cuda_vect"
        ],
        "classes": [
          "TestPickle"
        ],
        "num_lines": 85
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_fastmath.py": {
        "functions": [
          "check",
          "_test_fast_math_common",
          "_test_fast_math_unary",
          "_test_fast_math_binary",
          "test_cosf",
          "test_sinf",
          "test_tanf",
          "test_tanhf",
          "test_tanhf_compile_ptx",
          "test_expf",
          "test_logf",
          "test_log10f",
          "test_log2f",
          "test_powf",
          "test_divf",
          "test_divf_exception",
          "test_device_fastmath_propagation",
          "kernel",
          "device_function",
          "kernel",
          "device",
          "tanh_kernel",
          "tanh_common_test",
          "f10",
          "foo",
          "bar"
        ],
        "classes": [
          "FastMathCriterion",
          "TestFastMathOption"
        ],
        "num_lines": 244
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_userexc.py": {
        "functions": [
          "setUp",
          "test_user_exception",
          "test_exc"
        ],
        "classes": [
          "MyError",
          "TestUserExc"
        ],
        "num_lines": 47
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_libdevice.py": {
        "functions": [
          "use_sincos",
          "use_frexp",
          "use_sad",
          "make_test_call",
          "test_sincos",
          "test_frexp",
          "test_sad",
          "_test_call_functions"
        ],
        "classes": [
          "TestLibdevice",
          "TestLibdeviceCompilation"
        ],
        "num_lines": 187
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sm_creation.py": {
        "functions": [
          "udt_global_constants",
          "udt_global_build_tuple",
          "udt_global_build_list",
          "udt_global_constant_tuple",
          "udt_invalid_1",
          "udt_invalid_2",
          "udt_invalid_3",
          "getarg",
          "getarg2",
          "test_global_constants",
          "test_global_build_tuple",
          "test_global_build_list",
          "test_global_constant_tuple",
          "test_invalid_1",
          "test_invalid_2",
          "test_invalid_3",
          "test_invalid_4",
          "check_dtype",
          "test_numba_dtype",
          "test_numpy_dtype",
          "test_string_dtype",
          "test_invalid_string_dtype",
          "test_type_with_struct_data_model",
          "f",
          "f",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "TestSharedMemoryCreation"
        ],
        "num_lines": 205
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_optimization.py": {
        "functions": [
          "kernel_func",
          "device_func",
          "test_eager_opt",
          "test_eager_noopt",
          "test_lazy_opt",
          "test_lazy_noopt",
          "test_device_opt",
          "test_device_noopt"
        ],
        "classes": [
          "TestOptimization"
        ],
        "num_lines": 86
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_caching.py": {
        "functions": [
          "get_different_cc_gpus",
          "child_initializer",
          "setUp",
          "tearDown",
          "test_caching",
          "test_no_caching",
          "test_many_locals",
          "test_closure",
          "test_cache_reuse",
          "test_cache_invalidate",
          "test_recompile",
          "test_same_names",
          "test_cache_cg",
          "test_cache_cg_clean_run",
          "_test_pycache_fallback",
          "test_non_creatable_pycache",
          "test_non_writable_pycache",
          "test_cannot_cache_linking_libraries",
          "setUp",
          "tearDown",
          "test_cpu_and_cuda_targets",
          "test_cpu_and_cuda_reuse",
          "setUp",
          "tearDown",
          "test_cache",
          "setUp",
          "tearDown",
          "test_multiprocessing",
          "test_cannot_serialize_unfinalized",
          "f"
        ],
        "classes": [
          "CUDACachingTest",
          "CUDAAndCPUCachingTest",
          "TestMultiCCCaching",
          "TestMultiprocessCache",
          "TestCUDACodeLibrary"
        ],
        "num_lines": 545
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vector_type.py": {
        "functions": [
          "make_kernel",
          "make_fancy_creation_kernel",
          "kernel_1elem",
          "kernel_2elem",
          "kernel_3elem",
          "kernel_4elem",
          "kernel",
          "test_basic",
          "test_creation_readout",
          "test_fancy_creation_readout",
          "test_vector_type_alias",
          "kernel"
        ],
        "classes": [
          "TestCudaVectorType"
        ],
        "num_lines": 307
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_warp_ops.py": {
        "functions": [
          "useful_syncwarp",
          "use_shfl_sync_idx",
          "use_shfl_sync_up",
          "use_shfl_sync_down",
          "use_shfl_sync_xor",
          "use_shfl_sync_with_val",
          "use_vote_sync_all",
          "use_vote_sync_any",
          "use_vote_sync_eq",
          "use_vote_sync_ballot",
          "use_match_any_sync",
          "use_match_all_sync",
          "use_independent_scheduling",
          "_safe_cc_check",
          "test_useful_syncwarp",
          "test_shfl_sync_idx",
          "test_shfl_sync_up",
          "test_shfl_sync_down",
          "test_shfl_sync_xor",
          "test_shfl_sync_types",
          "test_vote_sync_all",
          "test_vote_sync_any",
          "test_vote_sync_eq",
          "test_vote_sync_ballot",
          "test_match_any_sync",
          "test_match_all_sync",
          "test_independent_scheduling",
          "test_activemask",
          "test_lanemask_lt",
          "use_activemask",
          "use_lanemask_lt"
        ],
        "classes": [
          "TestCudaWarpOperations"
        ],
        "num_lines": 276
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cooperative_groups.py": {
        "functions": [
          "this_grid",
          "sync_group",
          "no_sync",
          "sequential_rows",
          "test_this_grid",
          "test_this_grid_is_cooperative",
          "test_sync_group",
          "test_sync_group_is_cooperative",
          "test_false_cooperative_doesnt_link_cudadevrt",
          "test_sync_at_matrix_row",
          "test_max_cooperative_grid_blocks"
        ],
        "classes": [
          "TestCudaCooperativeGroups"
        ],
        "num_lines": 147
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_complex.py": {
        "functions": [
          "compile_scalar_func",
          "kernel_wrapper",
          "basic_values",
          "more_values",
          "non_nan_values",
          "run_func",
          "check_real_image",
          "test_real",
          "test_imag",
          "test_conjugate",
          "check_predicate_func",
          "check_unary_func",
          "test_phase",
          "test_polar",
          "test_rect",
          "test_isnan",
          "test_isinf",
          "test_isfinite",
          "test_exp",
          "test_log",
          "test_log_base",
          "test_log10",
          "test_sqrt",
          "test_acos",
          "test_asin",
          "test_atan",
          "test_cos",
          "test_sin",
          "test_tan",
          "test_acosh",
          "test_asinh",
          "test_atanh",
          "test_cosh",
          "test_sinh",
          "test_tanh",
          "test_atomic_on_real",
          "test_atomic_on_imag",
          "kernel_func",
          "do_test",
          "atomic_add_one",
          "atomic_add_one_j",
          "kernel_func",
          "sig",
          "sig"
        ],
        "classes": [
          "BaseComplexTest",
          "TestComplex",
          "TestCMath",
          "TestAtomicOnComplexComponents"
        ],
        "num_lines": 296
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array_args.py": {
        "functions": [
          "test_array_ary",
          "test_unituple",
          "test_tuple",
          "test_namedunituple",
          "test_namedtuple",
          "test_empty_tuple",
          "test_tuple_of_empty_tuples",
          "test_tuple_of_tuples",
          "test_tuple_of_tuples_and_scalars",
          "test_tuple_of_arrays",
          "test_tuple_of_array_scalar_tuple",
          "test_10y_issue_9585",
          "device_function",
          "kernel",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f"
        ],
        "classes": [
          "TestCudaArrayArg",
          "TestDatetimeIssues"
        ],
        "num_lines": 224
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_device.py": {
        "functions": [
          "test_cuda_vectorize_device_call",
          "cu_device_fn",
          "cu_ufunc"
        ],
        "classes": [
          "TestCudaVectorizeDeviceCall"
        ],
        "num_lines": 36
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/extensions_usecases.py": {
        "functions": [
          "__init__",
          "__init__",
          "typeof_teststruct",
          "type_test_struct",
          "lower_test_type_ctor",
          "__init__",
          "typer"
        ],
        "classes": [
          "TestStruct",
          "TestStructModelType",
          "TestStructModel"
        ],
        "num_lines": 58
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_dispatcher.py": {
        "functions": [
          "add",
          "add_kernel",
          "_test_no_double_specialize",
          "test_no_double_specialize_sig_same_types",
          "test_no_double_specialize_no_sig_same_types",
          "test_no_double_specialize_sig_diff_types",
          "test_no_double_specialize_no_sig_diff_types",
          "test_specialize_cache_same",
          "test_specialize_cache_same_with_ordering",
          "test_coerce_input_types",
          "test_coerce_input_types_unsafe",
          "test_coerce_input_types_unsafe_complex",
          "test_ambiguous_new_version",
          "test_lock",
          "_test_explicit_signatures",
          "test_explicit_signatures_strings",
          "test_explicit_signatures_tuples",
          "test_explicit_signatures_signatures",
          "test_explicit_signatures_mixed",
          "test_explicit_signatures_same_type_class",
          "test_explicit_signatures_ambiguous_resolution",
          "test_explicit_signatures_unsafe",
          "add_device_usecase",
          "test_explicit_signatures_device",
          "test_explicit_signatures_device_same_type_class",
          "test_explicit_signatures_device_ambiguous",
          "test_explicit_signatures_device_unsafe",
          "test_dispatcher_docstring",
          "test_get_regs_per_thread_unspecialized",
          "test_get_regs_per_thread_specialized",
          "test_get_const_mem_unspecialized",
          "test_get_const_mem_specialized",
          "test_get_shared_mem_per_block_unspecialized",
          "test_get_shared_mem_per_block_specialized",
          "test_get_max_threads_per_block_unspecialized",
          "test_get_local_mem_per_thread_unspecialized",
          "test_get_local_mem_per_thread_specialized",
          "f",
          "f",
          "f",
          "f",
          "f",
          "f",
          "foo",
          "wrapper",
          "f",
          "add_kernel",
          "add_device",
          "pi_sin_array",
          "pi_sin_array",
          "const_fmt_string",
          "const_array_use",
          "simple_smem",
          "simple_smem",
          "simple_maxthreads",
          "simple_lmem",
          "simple_lmem"
        ],
        "classes": [
          "TestDispatcherSpecialization",
          "TestDispatcher",
          "TestDispatcherKernelProperties"
        ],
        "num_lines": 700
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_ufuncs.py": {
        "functions": [
          "_make_ufunc_usecase",
          "setUp",
          "tearDown",
          "_make_ufunc_usecase",
          "_compile",
          "basic_int_ufunc_test",
          "test_sin_ufunc",
          "test_cos_ufunc",
          "test_tan_ufunc",
          "test_arcsin_ufunc",
          "test_arccos_ufunc",
          "test_arctan_ufunc",
          "test_arctan2_ufunc",
          "test_hypot_ufunc",
          "test_sinh_ufunc",
          "test_cosh_ufunc",
          "test_tanh_ufunc",
          "test_arcsinh_ufunc",
          "test_arccosh_ufunc",
          "test_arctanh_ufunc",
          "test_deg2rad_ufunc",
          "test_rad2deg_ufunc",
          "test_degrees_ufunc",
          "test_radians_ufunc",
          "test_greater_ufunc",
          "test_greater_equal_ufunc",
          "test_less_ufunc",
          "test_less_equal_ufunc",
          "test_not_equal_ufunc",
          "test_equal_ufunc",
          "test_logical_and_ufunc",
          "test_logical_or_ufunc",
          "test_logical_xor_ufunc",
          "test_logical_not_ufunc",
          "test_maximum_ufunc",
          "test_minimum_ufunc",
          "test_fmax_ufunc",
          "test_fmin_ufunc",
          "test_bitwise_and_ufunc",
          "test_bitwise_or_ufunc",
          "test_bitwise_xor_ufunc",
          "test_invert_ufunc",
          "test_bitwise_not_ufunc",
          "test_log_ufunc",
          "test_log2_ufunc",
          "test_log10_ufunc"
        ],
        "classes": [
          "TestUFuncs"
        ],
        "num_lines": 277
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc_scheduling.py": {
        "functions": [
          "template",
          "test_signature_1",
          "test_signature_2",
          "test_signature_3",
          "test_signature_4",
          "test_signature_5",
          "test_signature_6",
          "test_signature_7"
        ],
        "classes": [
          "TestGUFuncScheduling"
        ],
        "num_lines": 95
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_math.py": {
        "functions": [
          "math_acos",
          "math_asin",
          "math_atan",
          "math_acosh",
          "math_asinh",
          "math_atanh",
          "math_cos",
          "math_sin",
          "math_tan",
          "math_cosh",
          "math_sinh",
          "math_tanh",
          "math_atan2",
          "math_exp",
          "math_erf",
          "math_erfc",
          "math_expm1",
          "math_fabs",
          "math_gamma",
          "math_lgamma",
          "math_log",
          "math_log2",
          "math_log10",
          "math_log1p",
          "math_remainder",
          "math_sqrt",
          "math_hypot",
          "math_pow",
          "math_ceil",
          "math_floor",
          "math_copysign",
          "math_fmod",
          "math_modf",
          "math_isnan",
          "math_isinf",
          "math_isfinite",
          "math_degrees",
          "math_radians",
          "math_trunc",
          "math_pow_binop",
          "math_mod_binop",
          "unary_template_float16",
          "unary_template_float32",
          "unary_template_float64",
          "unary_template_int64",
          "unary_template_uint64",
          "unary_template",
          "unary_bool_special_values",
          "unary_bool_special_values_float32",
          "unary_bool_special_values_float64",
          "unary_bool_template_float32",
          "unary_bool_template_float64",
          "unary_bool_template_int32",
          "unary_bool_template_int64",
          "unary_bool_template",
          "binary_template_float32",
          "binary_template_float64",
          "binary_template_int64",
          "binary_template_uint64",
          "binary_template",
          "test_math_acos",
          "test_math_asin",
          "test_math_atan",
          "test_math_acosh",
          "test_math_asinh",
          "test_math_atanh",
          "test_math_cos",
          "test_math_fp16",
          "test_math_fp16_trunc",
          "test_math_sin",
          "test_math_tan",
          "test_math_cosh",
          "test_math_sinh",
          "test_math_tanh",
          "test_math_atan2",
          "test_math_erf",
          "test_math_erfc",
          "test_math_exp",
          "test_math_expm1",
          "test_math_fabs",
          "test_math_gamma",
          "test_math_lgamma",
          "test_math_log",
          "test_math_log2",
          "test_math_log10",
          "test_math_log1p",
          "test_math_remainder",
          "test_math_remainder_0_0",
          "test_math_sqrt",
          "test_math_hypot",
          "pow_template_int32",
          "test_math_pow",
          "test_math_pow_binop",
          "test_math_ceil",
          "test_math_floor",
          "test_math_trunc",
          "test_math_trunc_non_float64",
          "test_math_copysign",
          "test_math_modf",
          "test_math_fmod",
          "test_math_mod_binop",
          "test_math_isnan",
          "test_math_isinf",
          "test_math_isfinite",
          "test_math_degrees",
          "test_math_radians",
          "ufunc",
          "ufunc",
          "ufunc",
          "ufunc",
          "test_0_0",
          "modf_template_nan",
          "modf_template_compare"
        ],
        "classes": [
          "TestCudaMath"
        ],
        "num_lines": 786
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_frexp_ldexp.py": {
        "functions": [
          "simple_frexp",
          "simple_ldexp",
          "template_test_frexp",
          "template_test_ldexp",
          "test_frexp_f4",
          "test_ldexp_f4",
          "test_frexp_f8",
          "test_ldexp_f8"
        ],
        "classes": [
          "TestCudaFrexpLdexp"
        ],
        "num_lines": 66
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_record_dtype.py": {
        "functions": [
          "set_a",
          "set_b",
          "set_c",
          "set_record",
          "record_set_a",
          "record_set_b",
          "record_set_c",
          "record_read_a",
          "record_read_b",
          "record_read_c",
          "record_write_array",
          "record_write_2d_array",
          "record_read_array",
          "record_read_2d_array",
          "record_write_full_array",
          "record_write_full_array_alt",
          "recarray_set_record",
          "recarray_write_array_of_nestedarray_broadcast",
          "record_setitem_array",
          "recarray_write_array_of_nestedarray",
          "recarray_getitem_return",
          "recarray_getitem_field_return",
          "recarray_getitem_field_return2",
          "recarray_getitem_field_return2_2d",
          "record_read_array0",
          "record_read_array1",
          "record_read_whole_array",
          "record_read_2d_array00",
          "record_read_2d_array10",
          "record_read_2d_array01",
          "assign_array_to_nested",
          "assign_array_to_nested_2d",
          "_createSampleArrays",
          "setUp",
          "get_cfunc",
          "_test_set_equal",
          "test_set_a",
          "test_set_b",
          "test_set_c",
          "test_set_record",
          "_test_rec_set",
          "test_rec_set_a",
          "test_rec_set_b",
          "test_rec_set_c",
          "_test_rec_read",
          "test_rec_read_a",
          "test_rec_read_b",
          "test_rec_read_c",
          "test_record_write_1d_array",
          "test_record_write_2d_array",
          "test_record_read_1d_array",
          "test_record_read_2d_array",
          "_createSampleArrays",
          "get_cfunc",
          "test_record_read_array",
          "test_record_read_2d_array",
          "test_setitem",
          "test_getitem_idx",
          "test_set_record",
          "test_assign_array_to_nested",
          "test_assign_array_to_nested_2d",
          "test_issue_7693",
          "test_getitem_idx_2darray",
          "test_return_getattr_getitem_fieldname",
          "test_record_read_arrays",
          "test_return_array",
          "test_set_array",
          "test_set_arrays",
          "outer",
          "host",
          "gen",
          "copy"
        ],
        "classes": [
          "TestRecordDtype",
          "TestRecordDtypeWithStructArrays",
          "TestNestedArrays"
        ],
        "num_lines": 610
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc.py": {
        "functions": [
          "_get_matmulcore_gufunc",
          "matmulcore",
          "test_gufunc_small",
          "test_gufunc_auto_transfer",
          "test_gufunc",
          "test_gufunc_hidim",
          "test_gufunc_new_axis",
          "test_gufunc_stream",
          "test_copy",
          "test_copy_unspecified_return",
          "test_copy_odd",
          "test_copy2d",
          "test_not_supported_call_from_jit",
          "test_inefficient_launch_configuration",
          "test_efficient_launch_configuration",
          "test_nopython_flag",
          "test_invalid_flags",
          "test_duplicated_output",
          "check_tuple_arg",
          "test_tuple_of_tuple_arg",
          "test_tuple_of_namedtuple_arg",
          "test_tuple_of_array_arg",
          "test_gufunc_name",
          "test_bad_return_type",
          "test_incorrect_number_of_pos_args",
          "test_multiple_outputs_same_type_passed_in",
          "test_multiple_outputs_distinct_values",
          "test_multiple_output_allocation",
          "test_multiple_output_dtypes",
          "test_incorrect_number_of_pos_args",
          "copy",
          "copy",
          "copy",
          "copy2d",
          "gufunc_copy",
          "cuda_jit",
          "numba_dist_cuda",
          "numba_dist_cuda2",
          "foo",
          "foo",
          "foo",
          "gu_reduce",
          "f",
          "copy",
          "copy_and_double",
          "copy_and_double",
          "copy_and_multiply",
          "f",
          "f"
        ],
        "classes": [
          "TestCUDAGufunc",
          "TestMultipleOutputs"
        ],
        "num_lines": 456
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_random.py": {
        "functions": [
          "rng_kernel_float32",
          "rng_kernel_float64",
          "test_create",
          "test_create_subsequence_start",
          "test_create_stream",
          "check_uniform",
          "test_uniform_float32",
          "test_uniform_float64",
          "check_normal",
          "test_normal_float32",
          "test_normal_float64"
        ],
        "classes": [
          "TestCudaRandomXoroshiro128p"
        ],
        "num_lines": 104
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_laplace.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_laplace",
          "solve_heat_equation"
        ],
        "classes": [
          "TestLaplace"
        ],
        "num_lines": 155
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_vecadd.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_vecadd",
          "f"
        ],
        "classes": [
          "TestVecAdd"
        ],
        "num_lines": 73
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_cg.py": {
        "functions": [
          "test_ex_grid_sync",
          "sequential_rows"
        ],
        "classes": [
          "TestCooperativeGroups"
        ],
        "num_lines": 77
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_cpu_gpu_compat.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_cpu_gpu_compat",
          "business_logic",
          "f"
        ],
        "classes": [
          "TestCpuGpuCompat"
        ],
        "num_lines": 76
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_montecarlo.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_montecarlo",
          "mc_integrator_kernel",
          "sum_reduce",
          "mc_integrate",
          "func"
        ],
        "classes": [
          "TestMonteCarlo"
        ],
        "num_lines": 109
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 6
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_reduction.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_reduction",
          "array_sum"
        ],
        "classes": [
          "TestReduction"
        ],
        "num_lines": 76
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_matmul.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_matmul",
          "matmul",
          "fast_matmul"
        ],
        "classes": [
          "TestMatMul"
        ],
        "num_lines": 173
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_ffi.py": {
        "functions": [
          "test_ex_linking_cu",
          "test_ex_from_buffer",
          "multiply_vectors",
          "reduction_caller"
        ],
        "classes": [
          "TestFFI"
        ],
        "num_lines": 82
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_ufunc.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_cuda_ufunc_call",
          "f"
        ],
        "classes": [
          "TestUFunc"
        ],
        "num_lines": 50
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_sessionize.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_ex_sessionize",
          "sessionize"
        ],
        "classes": [
          "TestSessionization"
        ],
        "num_lines": 130
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_random.py": {
        "functions": [
          "test_ex_3d_grid",
          "random_3d"
        ],
        "classes": [
          "TestRandom"
        ],
        "num_lines": 59
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/data/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_streams.py": {
        "functions": [
          "with_asyncio_loop",
          "runner",
          "test_add_callback",
          "test_add_callback_with_default_arg",
          "callback",
          "callback"
        ],
        "classes": [
          "TestCudaStream",
          "TestFailingStream"
        ],
        "num_lines": 122
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_array_slicing.py": {
        "functions": [
          "test_index_1d",
          "test_index_2d",
          "test_index_3d",
          "test_strided_index_1d",
          "test_strided_index_2d",
          "test_strided_index_3d",
          "test_prefix_1d",
          "test_prefix_2d",
          "test_select_3d_first_two_dim",
          "test_select_f",
          "test_select_c",
          "test_prefix_select",
          "test_negative_slicing_1d",
          "test_negative_slicing_2d",
          "test_empty_slice_1d",
          "test_empty_slice_2d",
          "test_scalar",
          "test_rank",
          "test_broadcast",
          "test_array_assign_column",
          "test_array_assign_row",
          "test_array_assign_subarray",
          "test_array_assign_deep_subarray",
          "test_array_assign_all",
          "test_strides",
          "test_incompatible_highdim",
          "test_incompatible_shape",
          "test_sync",
          "test_no_sync_default_stream",
          "test_no_sync_supplied_stream",
          "test_issue_6505"
        ],
        "classes": [
          "CudaArrayIndexing",
          "CudaArrayStridedSlice",
          "CudaArraySlicing",
          "CudaArraySetting"
        ],
        "num_lines": 376
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_ptds.py": {
        "functions": [
          "child_test",
          "child_test_wrapper",
          "f",
          "kernel_thread",
          "test_ptds"
        ],
        "classes": [
          "TestPTDS"
        ],
        "num_lines": 149
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_reset_device.py": {
        "functions": [
          "test_reset_device",
          "newthread"
        ],
        "classes": [
          "TestResetDevice"
        ],
        "num_lines": 36
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_linker.py": {
        "functions": [
          "simple_const_mem",
          "func_with_lots_of_registers",
          "simple_smem",
          "coop_smem2d",
          "simple_maxthreads",
          "simple_lmem",
          "test_linker_basic",
          "_test_linking",
          "test_linking_lazy_compile",
          "test_linking_eager_compile",
          "test_linking_cu",
          "test_linking_cu_log_warning",
          "test_linking_cu_error",
          "test_linking_unknown_filetype_error",
          "test_linking_file_with_no_extension_error",
          "test_linking_cu_cuda_include",
          "test_try_to_link_nonexistent",
          "test_set_registers_no_max",
          "test_set_registers_57",
          "test_set_registers_38",
          "test_set_registers_eager",
          "test_get_const_mem_size",
          "test_get_no_shared_memory",
          "test_get_shared_mem_per_block",
          "test_get_shared_mem_per_specialized",
          "test_get_max_threads_per_block",
          "test_max_threads_exceeded",
          "test_get_local_mem_per_thread",
          "test_get_local_mem_per_specialized",
          "foo",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "kernel",
          "f"
        ],
        "classes": [
          "TestLinker"
        ],
        "num_lines": 317
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_driver.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_cuda_driver_basic",
          "test_cuda_driver_stream_operations",
          "test_cuda_driver_default_stream",
          "test_cuda_driver_legacy_default_stream",
          "test_cuda_driver_per_thread_default_stream",
          "test_cuda_driver_stream",
          "test_cuda_driver_external_stream",
          "test_cuda_driver_occupancy",
          "test_device_get_uuid",
          "b2d"
        ],
        "classes": [
          "TestCudaDriver",
          "TestDevice"
        ],
        "num_lines": 235
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_context_stack.py": {
        "functions": [
          "setUp",
          "test_gpus_current",
          "test_gpus_len",
          "test_gpus_iter",
          "tearDown",
          "test_context_memory",
          "test_forbidden_context_switch",
          "test_accepted_context_switch",
          "tearDown",
          "test_attached_primary",
          "test_attached_non_primary",
          "test_cudajit_in_attached_primary_context",
          "switch_gpu",
          "switch_gpu",
          "do",
          "foo"
        ],
        "classes": [
          "TestContextStack",
          "TestContextAPI",
          "Test3rdPartyContext"
        ],
        "num_lines": 145
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_runtime.py": {
        "functions": [
          "set_visible_devices_and_check",
          "test_is_supported_version_true",
          "test_is_supported_version_false",
          "test_supported_versions",
          "test_visible_devices_set_after_import"
        ],
        "classes": [
          "TestRuntime",
          "TestVisibleDevices"
        ],
        "num_lines": 85
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_ndarray.py": {
        "functions": [
          "test_device_array_interface",
          "test_device_array_from_readonly",
          "test_devicearray_dtype",
          "test_devicearray_no_copy",
          "test_devicearray_shape",
          "test_devicearray",
          "test_stream_bind",
          "test_len_1d",
          "test_len_2d",
          "test_len_3d",
          "test_devicearray_partition",
          "test_devicearray_replace",
          "test_devicearray_transpose_wrongdim",
          "test_devicearray_transpose_identity",
          "test_devicearray_transpose_duplicatedaxis",
          "test_devicearray_transpose_wrongaxis",
          "test_devicearray_view_ok",
          "test_devicearray_view_ok_not_c_contig",
          "test_devicearray_view_bad_not_c_contig",
          "test_devicearray_view_bad_itemsize",
          "test_devicearray_transpose_ok",
          "test_devicearray_transpose_T",
          "test_devicearray_contiguous_slice",
          "_test_devicearray_contiguous_host_copy",
          "test_devicearray_contiguous_copy_host_3d",
          "test_devicearray_contiguous_copy_host_1d",
          "test_devicearray_contiguous_copy_device",
          "test_devicearray_broadcast_host_copy",
          "test_devicearray_contiguous_host_strided",
          "test_devicearray_contiguous_device_strided",
          "test_devicearray_relaxed_strides",
          "test_c_f_contiguity_matches_numpy",
          "test_devicearray_typing_order_simple_c",
          "test_devicearray_typing_order_simple_f",
          "test_devicearray_typing_order_2d_c",
          "test_devicearray_typing_order_2d_f",
          "test_devicearray_typing_order_noncontig_slice_c",
          "test_devicearray_typing_order_noncontig_slice_f",
          "test_devicearray_typing_order_contig_slice_c",
          "test_devicearray_typing_order_contig_slice_f",
          "test_devicearray_typing_order_broadcasted",
          "test_bug6697",
          "test_issue_8477",
          "test_recarray",
          "_test_against_array_core",
          "test_device_array_like_1d",
          "test_device_array_like_2d",
          "test_device_array_like_2d_transpose",
          "test_device_array_like_3d",
          "test_device_array_like_1d_f",
          "test_device_array_like_2d_f",
          "test_device_array_like_2d_f_transpose",
          "test_device_array_like_3d_f",
          "test_1d_view",
          "test_1d_view_f",
          "test_2d_view",
          "test_2d_view_f",
          "test"
        ],
        "classes": [
          "TestCudaNDArray",
          "TestRecarray",
          "TestCoreContiguous"
        ],
        "num_lines": 547
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_detect.py": {
        "functions": [
          "test_cuda_detect",
          "run_cmd",
          "run_test_in_separate_process",
          "test_cuda_find_lib_errors"
        ],
        "classes": [
          "TestCudaDetect",
          "TestCUDAFindLibs"
        ],
        "num_lines": 81
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/__init__.py": {
        "functions": [
          "load_tests"
        ],
        "classes": [],
        "num_lines": 8
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_managed_alloc.py": {
        "functions": [
          "get_total_gpu_memory",
          "skip_if_cc_major_lt",
          "test_managed_alloc_driver_undersubscribe",
          "test_managed_alloc_driver_oversubscribe",
          "test_managed_alloc_driver_host_attach",
          "_test_managed_alloc_driver",
          "_test_managed_array",
          "test_managed_array_attach_global",
          "test_managed_array_attach_host",
          "kernel"
        ],
        "classes": [
          "TestManagedAlloc"
        ],
        "num_lines": 127
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_inline_ptx.py": {
        "functions": [
          "test_inline_rsqrt"
        ],
        "classes": [
          "TestCudaInlineAsm"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_array_attr.py": {
        "functions": [
          "test_contigous_2d",
          "test_contigous_3d",
          "test_contigous_4d",
          "test_ravel_1d",
          "test_ravel_stride_1d",
          "test_ravel_c",
          "test_ravel_stride_c",
          "test_ravel_f",
          "test_ravel_stride_f",
          "test_reshape_c",
          "test_reshape_f"
        ],
        "classes": [
          "TestArrayAttr"
        ],
        "num_lines": 145
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_profiler.py": {
        "functions": [
          "test_profiling"
        ],
        "classes": [
          "TestProfiler"
        ],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_deallocations.py": {
        "functions": [
          "test_max_pending_count",
          "test_max_pending_bytes",
          "test_basic",
          "test_nested",
          "test_exception",
          "test_context_manager",
          "check_ignored_exception",
          "test_stream",
          "test_event",
          "test_pinned_memory",
          "test_mapped_memory",
          "test_device_memory",
          "test_managed_memory",
          "test_pinned_contextmanager",
          "test_mapped_contextmanager"
        ],
        "classes": [
          "TestDeallocation",
          "TestDeferCleanup",
          "TestDeferCleanupAvail",
          "TestDel",
          "CustomError",
          "PinnedException",
          "MappedException"
        ],
        "num_lines": 249
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_memory.py": {
        "functions": [
          "setUp",
          "tearDown",
          "_template",
          "test_device_memory",
          "test_device_view",
          "test_host_alloc",
          "test_pinned_memory",
          "test_managed_memory",
          "test_derived_pointer",
          "test_user_extension",
          "setUp",
          "tearDown",
          "test_memcpy",
          "test_memset",
          "test_d2d",
          "test_c_contiguous_array",
          "test_f_contiguous_array",
          "test_single_element_array",
          "test_ctypes_struct",
          "test_ctypes_double",
          "handle_val",
          "check",
          "dtor"
        ],
        "classes": [
          "TestCudaMemory",
          "TestCudaMemoryFunctions",
          "TestMVExtent",
          "mystruct"
        ],
        "num_lines": 193
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_devicerecord.py": {
        "functions": [
          "setUp",
          "_create_data",
          "_check_device_record",
          "test_device_record_interface",
          "test_device_record_copy",
          "test_from_record_like",
          "test_auto_device",
          "setUp",
          "_createSampleArrays",
          "setUp",
          "test_structured_array1",
          "test_structured_array2",
          "test_structured_array3",
          "test_structured_array4"
        ],
        "classes": [
          "TestCudaDeviceRecord",
          "TestCudaDeviceRecordWithRecord",
          "TestRecordDtypeWithStructArrays"
        ],
        "num_lines": 179
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_nvvm_driver.py": {
        "functions": [
          "get_nvvmir",
          "test_nvvm_compile_simple",
          "test_nvvm_compile_nullary_option",
          "test_nvvm_bad_option",
          "test_nvvm_from_llvm",
          "test_used_list",
          "test_nvvm_ir_verify_fail",
          "_test_nvvm_support",
          "test_nvvm_support",
          "test_nvvm_warning",
          "test_get_arch_option",
          "test_libdevice_load"
        ],
        "classes": [
          "TestNvvmDriver",
          "TestArchOption",
          "TestLibDevice"
        ],
        "num_lines": 199
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_mvc.py": {
        "functions": [
          "child_test",
          "child_test_wrapper",
          "f",
          "test_mvc"
        ],
        "classes": [
          "TestMinorVersionCompatibility"
        ],
        "num_lines": 54
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_host_alloc.py": {
        "functions": [
          "test_host_alloc_driver",
          "test_host_alloc_pinned",
          "test_host_alloc_mapped",
          "test_host_operators"
        ],
        "classes": [
          "TestHostAlloc"
        ],
        "num_lines": 65
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_pinned.py": {
        "functions": [
          "_run_copies",
          "test_pinned",
          "test_unpinned"
        ],
        "classes": [
          "TestPinned"
        ],
        "num_lines": 37
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_auto_context.py": {
        "functions": [
          "test_auto_context"
        ],
        "classes": [
          "TestCudaAutoContext"
        ],
        "num_lines": 21
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_select_device.py": {
        "functions": [
          "newthread",
          "test_select_device"
        ],
        "classes": [
          "TestSelectDevice"
        ],
        "num_lines": 41
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_events.py": {
        "functions": [
          "test_event_elapsed",
          "test_event_elapsed_stream"
        ],
        "classes": [
          "TestCudaEvent"
        ],
        "num_lines": 38
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_libraries.py": {
        "functions": [
          "test_detect"
        ],
        "classes": [
          "TestLibraryDetection"
        ],
        "num_lines": 22
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_emm_plugins.py": {
        "functions": [
          "setUp",
          "tearDown",
          "test_memalloc",
          "test_initialized_in_context",
          "test_reset",
          "test_get_memory_info",
          "test_get_ipc_handle",
          "test_bad_plugin_version",
          "__init__",
          "memalloc",
          "initialize",
          "reset",
          "get_memory_info",
          "get_ipc_handle",
          "interface_version",
          "interface_version",
          "finalizer"
        ],
        "classes": [
          "TestDeviceOnlyEMMPlugin",
          "TestBadEMMPluginVersion",
          "DeviceOnlyEMMPlugin",
          "BadVersionEMMPlugin"
        ],
        "num_lines": 192
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_is_fp16.py": {
        "functions": [
          "test_is_fp16_supported",
          "test_device_supports_float16"
        ],
        "classes": [
          "TestIsFP16Supported"
        ],
        "num_lines": 12
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_init.py": {
        "functions": [
          "cuInit_raising",
          "cuInit_raising_test",
          "initialization_error_test",
          "cuda_disabled_test",
          "cuda_disabled_error_test",
          "_test_init_failure",
          "test_init_failure_raising",
          "test_init_failure_error",
          "_test_cuda_disabled",
          "test_cuda_disabled_raising",
          "test_cuda_disabled_error",
          "test_init_success"
        ],
        "classes": [
          "TestInit"
        ],
        "num_lines": 139
      },
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/ffi/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/typeconv.py": {
        "functions": [
          "__init__",
          "select_overload",
          "check_compatible",
          "set_compatible",
          "set_promote",
          "set_unsafe_convert",
          "set_safe_convert",
          "get_pointer",
          "__init__",
          "promote",
          "unsafe",
          "safe",
          "promote_unsafe",
          "safe_unsafe",
          "unsafe_unsafe",
          "_cb_update"
        ],
        "classes": [
          "TypeManager",
          "TypeCastingRules"
        ],
        "num_lines": 128
      },
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 1
      },
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/rules.py": {
        "functions": [
          "dump_number_rules",
          "_init_casting_rules",
          "_init_casting_rules"
        ],
        "classes": [],
        "num_lines": 69
      },
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/castgraph.py": {
        "functions": [
          "__init__",
          "insert",
          "items",
          "get",
          "__len__",
          "__repr__",
          "__contains__",
          "__iter__",
          "__getitem__",
          "__init__",
          "get",
          "propagate",
          "insert_rule",
          "promote",
          "safe",
          "unsafe"
        ],
        "classes": [
          "Conversion",
          "CastSet",
          "TypeGraph"
        ],
        "num_lines": 133
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/ir_print.py": {
        "functions": [
          "match",
          "apply",
          "match",
          "apply"
        ],
        "classes": [
          "RewritePrintCalls",
          "DetectConstPrintArguments"
        ],
        "num_lines": 82
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/registry.py": {
        "functions": [
          "__init__",
          "match",
          "apply",
          "__init__",
          "register",
          "apply",
          "do_register"
        ],
        "classes": [
          "Rewrite",
          "RewriteRegistry"
        ],
        "num_lines": 98
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_raise.py": {
        "functions": [
          "_is_exception_type",
          "_break_constant",
          "_try_infer_constant",
          "match",
          "apply"
        ],
        "classes": [
          "RewriteConstRaises"
        ],
        "num_lines": 93
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 8
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_getitem.py": {
        "functions": [
          "match",
          "apply",
          "match",
          "apply",
          "match",
          "apply",
          "match",
          "apply"
        ],
        "classes": [
          "RewriteConstGetitems",
          "RewriteStringLiteralGetitems",
          "RewriteStringLiteralSetitems",
          "RewriteConstSetitems"
        ],
        "num_lines": 175
      },
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_binop.py": {
        "functions": [
          "match",
          "apply"
        ],
        "classes": [
          "DetectStaticBinops"
        ],
        "num_lines": 35
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/abstract.py": {
        "functions": [
          "_autoincr",
          "_on_type_disposal",
          "_type_reconstructor",
          "__init__",
          "_intern",
          "__call__",
          "__init__",
          "key",
          "mangling_args",
          "__repr__",
          "__str__",
          "__hash__",
          "__eq__",
          "__ne__",
          "__reduce__",
          "unify",
          "can_convert_to",
          "can_convert_from",
          "is_precise",
          "augment",
          "__call__",
          "__getitem__",
          "_determine_array_spec",
          "cast_python_value",
          "is_internal",
          "dump",
          "unify",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "dtype",
          "iterator_type",
          "__len__",
          "__init__",
          "yield_type",
          "iterator_type",
          "as_array",
          "ndim",
          "layout",
          "dtype",
          "__init__",
          "_literal_init",
          "literal_value",
          "literal_type",
          "__init__",
          "key",
          "__init__",
          "initial_value",
          "__init__",
          "__unliteral__",
          "unify",
          "validate_slice"
        ],
        "classes": [
          "_TypeMetaclass",
          "Type",
          "Dummy",
          "Hashable",
          "Number",
          "Callable",
          "DTypeSpec",
          "IterableType",
          "Sized",
          "ConstSized",
          "IteratorType",
          "Container",
          "Sequence",
          "MutableSequence",
          "ArrayCompatible",
          "Literal",
          "TypeRef",
          "InitialValue",
          "Poison"
        ],
        "num_lines": 516
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/functions.py": {
        "functions": [
          "_wrapper",
          "_bt_as_lines",
          "argsnkwargs_to_str",
          "_unlit_non_poison",
          "__init__",
          "__len__",
          "add_error",
          "format",
          "format_error",
          "get_loc",
          "raise_error",
          "__init__",
          "key",
          "augment",
          "get_impl_key",
          "get_call_type",
          "get_call_signatures",
          "__init__",
          "unify",
          "copy",
          "key",
          "get_impl_key",
          "get_call_type",
          "get_call_signatures",
          "__getnewargs__",
          "_store_object",
          "_get_object",
          "key",
          "__eq__",
          "__hash__",
          "__init__",
          "dump",
          "get_call_type",
          "get_call_signatures",
          "dispatcher",
          "get_overload",
          "get_impl_key",
          "unify",
          "can_convert_to",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "key",
          "__init__",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "key",
          "dtype",
          "__init__",
          "add_overloads",
          "get_overloads",
          "key",
          "template_info",
          "nested_msg",
          "add_bt",
          "generic"
        ],
        "classes": [
          "_ResolutionFailures",
          "BaseFunction",
          "Function",
          "BoundFunction",
          "MakeFunctionLiteral",
          "_PickleableWeakRef",
          "WeakType",
          "Dispatcher",
          "ObjModeDispatcher",
          "ExternalFunctionPointer",
          "ExternalFunction",
          "NamedTupleClass",
          "NumberClass",
          "RecursiveCall",
          "GilRequiringDefn"
        ],
        "num_lines": 746
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/misc.py": {
        "functions": [
          "unliteral",
          "literal",
          "maybe_literal",
          "is_precise",
          "is_precise",
          "can_convert_to",
          "can_convert_to",
          "__init__",
          "key",
          "value",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "can_convert_to",
          "can_convert_from",
          "unify",
          "unify",
          "__init__",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "get_data_type",
          "get_reference_type",
          "key",
          "classname",
          "jit_props",
          "jit_static_methods",
          "jit_methods",
          "struct",
          "methods",
          "static_methods",
          "__init__",
          "get_call_type",
          "get_call_signatures",
          "get_impl_key",
          "methods",
          "static_methods",
          "instance_type",
          "ctor_template",
          "_specialize_template",
          "__init__",
          "get",
          "define",
          "unify",
          "__init__",
          "__init__",
          "get_call_signatures",
          "get_call_type",
          "get_impl_key",
          "__init__",
          "iterator_type",
          "__init__"
        ],
        "classes": [
          "PyObject",
          "Phantom",
          "Undefined",
          "UndefVar",
          "RawPointer",
          "StringLiteral",
          "Omitted",
          "VarArg",
          "Module",
          "MemInfoPointer",
          "CPointer",
          "EphemeralPointer",
          "EphemeralArray",
          "Object",
          "Optional",
          "NoneType",
          "EllipsisType",
          "ExceptionClass",
          "ExceptionInstance",
          "SliceType",
          "SliceLiteral",
          "ClassInstanceType",
          "ClassType",
          "DeferredType",
          "ClassDataType",
          "ContextManager",
          "UnicodeType",
          "UnicodeIteratorType"
        ],
        "num_lines": 556
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/function_type.py": {
        "functions": [
          "__init__",
          "key",
          "name",
          "is_precise",
          "get_precise",
          "dump",
          "get_call_type",
          "check_signature",
          "unify",
          "__init__",
          "get_precise",
          "__init__",
          "key",
          "__wrapper_address__",
          "signature",
          "__init__",
          "dump",
          "__wrapper_address__",
          "signature",
          "__call__"
        ],
        "classes": [
          "FunctionType",
          "UndefinedFunctionType",
          "FunctionPrototype",
          "WrapperAddressProtocol",
          "CompileResultWAP"
        ],
        "num_lines": 211
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/containers.py": {
        "functions": [
          "is_homogeneous",
          "_sentry_forbidden_types",
          "__init__",
          "key",
          "unify",
          "__init__",
          "unify",
          "key",
          "__init__",
          "key",
          "from_types",
          "_make_homogeneous_tuple",
          "_make_heterogeneous_tuple",
          "can_convert_to",
          "__unliteral__",
          "iterator_type",
          "__getitem__",
          "__iter__",
          "__len__",
          "types",
          "__init__",
          "mangling_args",
          "key",
          "unify",
          "__unliteral__",
          "__repr__",
          "__getitem__",
          "__len__",
          "__iter__",
          "is_types_iterable",
          "__init__",
          "get_type_tag",
          "__new__",
          "__init__",
          "mangling_args",
          "key",
          "unify",
          "__repr__",
          "_make_homogeneous_tuple",
          "_make_heterogeneous_tuple",
          "__new__",
          "__init__",
          "iterator_type",
          "key",
          "__init__",
          "key",
          "__init__",
          "copy",
          "unify",
          "key",
          "iterator_type",
          "is_precise",
          "__getitem__",
          "__unliteral__",
          "__repr__",
          "__init__",
          "__getitem__",
          "__len__",
          "__iter__",
          "from_types",
          "is_types_iterable",
          "iterator_type",
          "__unliteral__",
          "unify",
          "__init__",
          "key",
          "iterator_type",
          "is_precise",
          "copy",
          "unify",
          "__repr__",
          "__init__",
          "key",
          "__init__",
          "key",
          "is_precise",
          "iterator_type",
          "refine",
          "unify",
          "__repr__",
          "__init__",
          "__init__",
          "__init__",
          "is_precise",
          "iterator_type",
          "refine",
          "unify",
          "key",
          "__unliteral__",
          "__repr__",
          "__init__",
          "__unliteral__",
          "unify",
          "__len__",
          "__iter__",
          "key",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "preprocess_fields",
          "field_dict",
          "get_data_type",
          "__init__",
          "field_dict",
          "__init__",
          "__len__",
          "__getitem__",
          "check_field_pair"
        ],
        "classes": [
          "Pair",
          "BaseContainerIterator",
          "BaseContainerPayload",
          "Bytes",
          "ByteArray",
          "PyArray",
          "MemoryView",
          "BaseTuple",
          "BaseAnonymousTuple",
          "_HomogeneousTuple",
          "UniTuple",
          "UniTupleIter",
          "_HeterogeneousTuple",
          "UnionType",
          "Tuple",
          "_StarArgTupleMixin",
          "StarArgTuple",
          "StarArgUniTuple",
          "BaseNamedTuple",
          "NamedUniTuple",
          "NamedTuple",
          "List",
          "LiteralList",
          "ListIter",
          "ListPayload",
          "Set",
          "SetIter",
          "SetPayload",
          "SetEntry",
          "ListType",
          "ListTypeIterableType",
          "ListTypeIteratorType",
          "DictType",
          "LiteralStrKeyDict",
          "DictItemsIterableType",
          "DictKeysIterableType",
          "DictValuesIterableType",
          "DictIteratorType",
          "StructRef",
          "StructRefPayload",
          "FakeNamedTuple"
        ],
        "num_lines": 977
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/npytypes.py": {
        "functions": [
          "__init__",
          "key",
          "can_convert_from",
          "__init__",
          "key",
          "can_convert_to",
          "can_convert_from",
          "__repr__",
          "make_c_struct",
          "__init__",
          "_normalize_fields",
          "key",
          "mangling_args",
          "__len__",
          "offset",
          "typeof",
          "alignof",
          "has_titles",
          "is_title",
          "members",
          "dtype",
          "can_convert_to",
          "__repr__",
          "__init__",
          "key",
          "dtype",
          "__getitem__",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "_compute_layout",
          "key",
          "views",
          "yield_type",
          "indexers",
          "need_shaped_indexing",
          "__init__",
          "key",
          "__init__",
          "mangling_args",
          "copy",
          "key",
          "unify",
          "can_convert_to",
          "is_precise",
          "box_type",
          "__repr__",
          "__init__",
          "key",
          "can_convert_to",
          "__init__",
          "key",
          "__init__",
          "shape",
          "nitems",
          "size",
          "strides",
          "key",
          "__repr__",
          "__init__",
          "__init__",
          "__init__"
        ],
        "classes": [
          "CharSeq",
          "UnicodeCharSeq",
          "Record",
          "DType",
          "NumpyFlatType",
          "NumpyNdEnumerateType",
          "NumpyNdIterType",
          "NumpyNdIndexType",
          "Array",
          "ArrayCTypes",
          "ArrayFlags",
          "NestedArray",
          "NumPyRandomBitGeneratorType",
          "NumPyRandomGeneratorType",
          "PolynomialType"
        ],
        "num_lines": 649
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 386
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/common.py": {
        "functions": [
          "__init__",
          "iterator_type",
          "__init__",
          "yield_type",
          "__init__",
          "iterator_type",
          "as_array",
          "copy",
          "key",
          "is_c_contig",
          "is_f_contig",
          "is_contig"
        ],
        "classes": [
          "Opaque",
          "SimpleIterableType",
          "SimpleIteratorType",
          "Buffer"
        ],
        "num_lines": 104
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/iterators.py": {
        "functions": [
          "__init__",
          "unify",
          "__init__",
          "unify",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__",
          "key",
          "__init__"
        ],
        "classes": [
          "RangeType",
          "RangeIteratorType",
          "Generator",
          "EnumerateType",
          "ZipType",
          "ArrayIterator"
        ],
        "num_lines": 108
      },
      "/tmp/cs-hpc-demo-1/numba/core/types/scalars.py": {
        "functions": [
          "parse_integer_bitwidth",
          "parse_integer_signed",
          "cast_python_value",
          "__init__",
          "from_bitwidth",
          "cast_python_value",
          "__lt__",
          "maxval",
          "minval",
          "__init__",
          "can_convert_to",
          "__init__",
          "can_convert_to",
          "__init__",
          "cast_python_value",
          "__lt__",
          "__init__",
          "cast_python_value",
          "__lt__",
          "__init__",
          "__lt__",
          "cast_python_value",
          "__init__",
          "key",
          "member_type",
          "member_type",
          "__init__",
          "key",
          "class_type",
          "can_convert_to"
        ],
        "classes": [
          "Boolean",
          "Integer",
          "IntegerLiteral",
          "BooleanLiteral",
          "Float",
          "Complex",
          "_NPDatetimeBase",
          "NPTimedelta",
          "NPDatetime",
          "EnumClass",
          "IntEnumClass",
          "EnumMember",
          "IntEnumMember"
        ],
        "num_lines": 271
      },
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrt.py": {
        "functions": [
          "typeof_meminfo",
          "__init__",
          "initialize",
          "_init_guard",
          "shutdown",
          "library",
          "meminfo_new",
          "meminfo_alloc",
          "get_allocation_stats"
        ],
        "classes": [
          "_Runtime"
        ],
        "num_lines": 131
      },
      "/tmp/cs-hpc-demo-1/numba/core/runtime/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 1
      },
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrtdynmod.py": {
        "functions": [
          "_define_nrt_meminfo_data",
          "_define_nrt_incref",
          "_define_nrt_decref",
          "_define_atomic_inc_dec",
          "_define_atomic_cas",
          "_define_nrt_unresolved_abort",
          "create_nrt_module",
          "compile_nrt_functions"
        ],
        "classes": [],
        "num_lines": 215
      },
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrtopt.py": {
        "functions": [
          "_remove_redundant_nrt_refct",
          "remove_redundant_nrt_refct",
          "_extract_functions",
          "_process_function",
          "_extract_basic_blocks",
          "_process_basic_block",
          "_examine_refct_op",
          "_prune_redundant_refct_ops",
          "_move_and_group_decref_after_all_increfs"
        ],
        "classes": [],
        "num_lines": 182
      },
      "/tmp/cs-hpc-demo-1/numba/core/runtime/context.py": {
        "functions": [
          "__init__",
          "_require_nrt",
          "_check_null_result",
          "allocate",
          "allocate_unchecked",
          "free",
          "meminfo_alloc",
          "meminfo_alloc_unchecked",
          "meminfo_alloc_dtor",
          "meminfo_alloc_dtor_unchecked",
          "meminfo_alloc_aligned",
          "meminfo_alloc_aligned_unchecked",
          "meminfo_new_varsize",
          "meminfo_new_varsize_unchecked",
          "meminfo_new_varsize_dtor",
          "meminfo_new_varsize_dtor_unchecked",
          "meminfo_varsize_alloc",
          "meminfo_varsize_alloc_unchecked",
          "meminfo_varsize_realloc",
          "meminfo_varsize_realloc_unchecked",
          "meminfo_varsize_free",
          "_call_varsize_alloc",
          "meminfo_data",
          "get_meminfos",
          "_call_incref_decref",
          "incref",
          "decref",
          "get_nrt_api",
          "eh_check",
          "eh_try",
          "eh_end_try",
          "wrap"
        ],
        "classes": [
          "NRTContext"
        ],
        "num_lines": 426
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/cmathdecl.py": {
        "functions": [],
        "classes": [
          "CMath_unary",
          "CMath_predicate",
          "CMath_isfinite",
          "Cmath_log"
        ],
        "num_lines": 44
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/bufproto.py": {
        "functions": [
          "decode_pep3118_format",
          "get_type_class",
          "infer_layout"
        ],
        "classes": [],
        "num_lines": 79
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/mathdecl.py": {
        "functions": [],
        "classes": [
          "Math_unary",
          "Math_atan2",
          "Math_converter",
          "Math_floor_ceil",
          "Math_copysign",
          "Math_hypot",
          "Math_nextafter",
          "Math_predicate",
          "Math_isfinite",
          "Math_pow",
          "Math_gcd",
          "Math_frexp",
          "Math_ldexp"
        ],
        "num_lines": 150
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/dictdecl.py": {
        "functions": [
          "generic"
        ],
        "classes": [
          "DictBuiltin"
        ],
        "num_lines": 55
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/listdecl.py": {
        "functions": [
          "generic",
          "resolve_append",
          "resolve_clear",
          "resolve_extend",
          "resolve_insert",
          "resolve_pop",
          "generic",
          "generic",
          "generic",
          "generic"
        ],
        "classes": [
          "ListBuiltin",
          "ListAttribute",
          "AddList",
          "InplaceAddList",
          "MulList",
          "InplaceMulList",
          "ListCompare",
          "ListEq"
        ],
        "num_lines": 140
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/builtins.py": {
        "functions": [
          "choose_result_bitwidth",
          "choose_result_int",
          "normalize_1d_index",
          "typeof_index",
          "type_index_value",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "resolve_contiguous",
          "resolve_c_contiguous",
          "resolve_f_contiguous",
          "resolve_itemsize",
          "resolve_nbytes",
          "resolve_readonly",
          "resolve_shape",
          "resolve_strides",
          "resolve_ndim",
          "resolve___class__",
          "resolve_item",
          "resolve___class__",
          "resolve_real",
          "resolve_imag",
          "resolve_conjugate",
          "resolve_item",
          "resolve___class__",
          "resolve___class__",
          "resolve_start",
          "resolve_stop",
          "resolve_step",
          "resolve_indices",
          "resolve___call__",
          "resolve___call__",
          "_unify_minmax",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic_resolve",
          "generic_resolve",
          "__init__",
          "__repr__",
          "__init__",
          "typer",
          "__init__",
          "typer",
          "__init__",
          "__call__"
        ],
        "classes": [
          "Print",
          "PrintItem",
          "Abs",
          "Slice",
          "Range",
          "GetIter",
          "IterNext",
          "PairFirst",
          "PairSecond",
          "BinOp",
          "BinOpAdd",
          "BinOpAdd",
          "BinOpSub",
          "BinOpSub",
          "BinOpMul",
          "BinOpMul",
          "BinOpMod",
          "BinOpMod",
          "BinOpTrueDiv",
          "BinOpTrueDiv",
          "BinOpFloorDiv",
          "BinOpFloorDiv",
          "DivMod",
          "BinOpPower",
          "BinOpPower",
          "PowerBuiltin",
          "BitwiseShiftOperation",
          "BitwiseLeftShift",
          "BitwiseLeftShift",
          "BitwiseRightShift",
          "BitwiseRightShift",
          "BitwiseLogicOperation",
          "BitwiseAnd",
          "BitwiseAnd",
          "BitwiseOr",
          "BitwiseOr",
          "BitwiseXor",
          "BitwiseXor",
          "BitwiseInvert",
          "UnaryOp",
          "UnaryNegate",
          "UnaryPositive",
          "UnaryNot",
          "OrderedCmpOp",
          "UnorderedCmpOp",
          "CmpOpLt",
          "CmpOpLe",
          "CmpOpGt",
          "CmpOpGe",
          "ConstOpEq",
          "ConstOpNotEq",
          "CmpOpEq",
          "CmpOpNe",
          "TupleCompare",
          "TupleEq",
          "TupleNe",
          "TupleGe",
          "TupleGt",
          "TupleLe",
          "TupleLt",
          "TupleAdd",
          "CmpOpIdentity",
          "CmpOpIs",
          "CmpOpIsNot",
          "GetItemCPointer",
          "SetItemCPointer",
          "Len",
          "TupleConstructor",
          "Contains",
          "TupleBool",
          "StaticGetItemTuple",
          "StaticGetItemLiteralList",
          "StaticGetItemLiteralStrKeyDict",
          "StaticGetItemClass",
          "GenericNotIn",
          "MemoryViewAttribute",
          "BooleanAttribute",
          "NumberAttribute",
          "NPTimedeltaAttribute",
          "NPDatetimeAttribute",
          "SliceAttribute",
          "NumberClassAttribute",
          "TypeRefAttribute",
          "MinMaxBase",
          "Max",
          "Min",
          "Round",
          "Bool",
          "Int",
          "Float",
          "Complex",
          "Enumerate",
          "Zip",
          "Iter",
          "Next",
          "TypeBuiltin",
          "OptionalAttribute",
          "DeferredAttribute",
          "IndexValue",
          "IndexValueType",
          "IndexValueModel",
          "Redirect"
        ],
        "num_lines": 1177
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/asnumbatype.py": {
        "functions": [
          "__init__",
          "_numba_type_infer",
          "_builtin_infer",
          "register",
          "try_infer",
          "infer",
          "__call__"
        ],
        "classes": [
          "AsNumbaTypeRegistry"
        ],
        "num_lines": 162
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 3
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/setdecl.py": {
        "functions": [
          "generic",
          "resolve_add",
          "resolve_update",
          "_resolve_operator",
          "_resolve_comparator",
          "generic",
          "generic"
        ],
        "classes": [
          "SetBuiltin",
          "SetAttribute",
          "SetOperator",
          "SetComparison",
          "ConcreteSetOperator",
          "ConcreteInplaceSetOperator"
        ],
        "num_lines": 107
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/npydecl.py": {
        "functions": [
          "register_numpy_ufunc",
          "_numpy_redirect",
          "parse_shape",
          "parse_dtype",
          "_parse_nested_sequence",
          "_infer_dtype_from_inputs",
          "_homogeneous_dims",
          "_sequence_of_arrays",
          "_choose_concatenation_layout",
          "_check_linalg_matrix",
          "_handle_inputs",
          "ufunc",
          "generic",
          "ufunc",
          "install_operations",
          "generic",
          "generic",
          "generic",
          "generic",
          "register_number_classes",
          "register_number_classes",
          "matmul_typer",
          "generic",
          "generic",
          "generic",
          "generic",
          "sum_stub",
          "argsort_stub",
          "sum_stub",
          "sum_stub"
        ],
        "classes": [
          "Numpy_rules_ufunc",
          "NumpyRulesArrayOperator",
          "NumpyRulesInplaceArrayOperator",
          "NumpyRulesUnaryArrayOperator",
          "Numpy_method_redirection",
          "MatMulTyperMixin",
          "NdEnumerate",
          "NdIter",
          "NdIndex",
          "DtypeEq",
          "typing_class"
        ],
        "num_lines": 690
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/templates.py": {
        "functions": [
          "make_concrete_template",
          "make_callable_template",
          "signature",
          "fold_arguments",
          "make_overload_template",
          "make_intrinsic_template",
          "make_overload_attribute_template",
          "make_overload_method_template",
          "bound_function",
          "__init__",
          "return_type",
          "args",
          "recvr",
          "pysig",
          "replace",
          "__getstate__",
          "__setstate__",
          "__hash__",
          "__eq__",
          "__ne__",
          "__repr__",
          "is_method",
          "as_method",
          "as_function",
          "as_type",
          "__unliteral__",
          "dump",
          "is_precise",
          "generic",
          "__init__",
          "_select",
          "get_impl_key",
          "get_source_code_info",
          "get_template_info",
          "__str__",
          "apply",
          "get_template_info",
          "apply",
          "get_template_info",
          "apply",
          "get_template_info",
          "__init__",
          "_validate_sigs",
          "generic",
          "_get_impl",
          "_get_jit_decorator",
          "_build_impl",
          "get_impl_key",
          "get_source_info",
          "get_template_info",
          "_get_target_registry",
          "generic",
          "get_impl_key",
          "get_template_info",
          "__init__",
          "resolve",
          "_resolve",
          "__init__",
          "_init_once",
          "_resolve",
          "_get_signature",
          "_get_function_type",
          "_init_once",
          "_resolve",
          "wrapper",
          "__init__",
          "register",
          "register_attr",
          "register_global",
          "__init__",
          "new_registrations",
          "get_args_kwargs",
          "gen_diff",
          "getattr_impl",
          "method_impl",
          "attribute_resolver",
          "unpack_opt",
          "generic",
          "get_template_info",
          "decorate",
          "decorator",
          "unpack_opt",
          "generic"
        ],
        "classes": [
          "Signature",
          "FunctionTemplate",
          "AbstractTemplate",
          "CallableTemplate",
          "ConcreteTemplate",
          "_EmptyImplementationEntry",
          "_OverloadFunctionTemplate",
          "_TemplateTargetHelperMixin",
          "_IntrinsicTemplate",
          "AttributeTemplate",
          "_OverloadAttributeTemplate",
          "_OverloadMethodTemplate",
          "Registry",
          "BaseRegistryLoader",
          "RegistryLoader",
          "MethodTemplate",
          "MethodTemplate",
          "Template"
        ],
        "num_lines": 1337
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/arraydecl.py": {
        "functions": [
          "get_array_index_type",
          "normalize_shape",
          "_expand_integer",
          "generic_homog",
          "generic_expand",
          "sum_expand",
          "generic_expand_cumulative",
          "generic_hetero_real",
          "generic_hetero_always_real",
          "generic_index",
          "install_array_method",
          "generic",
          "generic",
          "resolve_dtype",
          "resolve_nbytes",
          "resolve_itemsize",
          "resolve_shape",
          "resolve_strides",
          "resolve_ndim",
          "resolve_size",
          "resolve_flat",
          "resolve_ctypes",
          "resolve_flags",
          "resolve_T",
          "resolve_real",
          "resolve_imag",
          "_resolve_real_imag",
          "resolve_transpose",
          "resolve_copy",
          "resolve_item",
          "resolve_nonzero",
          "resolve_reshape",
          "resolve_sort",
          "resolve_argsort",
          "resolve_view",
          "resolve_astype",
          "resolve_ravel",
          "resolve_flatten",
          "generic_resolve",
          "resolve_type",
          "resolve_kind",
          "generic",
          "generic_resolve",
          "generic",
          "generic",
          "generic",
          "generic",
          "resolve_data",
          "resolve_contiguous",
          "resolve_c_contiguous",
          "resolve_f_contiguous",
          "array_attribute_attachment",
          "generic",
          "sentry_shape_scalar",
          "resolve_itemset",
          "sentry_shape_scalar",
          "sum_stub",
          "keeps_contiguity",
          "check_contiguity",
          "argsort_stub",
          "sum_stub",
          "sum_stub"
        ],
        "classes": [
          "GetItemBuffer",
          "SetItemBuffer",
          "ArrayAttribute",
          "DTypeAttr",
          "StaticGetItemArray",
          "RecordAttribute",
          "StaticGetItemRecord",
          "StaticGetItemLiteralRecord",
          "StaticSetItemRecord",
          "StaticSetItemLiteralRecord",
          "ArrayCTypesAttribute",
          "ArrayFlagsAttribute",
          "NestedArrayAttribute",
          "CmpOpEqArray"
        ],
        "num_lines": 880
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/context.py": {
        "functions": [
          "__init__",
          "astuple",
          "__add__",
          "__init__",
          "__getitem__",
          "__len__",
          "register",
          "finditer",
          "findfirst",
          "match",
          "lookup_resolve_cache",
          "__init__",
          "mark_error",
          "mark_failed",
          "replay_failure",
          "has_failed_previously",
          "__init__",
          "__repr__",
          "add_return_type",
          "__init__",
          "init",
          "refresh",
          "explain_function_type",
          "resolve_function_type",
          "_resolve_builtin_function_type",
          "_resolve_user_function_type",
          "_get_attribute_templates",
          "resolve_getattr",
          "find_matching_getattr_template",
          "resolve_setattr",
          "resolve_static_getitem",
          "resolve_static_setitem",
          "resolve_setitem",
          "resolve_delitem",
          "resolve_module_constants",
          "resolve_value_type",
          "resolve_value_type_prefer_literal",
          "_get_global_type",
          "_load_builtins",
          "load_additional_registries",
          "install_registry",
          "_lookup_global",
          "_insert_global",
          "_remove_global",
          "insert_global",
          "insert_attributes",
          "insert_function",
          "insert_user_function",
          "can_convert",
          "_rate_arguments",
          "install_possible_conversions",
          "resolve_overload",
          "unify_types",
          "unify_pairs",
          "load_additional_registries",
          "normalize_dict",
          "hashable",
          "core",
          "is_for_this_target",
          "on_disposal",
          "keyfunc",
          "clear_fail_cache",
          "undo_stack"
        ],
        "classes": [
          "Rating",
          "CallStack",
          "_ResolveCache",
          "CallFrame",
          "BaseContext",
          "Context"
        ],
        "num_lines": 829
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/collections.py": {
        "functions": [
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "resolve___class__",
          "generic_resolve",
          "resolve___call__",
          "typer"
        ],
        "classes": [
          "InContainer",
          "ContainerLen",
          "SequenceBool",
          "GetItemSequence",
          "SetItemSequence",
          "DelItemSequence",
          "NamedTupleAttribute",
          "NamedTupleClassAttribute"
        ],
        "num_lines": 121
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/ctypes_utils.py": {
        "functions": [
          "from_ctypes",
          "to_ctypes",
          "is_ctypes_funcptr",
          "get_pointer",
          "make_function_type",
          "_convert_internal",
          "_convert_internal"
        ],
        "classes": [],
        "num_lines": 149
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/enumdecl.py": {
        "functions": [
          "resolve_value",
          "generic_resolve",
          "generic",
          "generic"
        ],
        "classes": [
          "EnumAttribute",
          "EnumClassAttribute",
          "EnumClassStaticGetItem",
          "EnumCompare",
          "EnumEq",
          "EnumNe"
        ],
        "num_lines": 64
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/cffi_utils.py": {
        "functions": [
          "is_ffi_instance",
          "is_cffi_func",
          "get_pointer",
          "_type_map",
          "map_type",
          "map_struct_to_record_dtype",
          "make_function_type",
          "register_module",
          "register_type",
          "generic",
          "resolve_from_buffer"
        ],
        "classes": [
          "FFI_from_buffer",
          "FFIAttribute"
        ],
        "num_lines": 229
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/typeof.py": {
        "functions": [
          "typeof",
          "typeof_impl",
          "_typeof_buffer",
          "_typeof_ctypes_function",
          "_typeof_type",
          "_typeof_numpy_scalar",
          "_typeof_str",
          "_typeof_code",
          "_typeof_none",
          "_typeof_ellipsis",
          "_typeof_tuple",
          "_typeof_list",
          "_typeof_set",
          "_typeof_slice",
          "_typeof_enum",
          "_typeof_enum_class",
          "_typeof_dtype",
          "_typeof_ndarray",
          "_typeof_number_class",
          "_typeof_literal",
          "_typeof_typeref",
          "_typeof_nb_type",
          "typeof_numpy_random_bitgen",
          "typeof_random_generator",
          "typeof_numpy_polynomial",
          "_typeof_bool",
          "_typeof_float",
          "_typeof_complex",
          "_typeof_int",
          "_typeof_bool",
          "_typeof_float",
          "_typeof_complex",
          "_typeof_int"
        ],
        "classes": [
          "Purpose"
        ],
        "num_lines": 312
      },
      "/tmp/cs-hpc-demo-1/numba/core/typing/npdatetime.py": {
        "functions": [
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic",
          "generic"
        ],
        "classes": [
          "TimedeltaUnaryOp",
          "TimedeltaBinOp",
          "TimedeltaCmpOp",
          "TimedeltaOrderedCmpOp",
          "TimedeltaMixOp",
          "TimedeltaDivOp",
          "TimedeltaUnaryPos",
          "TimedeltaUnaryNeg",
          "TimedeltaBinAdd",
          "TimedeltaBinSub",
          "TimedeltaBinMult",
          "TimedeltaTrueDiv",
          "TimedeltaFloorDiv",
          "TimedeltaCmpLt",
          "TimedeltaCmpLE",
          "TimedeltaCmpGt",
          "TimedeltaCmpGE",
          "TimedeltaAbs",
          "DatetimePlusTimedelta",
          "DatetimeMinusTimedelta",
          "DatetimeMinusDatetime",
          "DatetimeCmpOp",
          "DatetimeCmpEq",
          "DatetimeCmpNe",
          "DatetimeCmpLt",
          "DatetimeCmpLE",
          "DatetimeCmpGt",
          "DatetimeCmpGE",
          "DatetimeMinMax",
          "TimedeltaCmpEq",
          "TimedeltaCmpNe",
          "TimedeltaCmpEq",
          "TimedeltaCmpNe"
        ],
        "num_lines": 294
      },
      "/tmp/cs-hpc-demo-1/numba/core/annotations/type_annotations.py": {
        "functions": [
          "_getindent",
          "__init__",
          "__getitem__",
          "__iter__",
          "__len__",
          "avail",
          "__init__",
          "prepare_annotations",
          "annotate",
          "html_annotate",
          "annotate_raw",
          "__str__",
          "add_ir_line"
        ],
        "classes": [
          "SourceLines",
          "TypeAnnotation"
        ],
        "num_lines": 283
      },
      "/tmp/cs-hpc-demo-1/numba/core/annotations/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/core/annotations/pretty_annotate.py": {
        "functions": [
          "hllines",
          "htlines",
          "get_ansi_template",
          "get_html_template",
          "reform_code",
          "__init__",
          "_repr_html_",
          "__repr__"
        ],
        "classes": [
          "Annotate"
        ],
        "num_lines": 283
      },
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/refcount.py": {
        "functions": [
          "dump_refcount",
          "get_refcount",
          "codegen",
          "codegen"
        ],
        "classes": [],
        "num_lines": 80
      },
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/eh.py": {
        "functions": [
          "exception_check",
          "mark_try_block",
          "end_try_block",
          "exception_match",
          "codegen",
          "codegen",
          "codegen",
          "codegen"
        ],
        "classes": [],
        "num_lines": 62
      },
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/nrt.py": {
        "functions": [
          "NRT_get_api",
          "codegen"
        ],
        "classes": [],
        "num_lines": 20
      },
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/bytes.py": {
        "functions": [
          "grab_byte",
          "grab_uint64_t",
          "memcpy_region",
          "impl",
          "impl",
          "codegen"
        ],
        "classes": [],
        "num_lines": 49
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/models.py": {
        "functions": [
          "handle_numpy_flat_type",
          "handle_numpy_ndenumerate_type",
          "handle_bound_function",
          "__init__",
          "fe_type",
          "get_value_type",
          "get_data_type",
          "get_argument_type",
          "get_return_type",
          "as_data",
          "as_argument",
          "as_return",
          "from_data",
          "from_argument",
          "from_return",
          "load_from_data_pointer",
          "traverse",
          "traverse_models",
          "traverse_types",
          "inner_models",
          "get_nrt_meminfo",
          "has_nrt_meminfo",
          "contains_nrt_meminfo",
          "_compared_fields",
          "__hash__",
          "__eq__",
          "__ne__",
          "get_value_type",
          "get_argument_type",
          "as_argument",
          "from_argument",
          "get_value_type",
          "get_data_type",
          "get_return_type",
          "get_argument_type",
          "as_data",
          "as_argument",
          "as_return",
          "from_data",
          "from_argument",
          "from_return",
          "__init__",
          "get_value_type",
          "as_data",
          "as_argument",
          "as_return",
          "from_data",
          "from_argument",
          "from_return",
          "get_value_type",
          "get_data_type",
          "get_return_type",
          "get_argument_type",
          "as_data",
          "as_argument",
          "as_return",
          "from_data",
          "from_argument",
          "from_return",
          "__init__",
          "__init__",
          "inner_models",
          "has_nrt_meminfo",
          "get_nrt_meminfo",
          "__init__",
          "__init__",
          "__init__",
          "get_data_type",
          "as_data",
          "from_data",
          "load_from_data_pointer",
          "__init__",
          "get_data_type",
          "as_data",
          "from_data",
          "load_from_data_pointer",
          "__init__",
          "__init__",
          "get_value_type",
          "get_data_type",
          "get_return_type",
          "get_argument_type",
          "as_argument",
          "from_argument",
          "as_data",
          "from_data",
          "as_return",
          "from_return",
          "traverse",
          "inner_models",
          "__init__",
          "get_member_fe_type",
          "get_value_type",
          "get_data_type",
          "get_argument_type",
          "get_return_type",
          "_as",
          "_from",
          "as_data",
          "from_data",
          "load_from_data_pointer",
          "as_argument",
          "from_argument",
          "as_return",
          "from_return",
          "get",
          "set",
          "get_field_position",
          "field_count",
          "get_type",
          "get_model",
          "traverse",
          "inner_models",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "as_storage_type",
          "__init__",
          "get_return_type",
          "as_return",
          "from_return",
          "traverse",
          "__init__",
          "get_value_type",
          "get_argument_type",
          "get_return_type",
          "get_data_type",
          "as_data",
          "from_data",
          "as_argument",
          "from_argument",
          "as_return",
          "from_return",
          "load_from_data_pointer",
          "__init__",
          "get_value_type",
          "get_data_type",
          "as_data",
          "from_data",
          "as_return",
          "from_return",
          "as_argument",
          "from_argument",
          "__init__",
          "get_value_type",
          "get_data_type",
          "as_data",
          "from_data",
          "as_return",
          "from_return",
          "as_argument",
          "from_argument",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "get_value_type",
          "get_argument_type",
          "get_return_type",
          "get_data_type",
          "as_argument",
          "from_argument",
          "as_return",
          "from_return",
          "as_data",
          "from_data",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "get_value_type",
          "get_data_type",
          "get_argument_type",
          "as_argument",
          "from_argument",
          "from_data",
          "as_data",
          "from_return",
          "as_return",
          "get",
          "set",
          "make_uninitialized",
          "_define",
          "_define_value_type",
          "_define_data_type",
          "_actual_model",
          "traverse",
          "__init__",
          "__init__",
          "getter",
          "getter",
          "get_data",
          "get_valid"
        ],
        "classes": [
          "DataModel",
          "OmittedArgDataModel",
          "BooleanModel",
          "PrimitiveModel",
          "ProxyModel",
          "EnumModel",
          "OpaqueModel",
          "MemInfoModel",
          "IntegerModel",
          "FloatModel",
          "PointerModel",
          "EphemeralPointerModel",
          "EphemeralArrayModel",
          "ExternalFuncPointerModel",
          "UniTupleModel",
          "CompositeModel",
          "StructModel",
          "ComplexModel",
          "TupleModel",
          "UnionModel",
          "PairModel",
          "ListPayloadModel",
          "ListModel",
          "ListIterModel",
          "SetEntryModel",
          "SetPayloadModel",
          "SetModel",
          "SetIterModel",
          "ArrayModel",
          "ArrayFlagsModel",
          "NestedArrayModel",
          "OptionalModel",
          "RecordModel",
          "UnicodeCharSeq",
          "CharSeq",
          "CContiguousFlatIter",
          "FlatIter",
          "UniTupleIter",
          "SliceModel",
          "NPDatetimeModel",
          "ArrayIterator",
          "EnumerateType",
          "ZipType",
          "RangeIteratorType",
          "GeneratorModel",
          "ArrayCTypesModel",
          "RangeModel",
          "NdIndexModel",
          "NdIter",
          "DeferredStructModel",
          "StructPayloadModel",
          "StructRefModel"
        ],
        "num_lines": 1385
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/registry.py": {
        "functions": [
          "register",
          "wraps"
        ],
        "classes": [],
        "num_lines": 18
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 4
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/packer.py": {
        "functions": [
          "_flatten",
          "__init__",
          "as_data",
          "_do_load",
          "load",
          "load_into",
          "__init__",
          "as_arguments",
          "from_arguments",
          "assign_names",
          "_assign_names",
          "argument_types",
          "rec",
          "__init__",
          "_build_unflatten_code",
          "unflatten",
          "rec"
        ],
        "classes": [
          "DataPacker",
          "ArgPacker",
          "_Unflattener"
        ],
        "num_lines": 213
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/testing.py": {
        "functions": [
          "test_factory",
          "setUp",
          "test_as_arg",
          "test_as_return",
          "test_as_data",
          "test_as_data_not_supported",
          "recur_tuplize"
        ],
        "classes": [
          "DataModelTester",
          "SupportAsDataMixin",
          "NotSupportAsDataMixin",
          "DataModelTester_SupportAsDataMixin",
          "DataModelTester_NotSupportAsDataMixin"
        ],
        "num_lines": 150
      },
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/manager.py": {
        "functions": [
          "__init__",
          "register",
          "lookup",
          "__getitem__",
          "copy",
          "chain"
        ],
        "classes": [
          "DataModelManager"
        ],
        "num_lines": 68
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 3
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/boxing.py": {
        "functions": [
          "_generate_property",
          "_generate_method",
          "_specialize_box",
          "_box_class_instance",
          "_unbox_class_instance",
          "_typeof_jitclass_box",
          "wrapper",
          "set_member",
          "access_member"
        ],
        "classes": [],
        "num_lines": 275
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/overloads.py": {
        "functions": [
          "_get_args",
          "class_instance_overload",
          "extract_template",
          "register_simple_overload",
          "try_call_method",
          "try_call_complex_method",
          "take_first",
          "class_bool",
          "class_complex",
          "class_contains",
          "class_float",
          "class_int",
          "class_str",
          "class_ne",
          "register_reflected_overload",
          "decorator",
          "overload_func",
          "class_lt",
          "wrapped",
          "using_len_impl",
          "reflected_impl"
        ],
        "classes": [],
        "num_lines": 239
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/base.py": {
        "functions": [
          "_mangle_attr",
          "_getargs",
          "_validate_spec",
          "_fix_up_private_attr",
          "_add_linking_libs",
          "register_class_type",
          "_drop_ignored_attrs",
          "get_attr_impl",
          "set_attr_impl",
          "imp_dtor",
          "ctor_impl",
          "__init__",
          "__init__",
          "__new__",
          "_set_init",
          "__instancecheck__",
          "__call__",
          "generic",
          "__init__",
          "register",
          "_register_methods",
          "_implement_method",
          "generic_resolve",
          "get_imp",
          "_getsetitem_gen",
          "imp",
          "generic",
          "generic",
          "generic"
        ],
        "classes": [
          "InstanceModel",
          "InstanceDataModel",
          "JitClassType",
          "ConstructorTemplate",
          "ClassBuilder",
          "ClassAttribute",
          "GetSetItem",
          "MethodTemplate",
          "StaticMethodTemplate"
        ],
        "num_lines": 598
      },
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/decorators.py": {
        "functions": [
          "jitclass",
          "wrap"
        ],
        "classes": [],
        "num_lines": 88
      },
      "/tmp/cs-hpc-demo-1/numba/misc/help/inspector.py": {
        "functions": [
          "_get_commit",
          "inspect_function",
          "inspect_module",
          "filter_private_module",
          "filter_tests_module",
          "list_modules_in_package",
          "_format_module_infos",
          "write_listings",
          "main",
          "__init__",
          "total",
          "ratio",
          "describe",
          "__repr__",
          "check_filter",
          "__init__",
          "print",
          "escape",
          "title",
          "begin_module_section",
          "end_module_section",
          "write_supported_item",
          "write_unsupported_item",
          "write_statistic",
          "escape",
          "title",
          "begin_module_section",
          "end_module_section",
          "write_supported_item",
          "write_unsupported_item",
          "write_statistic"
        ],
        "classes": [
          "_Stat",
          "Formatter",
          "HTMLFormatter",
          "ReSTFormatter"
        ],
        "num_lines": 433
      },
      "/tmp/cs-hpc-demo-1/numba/misc/help/__init__.py": {
        "functions": [],
        "classes": [],
        "num_lines": 0
      },
      "/tmp/cs-hpc-demo-1/buildscripts/github/patch_wheel_dylib.py": {
        "functions": [
          "run_shell",
          "main"
        ],
        "classes": [],
        "num_lines": 49
      },
      "/tmp/cs-hpc-demo-1/docs/source/conf.py": {
        "functions": [
          "_autogenerate",
          "setup",
          "run"
        ],
        "classes": [
          "CudaDeprecated"
        ],
        "num_lines": 370
      },
      "/tmp/cs-hpc-demo-1/docs/dagmap/render.py": {
        "functions": [
          "parse_yaml",
          "to_graphviz",
          "main"
        ],
        "classes": [],
        "num_lines": 85
      },
      "/tmp/cs-hpc-demo-1/docs/source/developer/compiler_pass_example.py": {
        "functions": [
          "ex_compiler_pass",
          "foo",
          "__init__",
          "run_pass",
          "define_pipelines"
        ],
        "classes": [
          "ConstsAddOne",
          "MyCompiler"
        ],
        "num_lines": 78
      },
      "/tmp/cs-hpc-demo-1/docs/source/developer/inline_example.py": {
        "functions": [
          "never_inline",
          "always_inline",
          "sentinel_cost_model",
          "maybe_inline1",
          "maybe_inline2",
          "foo"
        ],
        "classes": [],
        "num_lines": 82
      },
      "/tmp/cs-hpc-demo-1/docs/source/developer/inline_overload_example.py": {
        "functions": [
          "bar",
          "ol_bar_tuple",
          "cost_model",
          "ol_bar_scalar",
          "foo",
          "impl",
          "impl"
        ],
        "classes": [],
        "num_lines": 61
      },
      "/tmp/cs-hpc-demo-1/docs/source/_ext/ghfiles.py": {
        "functions": [
          "make_ref",
          "intersperse",
          "ghfile_role",
          "setup"
        ],
        "classes": [],
        "num_lines": 79
      },
      "/tmp/cs-hpc-demo-1/docs/source/extending/mynorm.py": {
        "functions": [
          "_oneD_norm_2",
          "jit_norm",
          "use",
          "_oneD_norm_x",
          "_two_D_norm_2"
        ],
        "classes": [],
        "num_lines": 72
      },
      "/tmp/cs-hpc-demo-1/docs/source/extending/template.py": {
        "error": "invalid syntax (<unknown>, line 6)"
      },
      "/tmp/cs-hpc-demo-1/docs/source/proposals/np-where-override.py": {
        "functions": [
          "where",
          "where_impl",
          "where_impl",
          "where_impl"
        ],
        "classes": [],
        "num_lines": 51
      }
    },
    "graph": {
      "/tmp/cs-hpc-demo-1/setup.py": [
        "os",
        "platform",
        "subprocess",
        "sys",
        "sysconfig",
        "setuptools",
        "setuptools.command.build_ext",
        "versioneer",
        "packaging",
        "numpy",
        "setuptools._vendor.packaging"
      ],
      "os": [],
      "platform": [],
      "subprocess": [],
      "sys": [],
      "sysconfig": [],
      "setuptools": [],
      "setuptools.command.build_ext": [],
      "versioneer": [],
      "packaging": [],
      "numpy": [],
      "setuptools._vendor.packaging": [],
      "/tmp/cs-hpc-demo-1/versioneer.py": [
        "configparser",
        "errno",
        "json",
        "os",
        "re",
        "subprocess",
        "sys",
        "pathlib",
        "typing",
        "functools",
        "tomllib",
        "setuptools",
        "tomli",
        "setuptools.command.build_py",
        "setuptools.command.build_ext",
        "cx_Freeze.dist",
        "setuptools.command.egg_info",
        "setuptools.command.sdist",
        "py2exe.setuptools_buildexe",
        "py2exe.distutils_buildexe"
      ],
      "configparser": [],
      "errno": [],
      "json": [],
      "re": [],
      "pathlib": [],
      "typing": [],
      "functools": [],
      "tomllib": [],
      "tomli": [],
      "setuptools.command.build_py": [],
      "cx_Freeze.dist": [],
      "setuptools.command.egg_info": [],
      "setuptools.command.sdist": [],
      "py2exe.setuptools_buildexe": [],
      "py2exe.distutils_buildexe": [],
      "/tmp/cs-hpc-demo-1/runtests.py": [
        "runpy",
        "os",
        "typeguard",
        "typeguard.importhook"
      ],
      "runpy": [],
      "typeguard": [],
      "typeguard.importhook": [],
      "/tmp/cs-hpc-demo-1/numba/_version.py": [
        "errno",
        "os",
        "re",
        "subprocess",
        "sys",
        "typing",
        "functools"
      ],
      "/tmp/cs-hpc-demo-1/numba/__init__.py": [
        "platform",
        "re",
        "sys",
        "warnings",
        "_version",
        "numba.misc.init_utils",
        "numba.core",
        "numba.misc.special",
        "numba.core.errors",
        "numba.core.types",
        "numba.core.decorators",
        "numba.np.ufunc",
        "numba.np.numpy_support",
        "numba",
        "numba.core.withcontexts",
        "numba.core.target_extension",
        "numba.typed",
        "llvmlite",
        "numpy",
        "numba.testing",
        "llvmlite.binding",
        "scipy"
      ],
      "warnings": [],
      "_version": [],
      "numba.misc.init_utils": [],
      "numba.core": [],
      "numba.misc.special": [],
      "numba.core.errors": [],
      "numba.core.types": [],
      "numba.core.decorators": [],
      "numba.np.ufunc": [],
      "numba.np.numpy_support": [],
      "numba": [],
      "numba.core.withcontexts": [],
      "numba.core.target_extension": [],
      "numba.typed": [],
      "llvmlite": [],
      "numba.testing": [],
      "llvmlite.binding": [],
      "scipy": [],
      "/tmp/cs-hpc-demo-1/numba/__main__.py": [
        "sys",
        "numba.misc.numba_entry"
      ],
      "numba.misc.numba_entry": [],
      "/tmp/cs-hpc-demo-1/numba/runtests.py": [
        "numba.testing._runtests",
        "sys",
        "multiprocessing"
      ],
      "numba.testing._runtests": [],
      "multiprocessing": [],
      "/tmp/cs-hpc-demo-1/numba/extending.py": [
        "numba.core.extending"
      ],
      "numba.core.extending": [],
      "/tmp/cs-hpc-demo-1/maint/towncrier_rst_validator.py": [
        "subprocess",
        "argparse",
        "os",
        "sys"
      ],
      "argparse": [],
      "/tmp/cs-hpc-demo-1/maint/gitlog2changelog.py": [
        "re",
        "git",
        "docopt",
        "github"
      ],
      "git": [],
      "docopt": [],
      "github": [],
      "/tmp/cs-hpc-demo-1/maint/towncrier_checker.py": [
        "re",
        "os.path",
        "pathlib",
        "git",
        "docopt",
        "github"
      ],
      "os.path": [],
      "/tmp/cs-hpc-demo-1/maint/github_weekly_meeting.py": [
        "sys",
        "os",
        "github3"
      ],
      "github3": [],
      "/tmp/cs-hpc-demo-1/maint/git-copy.py": [
        "os",
        "sys",
        "sh"
      ],
      "sh": [],
      "/tmp/cs-hpc-demo-1/numba/misc/coverage_support.py": [
        "typing",
        "collections.abc",
        "dataclasses",
        "abc",
        "numba.core",
        "coverage"
      ],
      "collections.abc": [],
      "dataclasses": [],
      "abc": [],
      "coverage": [],
      "/tmp/cs-hpc-demo-1/numba/misc/POST.py": [
        "numba.tests",
        "numba"
      ],
      "numba.tests": [],
      "/tmp/cs-hpc-demo-1/numba/misc/literal.py": [
        "numba.core.extending",
        "numba.core",
        "numba.misc.special",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/gdb_print_extension.py": [
        "re",
        "gdb.printing",
        "gdb",
        "numpy"
      ],
      "gdb.printing": [],
      "gdb": [],
      "/tmp/cs-hpc-demo-1/numba/misc/numba_gdbinfo.py": [
        "collections",
        "os",
        "re",
        "subprocess",
        "textwrap",
        "numba"
      ],
      "collections": [],
      "textwrap": [],
      "/tmp/cs-hpc-demo-1/numba/misc/quicksort.py": [
        "collections",
        "numpy",
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/numba_entry.py": [
        "sys",
        "argparse",
        "os",
        "subprocess",
        "json",
        "numba_sysinfo",
        "numba_gdbinfo",
        "jinja2"
      ],
      "numba_sysinfo": [],
      "numba_gdbinfo": [],
      "jinja2": [],
      "/tmp/cs-hpc-demo-1/numba/misc/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/misc/inspection.py": [
        "tempfile",
        "os",
        "warnings",
        "numba.core.errors",
        "r2pipe",
        "numba.pycc.platform",
        "graphviz"
      ],
      "tempfile": [],
      "r2pipe": [],
      "numba.pycc.platform": [],
      "graphviz": [],
      "/tmp/cs-hpc-demo-1/numba/misc/cffiimpl.py": [
        "numba.core.imputils",
        "numba.core",
        "numba.np"
      ],
      "numba.core.imputils": [],
      "numba.np": [],
      "/tmp/cs-hpc-demo-1/numba/misc/appdirs.py": [
        "sys",
        "os",
        "platform",
        "winreg",
        "win32com.shell",
        "ctypes",
        "array",
        "com.sun",
        "com.sun.jna.platform",
        "win32api",
        "com.sun.jna"
      ],
      "winreg": [],
      "win32com.shell": [],
      "ctypes": [],
      "array": [],
      "com.sun": [],
      "com.sun.jna.platform": [],
      "win32api": [],
      "com.sun.jna": [],
      "/tmp/cs-hpc-demo-1/numba/misc/init_utils.py": [
        "collections"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/firstlinefinder.py": [
        "ast",
        "inspect",
        "textwrap"
      ],
      "ast": [],
      "inspect": [],
      "/tmp/cs-hpc-demo-1/numba/misc/findlib.py": [
        "sys",
        "os",
        "re"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/numba_sysinfo.py": [
        "json",
        "locale",
        "multiprocessing",
        "os",
        "platform",
        "textwrap",
        "sys",
        "contextlib",
        "datetime",
        "io",
        "subprocess",
        "numpy",
        "llvmlite.binding",
        "llvmlite",
        "numba",
        "numba.cuda",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.runtime",
        "numba.core",
        "psutil",
        "numpy.core._multiarray_umath",
        "numba.np.ufunc",
        "numba.np.ufunc.parallel",
        "cuda",
        "ptxcompiler",
        "cubinlinker"
      ],
      "locale": [],
      "contextlib": [],
      "datetime": [],
      "io": [],
      "numba.cuda": [],
      "numba.cuda.cudadrv.driver": [],
      "numba.cuda.cudadrv.runtime": [],
      "psutil": [],
      "numpy.core._multiarray_umath": [],
      "numba.np.ufunc.parallel": [],
      "cuda": [],
      "ptxcompiler": [],
      "cubinlinker": [],
      "/tmp/cs-hpc-demo-1/numba/misc/gdb_hook.py": [
        "os",
        "sys",
        "llvmlite",
        "numba.core",
        "numba",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/llvm_pass_timings.py": [
        "re",
        "operator",
        "heapq",
        "collections",
        "collections.abc",
        "contextlib",
        "functools",
        "numba.core",
        "llvmlite.binding"
      ],
      "operator": [],
      "heapq": [],
      "/tmp/cs-hpc-demo-1/numba/misc/mergesort.py": [
        "numpy",
        "collections",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/timsort.py": [
        "collections",
        "numba.core",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/special.py": [
        "numpy",
        "numba.core.typing.typeof",
        "numba.core.typing.asnumbatype",
        "numba"
      ],
      "numba.core.typing.typeof": [],
      "numba.core.typing.asnumbatype": [],
      "/tmp/cs-hpc-demo-1/numba/misc/dump_style.py": [
        "numba.core.config",
        "pygments.styles.manni",
        "pygments.styles.monokai",
        "pygments.styles.native",
        "pygments.lexer",
        "pygments.token",
        "pygments.style",
        "pygments.styles.default"
      ],
      "numba.core.config": [],
      "pygments.styles.manni": [],
      "pygments.styles.monokai": [],
      "pygments.styles.native": [],
      "pygments.lexer": [],
      "pygments.token": [],
      "pygments.style": [],
      "pygments.styles.default": [],
      "/tmp/cs-hpc-demo-1/numba/misc/memoryutils.py": [
        "__future__",
        "os",
        "contextlib",
        "time",
        "typing",
        "psutil"
      ],
      "__future__": [],
      "time": [],
      "/tmp/cs-hpc-demo-1/numba/experimental/function_type.py": [
        "functools",
        "numba.extending",
        "numba.core.imputils",
        "numba.core.ccallback",
        "numba.core",
        "llvmlite",
        "numba.core.types",
        "numba.core.dispatcher"
      ],
      "numba.extending": [],
      "numba.core.ccallback": [],
      "numba.core.dispatcher": [],
      "/tmp/cs-hpc-demo-1/numba/experimental/structref.py": [
        "operator",
        "numba.core.cgutils",
        "numba",
        "numba.core",
        "numba.core.datamodel",
        "numba.core.extending",
        "numba.core.typing.templates",
        "numba.experimental.jitclass.base"
      ],
      "numba.core.cgutils": [],
      "numba.core.datamodel": [],
      "numba.core.typing.templates": [],
      "numba.experimental.jitclass.base": [],
      "/tmp/cs-hpc-demo-1/numba/experimental/__init__.py": [
        "jitclass"
      ],
      "jitclass": [],
      "/tmp/cs-hpc-demo-1/numba/types/__init__.py": [
        "sys",
        "numba.core.utils"
      ],
      "numba.core.utils": [],
      "/tmp/cs-hpc-demo-1/numba/core/fastmathpass.py": [
        "llvmlite",
        "llvmlite.ir.transforms"
      ],
      "llvmlite.ir.transforms": [],
      "/tmp/cs-hpc-demo-1/numba/core/dispatcher.py": [
        "collections",
        "functools",
        "sys",
        "types",
        "uuid",
        "weakref",
        "contextlib",
        "abc",
        "numba",
        "numba.core",
        "numba.core.compiler_lock",
        "numba.core.typeconv.rules",
        "numba.core.typing.templates",
        "numba.core.typing.typeof",
        "numba.core.bytecode",
        "numba.core.caching",
        "numba.core.event",
        "numba.core.annotations.pretty_annotate"
      ],
      "types": [],
      "uuid": [],
      "weakref": [],
      "numba.core.compiler_lock": [],
      "numba.core.typeconv.rules": [],
      "numba.core.bytecode": [],
      "numba.core.caching": [],
      "numba.core.event": [],
      "numba.core.annotations.pretty_annotate": [],
      "/tmp/cs-hpc-demo-1/numba/core/serialize.py": [
        "sys",
        "abc",
        "io",
        "copyreg",
        "pickle",
        "numba",
        "llvmlite"
      ],
      "copyreg": [],
      "pickle": [],
      "/tmp/cs-hpc-demo-1/numba/core/funcdesc.py": [
        "collections",
        "importlib",
        "numba.core",
        "numba.core.utils"
      ],
      "importlib": [],
      "/tmp/cs-hpc-demo-1/numba/core/postproc.py": [
        "functools",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/options.py": [
        "operator",
        "numba.core",
        "numba.core.targetconfig"
      ],
      "numba.core.targetconfig": [],
      "/tmp/cs-hpc-demo-1/numba/core/transforms.py": [
        "collections",
        "logging",
        "operator",
        "numba.core.analysis",
        "numba.core",
        "numba.core.utils",
        "numba.core.dispatcher",
        "numba.core.postproc"
      ],
      "logging": [],
      "numba.core.analysis": [],
      "numba.core.postproc": [],
      "/tmp/cs-hpc-demo-1/numba/core/compiler_machinery.py": [
        "timeit",
        "abc",
        "collections",
        "inspect",
        "numba.core.compiler_lock",
        "numba.core",
        "numba.core.tracing",
        "numba.core.postproc",
        "numba.core.ir_utils",
        "numba.core.event",
        "numba.core.compiler"
      ],
      "timeit": [],
      "numba.core.tracing": [],
      "numba.core.ir_utils": [],
      "numba.core.compiler": [],
      "/tmp/cs-hpc-demo-1/numba/core/tracing.py": [
        "inspect",
        "logging",
        "sys",
        "threading",
        "functools",
        "itertools",
        "numba.core"
      ],
      "threading": [],
      "itertools": [],
      "/tmp/cs-hpc-demo-1/numba/core/event.py": [
        "os",
        "json",
        "atexit",
        "abc",
        "enum",
        "time",
        "threading",
        "timeit",
        "contextlib",
        "collections",
        "numba.core"
      ],
      "atexit": [],
      "enum": [],
      "/tmp/cs-hpc-demo-1/numba/core/optional.py": [
        "operator",
        "numba.core",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/ccallback.py": [
        "ctypes",
        "functools",
        "numba.core",
        "numba.core.caching",
        "numba.core.dispatcher",
        "numba.core.typing",
        "numba.core.typing.ctypes_utils",
        "numba.core.compiler_lock",
        "cffi"
      ],
      "numba.core.typing": [],
      "numba.core.typing.ctypes_utils": [],
      "cffi": [],
      "/tmp/cs-hpc-demo-1/numba/core/config.py": [
        "platform",
        "sys",
        "os",
        "re",
        "shutil",
        "warnings",
        "traceback",
        "llvmlite.binding",
        "yaml",
        "numba.np.ufunc",
        "cuda"
      ],
      "shutil": [],
      "traceback": [],
      "yaml": [],
      "/tmp/cs-hpc-demo-1/numba/core/compiler.py": [
        "collections",
        "copy",
        "warnings",
        "numba.core.tracing",
        "numba.core",
        "numba.parfors.parfor",
        "numba.core.errors",
        "numba.core.environment",
        "numba.core.compiler_machinery",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.object_mode_passes",
        "numba.core.targetconfig",
        "numba.core.inline_closurecall"
      ],
      "copy": [],
      "numba.parfors.parfor": [],
      "numba.core.environment": [],
      "numba.core.compiler_machinery": [],
      "numba.core.untyped_passes": [],
      "numba.core.typed_passes": [],
      "numba.core.object_mode_passes": [],
      "numba.core.inline_closurecall": [],
      "/tmp/cs-hpc-demo-1/numba/core/withcontexts.py": [
        "numba",
        "numba.core",
        "numba.core.ir_utils",
        "numba.core.transforms",
        "numba.core.typing.typeof"
      ],
      "numba.core.transforms": [],
      "/tmp/cs-hpc-demo-1/numba/core/analysis.py": [
        "operator",
        "functools",
        "collections",
        "controlflow",
        "numba.core",
        "numba.misc",
        "numba.core.ir_utils"
      ],
      "controlflow": [],
      "numba.misc": [],
      "/tmp/cs-hpc-demo-1/numba/core/inline_closurecall.py": [
        "types",
        "copy",
        "ctypes",
        "numba.core.analysis",
        "numba.core",
        "numba.parfors.parfor",
        "numba.core.ir_utils",
        "numba.core.imputils",
        "numba.core.extending",
        "numba.core.typing",
        "numba.cpython.listobj",
        "numba.cpython.rangeobj",
        "numba.np.arrayobj",
        "numba.np.unsafe.ndarray",
        "numpy",
        "operator",
        "numba.misc.special",
        "numba.stencils.stencil",
        "numba.core.compiler",
        "numba.core.untyped_passes",
        "numba.core.ssa",
        "numba.core.typed_passes",
        "numba.typed.listobject"
      ],
      "numba.cpython.listobj": [],
      "numba.cpython.rangeobj": [],
      "numba.np.arrayobj": [],
      "numba.np.unsafe.ndarray": [],
      "numba.stencils.stencil": [],
      "numba.core.ssa": [],
      "numba.typed.listobject": [],
      "/tmp/cs-hpc-demo-1/numba/core/ir_utils.py": [
        "numpy",
        "math",
        "types",
        "collections",
        "warnings",
        "numba",
        "numba.core.extending",
        "numba.core",
        "numba.core.typing.templates",
        "numba.core.analysis",
        "numba.core.errors",
        "copy",
        "numba.parfors",
        "numba.misc.special",
        "numba.core.inline_closurecall",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.registry",
        "numba.np.linalg"
      ],
      "math": [],
      "numba.parfors": [],
      "numba.core.registry": [],
      "numba.np.linalg": [],
      "/tmp/cs-hpc-demo-1/numba/core/registry.py": [
        "contextlib",
        "numba.core.utils",
        "numba.core.descriptors",
        "numba.core"
      ],
      "numba.core.descriptors": [],
      "/tmp/cs-hpc-demo-1/numba/core/imputils.py": [
        "collections",
        "contextlib",
        "inspect",
        "functools",
        "enum",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/pylowering.py": [
        "builtins",
        "operator",
        "inspect",
        "functools",
        "llvmlite.ir",
        "numba.core",
        "numba.core.errors",
        "numba.core.lowering",
        "numba.core.dispatcher"
      ],
      "builtins": [],
      "llvmlite.ir": [],
      "numba.core.lowering": [],
      "/tmp/cs-hpc-demo-1/numba/core/externals.py": [
        "sys",
        "llvmlite",
        "llvmlite.binding",
        "numba.core",
        "numba",
        "ctypes"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/cpu.py": [
        "platform",
        "llvmlite.binding",
        "llvmlite",
        "numba",
        "numba.core.callwrapper",
        "numba.core.base",
        "numba.core",
        "numba.core.options",
        "numba.core.runtime",
        "numba.core.compiler_lock",
        "numba.core.entrypoints",
        "numba.core.cpu_options",
        "numba.np",
        "numba.cpython",
        "numba.misc",
        "numba.np.random",
        "numba.np.polynomial",
        "numba.typed",
        "numba.experimental",
        "numba.experimental.jitclass.base",
        "numba.np.unsafe"
      ],
      "numba.core.callwrapper": [],
      "numba.core.base": [],
      "numba.core.options": [],
      "numba.core.runtime": [],
      "numba.core.entrypoints": [],
      "numba.core.cpu_options": [],
      "numba.cpython": [],
      "numba.np.random": [],
      "numba.np.polynomial": [],
      "numba.experimental": [],
      "numba.np.unsafe": [],
      "/tmp/cs-hpc-demo-1/numba/core/lowering.py": [
        "collections",
        "operator",
        "warnings",
        "functools",
        "llvmlite.ir",
        "numba.core",
        "numba.core.errors",
        "numba.core.funcdesc",
        "numba.core.environment",
        "numba.core.analysis",
        "numba.misc.firstlinefinder",
        "numba.misc.coverage_support",
        "numba.core.unsafe",
        "numba.core.pythonapi",
        "numba.experimental.function_type",
        "numba.core.target_extension"
      ],
      "numba.core.funcdesc": [],
      "numba.misc.firstlinefinder": [],
      "numba.misc.coverage_support": [],
      "numba.core.unsafe": [],
      "numba.core.pythonapi": [],
      "numba.experimental.function_type": [],
      "/tmp/cs-hpc-demo-1/numba/core/callconv.py": [
        "collections",
        "collections.abc",
        "itertools",
        "hashlib",
        "llvmlite",
        "numba.core",
        "numba.core.base"
      ],
      "hashlib": [],
      "/tmp/cs-hpc-demo-1/numba/core/object_mode_passes.py": [
        "numba.core",
        "numba.core.compiler_machinery",
        "collections",
        "warnings",
        "numba.core.compiler"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/sigutils.py": [
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/core/ssa.py": [
        "logging",
        "operator",
        "warnings",
        "functools",
        "copy",
        "collections",
        "numba",
        "numba.core",
        "numba.core.utils",
        "numba.core.analysis"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/ir.py": [
        "collections",
        "copy",
        "itertools",
        "os",
        "linecache",
        "pprint",
        "re",
        "sys",
        "operator",
        "types",
        "functools",
        "io",
        "numba.core",
        "numba.core.utils",
        "numba.core.errors",
        "graphviz",
        "pygments",
        "numba.misc.dump_style",
        "pygments.formatters"
      ],
      "linecache": [],
      "pprint": [],
      "pygments": [],
      "numba.misc.dump_style": [],
      "pygments.formatters": [],
      "/tmp/cs-hpc-demo-1/numba/core/itanium_mangler.py": [
        "re",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/removerefctpass.py": [
        "llvmlite.ir.transforms",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/boxing.py": [
        "llvmlite",
        "numba.core",
        "numba.core.pythonapi",
        "numba.core.errors",
        "numba.core.typing.typeof",
        "numba.cpython",
        "numba.np",
        "contextlib"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/consts.py": [
        "types",
        "weakref",
        "numba.core.errors",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/intrinsics.py": [
        "llvmlite"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/generators.py": [
        "llvmlite.ir",
        "numba.core",
        "numba.core.funcdesc"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/descriptors.py": [
        "abc"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/targetconfig.py": [
        "re",
        "zlib",
        "base64",
        "types",
        "numba.core"
      ],
      "zlib": [],
      "base64": [],
      "/tmp/cs-hpc-demo-1/numba/core/interpreter.py": [
        "builtins",
        "collections",
        "dis",
        "operator",
        "logging",
        "textwrap",
        "numba.core",
        "numba.core.errors",
        "numba.core.ir_utils",
        "numba.core.utils",
        "numba.core.byteflow",
        "numba.core.unsafe",
        "numba.cpython.unsafe.tuple"
      ],
      "dis": [],
      "numba.core.byteflow": [],
      "numba.cpython.unsafe.tuple": [],
      "/tmp/cs-hpc-demo-1/numba/core/caching.py": [
        "abc",
        "contextlib",
        "errno",
        "hashlib",
        "importlib",
        "inspect",
        "itertools",
        "math",
        "os",
        "pickle",
        "sys",
        "tempfile",
        "uuid",
        "warnings",
        "numba.misc.appdirs",
        "zipfile",
        "pathlib",
        "numba",
        "numba.core.errors",
        "numba.core.base",
        "numba.core.codegen",
        "numba.core.compiler",
        "numba.core",
        "numba.core.serialize",
        "IPython.paths",
        "IPython.utils.path"
      ],
      "numba.misc.appdirs": [],
      "zipfile": [],
      "numba.core.codegen": [],
      "numba.core.serialize": [],
      "IPython.paths": [],
      "IPython.utils.path": [],
      "/tmp/cs-hpc-demo-1/numba/core/utils.py": [
        "atexit",
        "builtins",
        "functools",
        "inspect",
        "os",
        "operator",
        "timeit",
        "math",
        "sys",
        "traceback",
        "weakref",
        "warnings",
        "threading",
        "contextlib",
        "json",
        "typing",
        "pprint",
        "types",
        "importlib",
        "numpy",
        "numba.core.config",
        "numba.core",
        "collections.abc",
        "numba.core.target_extension",
        "numba.core.errors",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "numba.misc.dump_style"
      ],
      "pygments.lexers": [],
      "/tmp/cs-hpc-demo-1/numba/core/debuginfo.py": [
        "abc",
        "os.path",
        "contextlib",
        "llvmlite",
        "numba.core",
        "numba.core.datamodel.models"
      ],
      "numba.core.datamodel.models": [],
      "/tmp/cs-hpc-demo-1/numba/core/cpu_options.py": [
        "abc"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/entrypoints.py": [
        "logging",
        "warnings",
        "importlib"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typeinfer.py": [
        "logging",
        "operator",
        "contextlib",
        "itertools",
        "pprint",
        "collections",
        "functools",
        "numba.core",
        "numba.core.typing.templates",
        "numba.core.errors",
        "numba.core.funcdesc",
        "numba.core.typeconv",
        "numba.misc"
      ],
      "numba.core.typeconv": [],
      "/tmp/cs-hpc-demo-1/numba/core/llvm_bindings.py": [
        "llvmlite"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/environment.py": [
        "weakref",
        "importlib",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/errors.py": [
        "abc",
        "contextlib",
        "os",
        "warnings",
        "numba.core.config",
        "numpy",
        "collections",
        "functools",
        "colorama",
        "numba.core.utils"
      ],
      "colorama": [],
      "/tmp/cs-hpc-demo-1/numba/core/typed_passes.py": [
        "abc",
        "contextlib",
        "collections",
        "functools",
        "copy",
        "warnings",
        "numba.core",
        "numba.parfors.parfor",
        "numba.parfors.parfor_lowering",
        "numba.core.compiler_machinery",
        "numba.core.annotations",
        "numba.core.ir_utils",
        "llvmlite",
        "numba.np.ufunc.parallel",
        "numba.core.compiler",
        "numba.core.inline_closurecall",
        "numba.core.typing.templates"
      ],
      "numba.parfors.parfor_lowering": [],
      "numba.core.annotations": [],
      "/tmp/cs-hpc-demo-1/numba/core/bytecode.py": [
        "sys",
        "collections",
        "dis",
        "inspect",
        "itertools",
        "types",
        "numba.core",
        "numba.core.utils",
        "opcode"
      ],
      "opcode": [],
      "/tmp/cs-hpc-demo-1/numba/core/byteflow.py": [
        "dis",
        "logging",
        "collections",
        "functools",
        "numba.core.utils",
        "numba.core.controlflow",
        "numba.core.ir",
        "numba.core.errors",
        "enum"
      ],
      "numba.core.controlflow": [],
      "numba.core.ir": [],
      "/tmp/cs-hpc-demo-1/numba/core/untyped_passes.py": [
        "collections",
        "contextlib",
        "copy",
        "warnings",
        "numba.core.compiler_machinery",
        "numba.core",
        "numba.misc.special",
        "numba.core.analysis",
        "numba.core.ir_utils",
        "numba.core.ssa",
        "numba.core.inline_closurecall",
        "numba.core.compiler",
        "numba.core.cpu",
        "numba",
        "numba.core.typed_passes"
      ],
      "numba.core.cpu": [],
      "/tmp/cs-hpc-demo-1/numba/core/callwrapper.py": [
        "llvmlite.ir",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/codegen.py": [
        "warnings",
        "functools",
        "locale",
        "weakref",
        "ctypes",
        "html",
        "textwrap",
        "llvmlite.binding",
        "llvmlite.ir",
        "abc",
        "numba.core",
        "numba.core.llvm_bindings",
        "numba.core.runtime.nrtopt",
        "numba.core.runtime",
        "numba.core.compiler_lock",
        "numba.core.errors",
        "numba.misc.inspection",
        "numba.misc.llvm_pass_timings",
        "graphviz",
        "re",
        "json",
        "inspect",
        "llvmlite",
        "numba.typed",
        "types",
        "collections",
        "elftools.elf.elffile",
        "elftools.elf",
        "io",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "numba.misc.dump_style"
      ],
      "html": [],
      "numba.core.llvm_bindings": [],
      "numba.core.runtime.nrtopt": [],
      "numba.misc.inspection": [],
      "numba.misc.llvm_pass_timings": [],
      "elftools.elf.elffile": [],
      "elftools.elf": [],
      "/tmp/cs-hpc-demo-1/numba/core/target_extension.py": [
        "abc",
        "numba.core.registry",
        "numba.core.decorators",
        "numba.core.errors",
        "threading"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/controlflow.py": [
        "collections",
        "functools",
        "sys",
        "numba.core.ir",
        "numba.core.errors",
        "numba.core.utils",
        "pprint",
        "graphviz"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/base.py": [
        "collections",
        "copy",
        "sys",
        "itertools",
        "contextlib",
        "functools",
        "llvmlite",
        "llvmlite.ir",
        "llvmlite.binding",
        "numba.core",
        "numba",
        "numba.core.compiler_lock",
        "numba.core.pythonapi",
        "numba.core.imputils",
        "numba.cpython",
        "numba.core.target_extension",
        "numba.core.runtime.context",
        "numba.np"
      ],
      "numba.core.runtime.context": [],
      "/tmp/cs-hpc-demo-1/numba/core/cgutils.py": [
        "collections",
        "contextlib",
        "functools",
        "llvmlite",
        "numba.core",
        "numba.core.datamodel"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/pythonapi.py": [
        "collections",
        "contextlib",
        "pickle",
        "hashlib",
        "sys",
        "llvmlite",
        "llvmlite.ir",
        "ctypes",
        "numba",
        "numba.core",
        "numba.core.utils",
        "numba.core.boxing"
      ],
      "numba.core.boxing": [],
      "/tmp/cs-hpc-demo-1/numba/core/extending.py": [
        "os",
        "uuid",
        "weakref",
        "collections",
        "functools",
        "types",
        "numba",
        "numba.core",
        "numba.core.typing.typeof",
        "numba.core.typing.asnumbatype",
        "numba.core.typing.templates",
        "numba.core.imputils",
        "numba.core.datamodel",
        "numba.core.pythonapi",
        "numba._helperlib",
        "numba.core.serialize",
        "numba.core.datamodel.models",
        "numba.core.dispatcher"
      ],
      "numba._helperlib": [],
      "/tmp/cs-hpc-demo-1/numba/core/compiler_lock.py": [
        "threading",
        "functools",
        "numba.core.event"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/decorators.py": [
        "sys",
        "warnings",
        "inspect",
        "logging",
        "types",
        "numba.core.errors",
        "numba.stencils.stencil",
        "numba.core",
        "numba.core.target_extension",
        "numba.core.ccallback",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/cloudpickle.py": [
        "_collections_abc",
        "collections",
        "abc",
        "builtins",
        "copyreg",
        "dataclasses",
        "dis",
        "enum",
        "io",
        "itertools",
        "logging",
        "opcode",
        "pickle",
        "platform",
        "struct",
        "sys",
        "threading",
        "types",
        "typing",
        "uuid",
        "warnings",
        "weakref"
      ],
      "_collections_abc": [],
      "struct": [],
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/__init__.py": [
        "cloudpickle"
      ],
      "cloudpickle": [],
      "/tmp/cs-hpc-demo-1/numba/cloudpickle/cloudpickle_fast.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/dispatcher.py": [
        "numpy",
        "os",
        "sys",
        "ctypes",
        "functools",
        "numba.core",
        "numba.core.caching",
        "numba.core.compiler_lock",
        "numba.core.dispatcher",
        "numba.core.errors",
        "numba.core.typing.typeof",
        "numba.cuda.api",
        "numba.cuda.args",
        "numba.cuda.compiler",
        "numba.cuda.cudadrv",
        "numba.cuda.cudadrv.devices",
        "numba.cuda.descriptor",
        "numba.cuda.errors",
        "numba.cuda",
        "numba",
        "warnings",
        "numba.core.target_extension"
      ],
      "numba.cuda.api": [],
      "numba.cuda.args": [],
      "numba.cuda.compiler": [],
      "numba.cuda.cudadrv": [],
      "numba.cuda.cudadrv.devices": [],
      "numba.cuda.descriptor": [],
      "numba.cuda.errors": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/descriptor.py": [
        "numba.core.descriptors",
        "numba.core.options",
        "target"
      ],
      "target": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/printimpl.py": [
        "functools",
        "llvmlite",
        "numba.core",
        "numba.core.errors",
        "numba.core.imputils",
        "numba.cuda",
        "warnings"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevice.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/deviceufunc.py": [
        "abc",
        "collections",
        "operator",
        "warnings",
        "functools",
        "numpy",
        "numba.np.ufunc.ufuncbuilder",
        "numba.core",
        "numba.core.typing",
        "numba.np.ufunc.sigparse",
        "pprint"
      ],
      "numba.np.ufunc.ufuncbuilder": [],
      "numba.np.ufunc.sigparse": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cg.py": [
        "numba.core",
        "numba.core.extending",
        "numba.core.typing",
        "numba.cuda",
        "numba.cuda.extending",
        "numba.cuda.types"
      ],
      "numba.cuda.extending": [],
      "numba.cuda.types": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/device_init.py": [
        "sys",
        "numba.cuda",
        "stubs",
        "intrinsics",
        "cudadrv.error",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.runtime",
        "cudadrv",
        "errors",
        "decorators",
        "api",
        "args",
        "intrinsic_wrapper",
        "kernels"
      ],
      "stubs": [],
      "intrinsics": [],
      "cudadrv.error": [],
      "cudadrv": [],
      "errors": [],
      "decorators": [],
      "api": [],
      "args": [],
      "intrinsic_wrapper": [],
      "kernels": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/compiler.py": [
        "llvmlite",
        "numba.core.typing.templates",
        "numba.core",
        "numba.core.compiler",
        "numba.core.compiler_lock",
        "numba.core.compiler_machinery",
        "numba.core.errors",
        "numba.core.typed_passes",
        "warnings",
        "numba.cuda.api",
        "numba.cuda.target",
        "descriptor",
        "numba.core.target_extension"
      ],
      "numba.cuda.target": [],
      "descriptor": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/models.py": [
        "functools",
        "llvmlite",
        "numba.core.datamodel.registry",
        "numba.core.extending",
        "numba.core",
        "numba.cuda.types"
      ],
      "numba.core.datamodel.registry": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/intrinsic_wrapper.py": [
        "decorators",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/mathimpl.py": [
        "math",
        "operator",
        "llvmlite",
        "numba.core",
        "numba.core.imputils",
        "numba.types",
        "numba.cuda",
        "numba"
      ],
      "numba.types": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/initialize.py": [
        "numba.cuda.models",
        "numba.cuda.decorators",
        "numba.cuda.dispatcher",
        "numba.core.target_extension"
      ],
      "numba.cuda.models": [],
      "numba.cuda.decorators": [],
      "numba.cuda.dispatcher": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/vector_types.py": [
        "typing",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core.typing.templates",
        "numba.cuda",
        "numba.cuda.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cuda_paths.py": [
        "sys",
        "re",
        "os",
        "collections",
        "numba.core.config",
        "numba.misc.findlib"
      ],
      "numba.misc.findlib": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevicefuncs.py": [
        "collections",
        "textwrap",
        "numba.types",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator_init.py": [
        "simulator"
      ],
      "simulator": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/ufuncs.py": [
        "math",
        "numpy",
        "functools",
        "numba.core",
        "numba.cpython",
        "numba.np",
        "numba.np.numpy_support",
        "numba.cuda.mathimpl"
      ],
      "numba.cuda.mathimpl": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/__init__.py": [
        "numba",
        "numba.core",
        "numba.cuda.compiler",
        "simulator_init",
        "device_init"
      ],
      "simulator_init": [],
      "device_init": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/types.py": [
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/random.py": [
        "math",
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/intrinsics.py": [
        "llvmlite",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.core.typing",
        "numba.core.extending",
        "numba.cuda",
        "numba.cuda.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/api.py": [
        "contextlib",
        "os",
        "numpy",
        "cudadrv",
        "numba.core",
        "numba.cuda.api_util"
      ],
      "numba.cuda.api_util": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/stubs.py": [
        "numpy",
        "collections",
        "functools",
        "itertools",
        "inspect"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/vectorizers.py": [
        "numba",
        "numpy",
        "numba.cuda",
        "numba.cuda.deviceufunc"
      ],
      "numba.cuda.deviceufunc": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/args.py": [
        "abc",
        "numba.core.typing.typeof",
        "cudadrv.devicearray"
      ],
      "cudadrv.devicearray": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/target.py": [
        "re",
        "functools",
        "llvmlite.binding",
        "llvmlite",
        "numba.core",
        "numba.core.dispatcher",
        "numba.core.base",
        "numba.core.callconv",
        "numba.core.typing",
        "cudadrv",
        "numba.cuda",
        "numba.cuda.models",
        "numba.cuda.dispatcher",
        "numba.cpython",
        "numba.misc",
        "numba.np",
        "numba.np.unsafe",
        "numba"
      ],
      "numba.core.callconv": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudamath.py": [
        "math",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/libdeviceimpl.py": [
        "llvmlite",
        "numba.core",
        "numba.core.imputils",
        "numba.cuda"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/errors.py": [
        "numbers",
        "numba.core.errors"
      ],
      "numbers": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudaimpl.py": [
        "functools",
        "operator",
        "math",
        "llvmlite",
        "llvmlite.binding",
        "numba.core.imputils",
        "numba.core.typing.npydecl",
        "numba.core.datamodel",
        "numba.core",
        "numba.np",
        "numba.np.npyimpl",
        "cudadrv",
        "numba",
        "numba.cuda",
        "numba.cuda.types"
      ],
      "numba.core.typing.npydecl": [],
      "numba.np.npyimpl": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/nvvmutils.py": [
        "itertools",
        "llvmlite",
        "numba.core",
        "cudadrv"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/testing.py": [
        "os",
        "platform",
        "shutil",
        "numba.tests.support",
        "numba.cuda.cuda_paths",
        "numba.cuda.cudadrv",
        "numba.core",
        "pathlib",
        "unittest",
        "numba.cuda",
        "numba.cuda.cudadrv.devices",
        "cubinlinker",
        "ptxcompiler"
      ],
      "numba.tests.support": [],
      "numba.cuda.cuda_paths": [],
      "unittest": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadecl.py": [
        "operator",
        "numba.core",
        "numba.core.typing.npydecl",
        "numba.core.typing.templates",
        "numba.cuda.types",
        "numba.core.typeconv",
        "numba",
        "numba.cuda.compiler"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/codegen.py": [
        "llvmlite",
        "numba.core",
        "numba.core.codegen",
        "cudadrv",
        "numba.cuda.cudadrv.libs",
        "os",
        "subprocess",
        "tempfile"
      ],
      "numba.cuda.cudadrv.libs": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/libdevicedecl.py": [
        "numba.cuda",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/api_util.py": [
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/extending.py": [
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/decorators.py": [
        "warnings",
        "numba.core",
        "numba.core.errors",
        "numba.cuda.compiler",
        "numba.cuda.dispatcher",
        "numba.cuda.simulator.kernel"
      ],
      "numba.cuda.simulator.kernel": [],
      "/tmp/cs-hpc-demo-1/numba/stencils/stencil.py": [
        "copy",
        "numpy",
        "llvmlite",
        "numba.core",
        "numba.core.typing.templates",
        "numba.core.imputils",
        "numba.core.extending",
        "numba.core.errors",
        "numba.misc.special",
        "numba",
        "operator",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/stencils/stencilparfor.py": [
        "numbers",
        "copy",
        "types",
        "operator",
        "numpy",
        "numba.parfors.parfor",
        "numba.core",
        "numba.core.typing.templates",
        "numba.core.typing",
        "numba.core.ir_utils",
        "numba.core.errors",
        "numba.core.utils",
        "numba.np",
        "numba.core.cpu",
        "numba.core.registry",
        "numba.core.annotations",
        "numba.core.typed_passes",
        "numba.stencils.stencil",
        "numba.core.compiler"
      ],
      "/tmp/cs-hpc-demo-1/numba/stencils/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/pycc/cc.py": [
        "setuptools",
        "setuptools.command",
        "setuptools.extension",
        "os",
        "shutil",
        "sys",
        "tempfile",
        "numba.core",
        "numba.core.compiler_lock",
        "numba.pycc.compiler",
        "numba.pycc.platform",
        "numba"
      ],
      "setuptools.command": [],
      "setuptools.extension": [],
      "numba.pycc.compiler": [],
      "/tmp/cs-hpc-demo-1/numba/pycc/compiler.py": [
        "logging",
        "os",
        "sys",
        "llvmlite",
        "llvmlite.binding",
        "numba.pycc",
        "numba.core.cgutils",
        "numba.core.compiler",
        "numba.core.compiler_lock",
        "numba.core.registry",
        "numba.core.runtime",
        "numba.core",
        "numba.core.environment",
        "numpy",
        "textwrap"
      ],
      "numba.pycc": [],
      "/tmp/cs-hpc-demo-1/numba/pycc/llvm_types.py": [
        "sys",
        "ctypes",
        "struct",
        "llvmlite.ir"
      ],
      "/tmp/cs-hpc-demo-1/numba/pycc/__init__.py": [
        "warnings",
        "numba.core.errors",
        "cc",
        "decorators",
        "setuptools"
      ],
      "cc": [],
      "/tmp/cs-hpc-demo-1/numba/pycc/platform.py": [
        "setuptools",
        "setuptools.command.build_ext",
        "setuptools.dist",
        "numpy",
        "functools",
        "os",
        "subprocess",
        "sys",
        "tempfile",
        "contextlib",
        "pathlib"
      ],
      "setuptools.dist": [],
      "/tmp/cs-hpc-demo-1/numba/pycc/decorators.py": [
        "re",
        "warnings",
        "numba.core",
        "numba.pycc.compiler"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_support.py": [
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "enum_usecases",
        "unittest"
      ],
      "enum_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_map_filter_reduce.py": [
        "numba",
        "functools",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_llvm_version_check.py": [
        "importlib",
        "sys",
        "unittest",
        "llvmlite",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_builtins.py": [
        "itertools",
        "functools",
        "sys",
        "operator",
        "collections",
        "numpy",
        "unittest",
        "warnings",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/chained_assign_usecases.py": [
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_jitmethod.py": [
        "unittest",
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_inlining.py": [
        "re",
        "numpy",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.core.ir_utils",
        "numba.core.registry",
        "numba.core.inline_closurecall",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "unittest",
        "numba.tests.inlining_usecases"
      ],
      "numba.tests.inlining_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_manipulation.py": [
        "functools",
        "itertools",
        "numpy",
        "unittest",
        "numba",
        "numba.core.errors",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dictobject.py": [
        "sys",
        "warnings",
        "numpy",
        "numba",
        "numba.typed",
        "numba.typed.typedobjectutils",
        "numba.core.errors",
        "numba.core",
        "numba.tests.support",
        "numba.experimental",
        "numba.extending"
      ],
      "numba.typed.typedobjectutils": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_linalg.py": [
        "contextlib",
        "gc",
        "itertools",
        "sys",
        "warnings",
        "numbers",
        "platform",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "matmul_usecase",
        "unittest",
        "numba.np.linalg"
      ],
      "gc": [],
      "matmul_usecase": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_function_type.py": [
        "re",
        "sys",
        "unittest",
        "types",
        "numba",
        "numba.core.config",
        "ctypes",
        "warnings",
        "support",
        "numpy",
        "numba.core",
        "ctypes.util"
      ],
      "support": [],
      "ctypes.util": [],
      "/tmp/cs-hpc-demo-1/numba/tests/parfors_cache_usecases.py": [
        "sys",
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/typedlist_usecases.py": [
        "numba",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_threadsafety.py": [
        "threading",
        "random",
        "numpy",
        "numba",
        "numba.tests.support",
        "numba.core",
        "unittest"
      ],
      "random": [],
      "/tmp/cs-hpc-demo-1/numba/tests/cfunc_cache_usecases.py": [
        "sys",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb_support.py": [
        "os",
        "re",
        "sys",
        "unittest",
        "numba.core",
        "numba.misc.gdb_hook",
        "numba.misc.numba_gdbinfo",
        "pexpect"
      ],
      "numba.misc.gdb_hook": [],
      "numba.misc.numba_gdbinfo": [],
      "pexpect": [],
      "/tmp/cs-hpc-demo-1/numba/tests/overload_usecases.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/enum_usecases.py": [
        "enum"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_debuginfo.py": [
        "collections",
        "inspect",
        "re",
        "numpy",
        "math",
        "textwrap",
        "unittest",
        "warnings",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.core.datamodel",
        "numba.core.errors",
        "llvmlite.binding"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_func_lifetime.py": [
        "gc",
        "weakref",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeinfer.py": [
        "os",
        "sys",
        "subprocess",
        "dis",
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.typeconv",
        "numba.extending",
        "numba.tests.support",
        "numba.tests.test_typeconv",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "numba.core.bytecode",
        "unittest"
      ],
      "numba.tests.test_typeconv": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode.py": [
        "itertools",
        "numba",
        "numba.core",
        "unittest",
        "numba.tests.support",
        "numba.core.errors",
        "numba.cpython.unicode",
        "numba.core.types.functions",
        "numba.extending",
        "numba.core.utils"
      ],
      "numba.cpython.unicode": [],
      "numba.core.types.functions": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_asnumbatype.py": [
        "typing",
        "unittest",
        "contextlib",
        "llvmlite",
        "numba",
        "numba.core",
        "numba.core.datamodel.models",
        "numba.core.errors",
        "numba.core.extending",
        "numba.core.types",
        "numba.core.typing.typeof",
        "numba.core.typing.asnumbatype",
        "numba.experimental.jitclass",
        "numba.tests.support"
      ],
      "numba.experimental.jitclass": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_return_values.py": [
        "math",
        "unittest",
        "numba",
        "numba.core",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_parallel_backend.py": [
        "faulthandler",
        "itertools",
        "multiprocessing",
        "os",
        "random",
        "re",
        "subprocess",
        "sys",
        "textwrap",
        "threading",
        "unittest",
        "numpy",
        "numba",
        "numba.tests.support",
        "queue",
        "numba.testing.main",
        "numba.core",
        "numba.np.ufunc.parallel",
        "numba.np.ufunc",
        "scipy.linalg.cython_lapack"
      ],
      "faulthandler": [],
      "queue": [],
      "numba.testing.main": [],
      "scipy.linalg.cython_lapack": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_nrt.py": [
        "math",
        "os",
        "platform",
        "sys",
        "re",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.runtime",
        "numba.core.extending",
        "numba.core.typing",
        "numba.core.imputils",
        "llvmlite",
        "llvmlite.binding",
        "numba.core.unsafe.nrt",
        "numba.tests.support",
        "numba.core.registry",
        "unittest",
        "ctypes",
        "cffi",
        "tracemalloc"
      ],
      "numba.core.unsafe.nrt": [],
      "tracemalloc": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeguard.py": [
        "unittest",
        "numba.tests.support",
        "typeguard"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_vectorization.py": [
        "platform",
        "numpy",
        "numba",
        "unittest",
        "numba.core",
        "numba.tests.support",
        "llvmlite"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_warnings.py": [
        "os",
        "subprocess",
        "sys",
        "warnings",
        "numpy",
        "unittest",
        "numba",
        "numba.core.errors",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typenames.py": [
        "numpy",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_moved_modules.py": [
        "numba.tests.support",
        "numba.types",
        "numba.core.types",
        "numba.types.misc",
        "numba.types.containers"
      ],
      "numba.types.misc": [],
      "numba.types.containers": [],
      "/tmp/cs-hpc-demo-1/numba/tests/orphaned_semaphore_usecase.py": [
        "multiprocessing",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_mangling.py": [
        "numba.core",
        "numba.core.funcdesc",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_npdatetime.py": [
        "contextlib",
        "itertools",
        "re",
        "unittest",
        "warnings",
        "numpy",
        "numba",
        "numba.np.numpy_support",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support",
        "numba.np",
        "test_np_functions"
      ],
      "test_np_functions": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_fancy_indexing.py": [
        "collections",
        "itertools",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_practical_lowering_issues.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.core.compiler",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "numba.tests.support",
        "numba.core.typing.templates",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/support.py": [
        "cmath",
        "contextlib",
        "collections",
        "enum",
        "gc",
        "math",
        "platform",
        "os",
        "signal",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "threading",
        "time",
        "io",
        "ctypes",
        "multiprocessing",
        "warnings",
        "traceback",
        "uuid",
        "importlib",
        "types",
        "functools",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.typing",
        "numba.core.compiler",
        "numba.core.typed_passes",
        "numba.core.untyped_passes",
        "unittest",
        "numba.core.runtime",
        "numba.np",
        "numba.core.extending",
        "numba.core.datamodel.models",
        "scipy",
        "coverage",
        "scipy.linalg.cython_lapack",
        "scipy.linalg.cython_blas",
        "setuptools",
        "yaml",
        "numba.pycc.platform"
      ],
      "cmath": [],
      "signal": [],
      "scipy.linalg.cython_blas": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_print.py": [
        "sys",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors_passes.py": [
        "unittest",
        "functools",
        "numpy",
        "numba",
        "numba.parfors.parfor",
        "numba.core",
        "numba.core.registry",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ssa.py": [
        "sys",
        "copy",
        "logging",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.compiler_machinery",
        "numba.core.compiler",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.extending",
        "numba.tests.support",
        "numba.core.ir"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_debug.py": [
        "os",
        "platform",
        "re",
        "textwrap",
        "warnings",
        "numpy",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.experimental",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_interproc.py": [
        "gc",
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_target_extension.py": [
        "unittest",
        "numba.tests.support",
        "ctypes",
        "operator",
        "functools",
        "numpy",
        "numba",
        "numba.extending",
        "numba.core.target_extension",
        "numba.core",
        "numba.core.dispatcher",
        "numba.core.descriptors",
        "numba.core.base",
        "numba.core.compiler_lock",
        "numba.core.codegen",
        "numba.core.callwrapper",
        "numba.core.imputils",
        "numba.core.typing.typeof",
        "llvmlite.binding",
        "llvmlite",
        "numba.core.runtime",
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core.typed_passes",
        "numba.core.typing"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeconv.py": [
        "itertools",
        "numba.core",
        "numba.core.typeconv.typeconv",
        "numba.core.typeconv",
        "unittest"
      ],
      "numba.core.typeconv.typeconv": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_np_functions.py": [
        "itertools",
        "math",
        "platform",
        "warnings",
        "functools",
        "textwrap",
        "numpy",
        "numba",
        "numba.core",
        "numba.typed",
        "numba.np.numpy_support",
        "numba.core.errors",
        "numba.core.config",
        "numba.core.utils",
        "numba.np.extensions",
        "numba.tests.support",
        "unittest"
      ],
      "numba.np.extensions": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typedobjectutils.py": [
        "warnings",
        "numba.core",
        "numba.tests.support",
        "numba.typed.typedobjectutils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_tracing.py": [
        "io",
        "logging",
        "unittest",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir_inlining.py": [
        "operator",
        "warnings",
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.core.cpu",
        "numba.core.compiler",
        "numba.core.typed_passes",
        "numba.core.typing",
        "numba.tests.support",
        "inlining_usecases",
        "numba.tests.inlining_usecases",
        "numba.tests"
      ],
      "inlining_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/usecases.py": [
        "math",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_vectorization_type_inference.py": [
        "numba",
        "unittest",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/matmul_usecase.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_make_function_to_jit_function.py": [
        "numba",
        "numba.core",
        "numba.core.extending",
        "numpy",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/complex_usecases.py": [
        "cmath"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_exprs.py": [
        "gc",
        "io",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.compiler",
        "numba.core.registry",
        "numba.tests.support",
        "numba.extending",
        "operator",
        "textwrap",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_python_int.py": [
        "unittest",
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_jitclasses.py": [
        "ctypes",
        "itertools",
        "pickle",
        "random",
        "typing",
        "unittest",
        "collections",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.dispatcher",
        "numba.core.errors",
        "numba.core.runtime.nrt",
        "numba.experimental",
        "numba.experimental.jitclass",
        "numba.experimental.jitclass.base",
        "numba.tests.support",
        "annotation_usecases"
      ],
      "numba.core.runtime.nrt": [],
      "annotation_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_polynomial.py": [
        "gc",
        "itertools",
        "numpy",
        "numpy.polynomial",
        "numba",
        "numba.tests.support",
        "numba.core.errors"
      ],
      "numpy.polynomial": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_firstlinefinder.py": [
        "unittest",
        "linecache",
        "inspect",
        "textwrap",
        "numba",
        "numba.tests.support",
        "numba.misc.firstlinefinder"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_obj_lifetime.py": [
        "collections",
        "weakref",
        "gc",
        "operator",
        "itertools",
        "unittest",
        "numba",
        "numba.core.compiler",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_intwidth.py": [
        "unittest",
        "math",
        "sys",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/cloudpickle_main_class.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_llvm_pass_timings.py": [
        "unittest",
        "numba",
        "numba.tests.support",
        "numba.misc"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_pythonapi.py": [
        "ctypes",
        "unittest",
        "numba.core",
        "numba.core.extending",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_extending.py": [
        "inspect",
        "math",
        "operator",
        "sys",
        "pickle",
        "multiprocessing",
        "ctypes",
        "warnings",
        "re",
        "numpy",
        "llvmlite",
        "numba",
        "numba.core",
        "numba.core.typed_passes",
        "numba.core.registry",
        "numba.core.imputils",
        "numba.tests.support",
        "numba.core.errors",
        "unittest",
        "numba.extending",
        "numba.core.typing.templates",
        "pdlike_usecase",
        "scipy.special.cython_special",
        "overload_usecases",
        "numba.core.typeconv"
      ],
      "pdlike_usecase": [],
      "scipy.special.cython_special": [],
      "overload_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_remove_dead.py": [
        "numba",
        "numba.parfors.parfor",
        "numba.core",
        "numba.core.registry",
        "numba.core.ir_utils",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "numba.core.untyped_passes",
        "numpy",
        "numba.tests.support",
        "unittest",
        "numba.np.linalg"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/serialize_usecases.py": [
        "math",
        "numba",
        "numba.core",
        "numpy",
        "numpy.random"
      ],
      "numpy.random": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_funcdesc.py": [
        "unittest",
        "numba",
        "numba.core.funcdesc",
        "numba.core.compiler",
        "numba.core.itanium_mangler"
      ],
      "numba.core.itanium_mangler": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unsafe_intrinsics.py": [
        "random",
        "numpy",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.cpython.unsafe.tuple",
        "numba.np.unsafe.ndarray",
        "numba.core.unsafe.bytes",
        "numba.core.unsafe.refcount",
        "numba.cpython.unsafe.numbers",
        "numba.core.errors"
      ],
      "numba.core.unsafe.bytes": [],
      "numba.core.unsafe.refcount": [],
      "numba.cpython.unsafe.numbers": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_literal_dispatch.py": [
        "numpy",
        "numba",
        "unittest",
        "numba.tests.support",
        "numba.core",
        "numba.core.typing",
        "numba.core.datamodel",
        "numba.core.extending",
        "numba.misc.special"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_listobject.py": [
        "textwrap",
        "numba",
        "numba.extending",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unpickle_without_module.py": [
        "unittest",
        "pickle",
        "sys",
        "tempfile",
        "pathlib",
        "tmp_module"
      ],
      "tmp_module": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_sys_monitoring.py": [
        "dis",
        "queue",
        "sys",
        "threading",
        "traceback",
        "unittest",
        "collections",
        "unittest.mock",
        "numba.tests.support",
        "numba",
        "numba.core.utils",
        "numba.core.serialize"
      ],
      "unittest.mock": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_gil.py": [
        "ctypes",
        "ctypes.util",
        "os",
        "sys",
        "threading",
        "warnings",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_constants.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core.errors",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/cffi_usecases.py": [
        "sys",
        "numpy",
        "numba.core.typing.cffi_utils",
        "numba.tests.support",
        "numba.core.types",
        "cffi",
        "numba"
      ],
      "numba.core.typing.cffi_utils": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_numbers.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_slices.py": [
        "functools",
        "itertools",
        "sys",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.types.functions",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_mandelbrot.py": [
        "unittest",
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_numpy_support.py": [
        "sys",
        "itertools",
        "numpy",
        "unittest",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support",
        "numba.tests.enum_usecases",
        "numba.np"
      ],
      "numba.tests.enum_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/compile_with_pycc.py": [
        "cmath",
        "numpy",
        "numba",
        "numba.types",
        "numba.pycc",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir.py": [
        "unittest",
        "unittest.case",
        "warnings",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core.untyped_passes"
      ],
      "unittest.case": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_deprecations.py": [
        "warnings",
        "unittest",
        "contextlib",
        "numba",
        "numba.core.errors",
        "numba.tests.support",
        "numba.pycc"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_looplifting.py": [
        "io",
        "numpy",
        "numba.core",
        "numba.core.compiler",
        "numba.tests.support",
        "unittest",
        "numba.core.registry",
        "numba",
        "warnings"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_storeslice.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/recursion_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doctest_usecase.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_init_utils.py": [
        "unittest",
        "numba.tests.support",
        "numba.misc.init_utils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_chrome_trace.py": [
        "os",
        "json",
        "unittest",
        "textwrap",
        "tempfile",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_generators.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.datamodel.testing"
      ],
      "numba.core.datamodel.testing": [],
      "/tmp/cs-hpc-demo-1/numba/tests/dummy_module.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_struct_ref.py": [
        "warnings",
        "numpy",
        "numba",
        "numba.core",
        "numba.experimental",
        "numba.extending",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_recursion.py": [
        "math",
        "warnings",
        "numba",
        "numba.core.errors",
        "numba.tests.support",
        "unittest",
        "numba.tests.recursion_usecases"
      ],
      "numba.tests.recursion_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_operators.py": [
        "copy",
        "itertools",
        "operator",
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.types.functions",
        "numba.tests.support",
        "numba.tests.matmul_usecase"
      ],
      "numba.tests.matmul_usecase": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dictimpl.py": [
        "ctypes",
        "random",
        "numba.tests.support",
        "numba",
        "numba.core.config",
        "numba.core.datamodel.models",
        "numba.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_analysis.py": [
        "collections",
        "types",
        "numpy",
        "numba.core.compiler",
        "numba",
        "numba.core",
        "numba.core.inline_closurecall",
        "numba.tests.support",
        "numba.core.analysis",
        "numba.core.untyped_passes",
        "numba.core.utils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_maxmin.py": [
        "numba",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_exceptions.py": [
        "numpy",
        "sys",
        "traceback",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/__init__.py": [
        "gc",
        "os.path",
        "multiprocessing",
        "sys",
        "time",
        "unittest",
        "warnings",
        "unittest.suite",
        "numba.testing",
        "faulthandler"
      ],
      "unittest.suite": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_comprehension.py": [
        "unittest",
        "numba.tests.support",
        "sys",
        "operator",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.core.types.functions",
        "numba.np.numpy_support",
        "numba.core.inline_closurecall"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/ctypes_usecases.py": [
        "ctypes",
        "sys",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_listimpl.py": [
        "ctypes",
        "struct",
        "numba.tests.support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_locals.py": [
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dicts.py": [
        "numpy",
        "numba",
        "numba.core.errors",
        "unittest",
        "numba.tests.support",
        "numba.core.typing.dictdecl"
      ],
      "numba.core.typing.dictdecl": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_optional.py": [
        "itertools",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_mathlib.py": [
        "itertools",
        "math",
        "sys",
        "unittest",
        "warnings",
        "numpy",
        "numba",
        "numba.tests.support",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ir_utils.py": [
        "numba",
        "numba.tests.support",
        "numba.core.registry",
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.experimental"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_numberctor.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_globals.py": [
        "numpy",
        "numba",
        "numba.extending",
        "numba.tests",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typingerror.py": [
        "math",
        "re",
        "textwrap",
        "operator",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.core.types.functions",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_object_mode.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.core.utils",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_copy_propagate.py": [
        "numba",
        "numba.core",
        "numba.core.registry",
        "numba.core.annotations",
        "numba.core.ir_utils",
        "numba.core.typed_passes",
        "numba.tests.support",
        "numpy",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ctypes.py": [
        "ctypes",
        "sys",
        "threading",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.typing",
        "numba.tests.support",
        "numba.tests.ctypes_usecases",
        "unittest"
      ],
      "numba.tests.ctypes_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_np_randomgen.py": [
        "numba",
        "numpy",
        "sys",
        "itertools",
        "gc",
        "re",
        "numba.tests.support",
        "numba.np.random.generator_methods",
        "numba.np.random.generator_core",
        "numpy.random",
        "numba.core.errors"
      ],
      "numba.np.random.generator_methods": [],
      "numba.np.random.generator_core": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typeof.py": [
        "array",
        "collections",
        "enum",
        "mmap",
        "typing",
        "random",
        "string",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.misc.special",
        "numba.core.dispatcher",
        "numba._dispatcher",
        "numba.tests.support",
        "numba.tests.test_numpy_support",
        "numba.tests.ctypes_usecases",
        "numba.tests.enum_usecases",
        "numba.np",
        "numba.tests"
      ],
      "mmap": [],
      "string": [],
      "numba._dispatcher": [],
      "numba.tests.test_numpy_support": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_usecases.py": [
        "itertools",
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests",
        "numba.tests.support",
        "operator"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_auto_constants.py": [
        "math",
        "sys",
        "numpy",
        "numba",
        "numba.tests.usecases",
        "unittest"
      ],
      "numba.tests.usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_cffi.py": [
        "array",
        "numpy",
        "numba",
        "numba.core.typing.cffi_utils",
        "numba.core",
        "numba.tests.support",
        "numba.tests.cffi_usecases",
        "unittest"
      ],
      "numba.tests.cffi_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_try_except.py": [
        "warnings",
        "dis",
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_sort.py": [
        "copy",
        "itertools",
        "math",
        "random",
        "sys",
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.misc.quicksort",
        "numba.misc.mergesort",
        "numba.misc.timsort"
      ],
      "numba.misc.quicksort": [],
      "numba.misc.mergesort": [],
      "numba.misc.timsort": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_cfunc.py": [
        "ctypes",
        "os",
        "subprocess",
        "sys",
        "collections",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.typing.cffi_utils",
        "numba.tests.support",
        "unittest",
        "numba.np",
        "numba.tests",
        "cffi"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_conversion.py": [
        "gc",
        "itertools",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/errorhandling_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_indexing.py": [
        "decimal",
        "itertools",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.typing",
        "numba.core.types"
      ],
      "decimal": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_pycc.py": [
        "contextlib",
        "importlib",
        "os",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "unittest",
        "ctypes",
        "numpy",
        "llvmlite.binding",
        "numba.core",
        "numba.tests.support",
        "numba.pycc.platform",
        "numba.pycc.decorators",
        "numba.tests",
        "numba"
      ],
      "numba.pycc.decorators": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_byteflow.py": [
        "unittest",
        "numba.tests.support",
        "numba.core.compiler"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/annotation_usecases.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode_names.py": [
        "numba",
        "numba.tests.support",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_findlib.py": [
        "numba.tests.support",
        "numba.misc"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_extended_arg.py": [
        "unittest",
        "dis",
        "struct",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_alignment.py": [
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ndarray_subclasses.py": [
        "builtins",
        "unittest",
        "numbers",
        "functools",
        "numpy",
        "llvmlite",
        "numba",
        "numba.core",
        "numba.core.pythonapi",
        "numba.core.errors",
        "numba.core.registry",
        "numba.extending",
        "numba.np",
        "numba.tests.support",
        "numba.np.arrayobj"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_multi3.py": [
        "random",
        "numpy",
        "numba",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_extending_types.py": [
        "operator",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.core.extending",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_import.py": [
        "unittest",
        "numba.tests.support",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_overlap.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_attr.py": [
        "numpy",
        "unittest",
        "numba.np.numpy_support",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.errors",
        "numba.experimental",
        "ctypes",
        "traceback"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/error_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_methods.py": [
        "itertools",
        "gc",
        "sys",
        "unittest",
        "warnings",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.np.numpy_support",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_conditions_as_predicates.py": [
        "numba.tests.support",
        "numba",
        "numba.typed",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_func_interface.py": [
        "unittest",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_gdb_dwarf.py": [
        "numba.tests.support",
        "numba.tests.gdb_support",
        "unittest.mock",
        "numba.core",
        "numpy",
        "numba",
        "ctypes",
        "unittest",
        "gdb",
        "numba.misc"
      ],
      "numba.tests.gdb_support": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_event.py": [
        "unittest",
        "string",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.utils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_enums.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.tests.support",
        "numba.tests.enum_usecases"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_profiler.py": [
        "cProfile",
        "os",
        "pstats",
        "subprocess",
        "sys",
        "numpy",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "cProfile": [],
      "pstats": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_numpyadapt.py": [
        "ctypes",
        "numpy",
        "unittest",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_mixed_tuple_unroller.py": [
        "collections",
        "numpy",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.testing",
        "numba.core.extending",
        "numba.core.compiler_machinery",
        "numba.core.compiler",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.ir_utils",
        "numba.core.types.functions",
        "textwrap"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_stencils.py": [
        "numpy",
        "contextlib",
        "numba",
        "numba.core",
        "numba.core.compiler",
        "numba.core.cpu",
        "numba.tests.support",
        "numba.core.errors",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_annotations.py": [
        "re",
        "io",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest",
        "jinja2",
        "pygments"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/cache_usecases.py": [
        "sys",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.ctypes_usecases",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_sysinfo.py": [
        "platform",
        "unittest",
        "unittest.mock",
        "itertools",
        "datetime",
        "contextlib",
        "io",
        "numba.tests.support",
        "numba.misc.numba_sysinfo"
      ],
      "numba.misc.numba_sysinfo": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dataflow.py": [
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_doctest.py": [
        "doctest",
        "unittest",
        "numba.tests.support"
      ],
      "doctest": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_tuples.py": [
        "collections",
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_svml.py": [
        "math",
        "numpy",
        "numbers",
        "re",
        "traceback",
        "multiprocessing",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_flow_control.py": [
        "itertools",
        "unittest",
        "numba",
        "numba.core.controlflow",
        "numba.core",
        "numba.core.bytecode",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_iterators.py": [
        "itertools",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_buffer_protocol.py": [
        "array",
        "numpy",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/inlining_usecases.py": [
        "numba",
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_casting.py": [
        "numpy",
        "numba.core.errors",
        "numba",
        "numba.core",
        "struct",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_lists.py": [
        "collections",
        "contextlib",
        "itertools",
        "math",
        "sys",
        "ctypes",
        "numpy",
        "numba",
        "unittest",
        "numba.core",
        "numba.tests.support",
        "numba.experimental",
        "numba.core.extending",
        "copy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_blackscholes.py": [
        "math",
        "numpy",
        "unittest",
        "numba",
        "numba.extending",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_analysis.py": [
        "itertools",
        "numpy",
        "sys",
        "collections",
        "io",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.parfors.array_analysis",
        "numba.core.compiler",
        "numba.core.ir_utils",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "numba.experimental",
        "unittest",
        "numba.stencils.stencil",
        "numba.parfors.parfor",
        "numba.parfors"
      ],
      "numba.parfors.array_analysis": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_config.py": [
        "os",
        "tempfile",
        "textwrap",
        "unittest",
        "numba.tests.support",
        "numba.core",
        "yaml",
        "numba",
        "numba.core.codegen"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_serialize.py": [
        "contextlib",
        "gc",
        "pickle",
        "runpy",
        "subprocess",
        "sys",
        "unittest",
        "multiprocessing",
        "numba",
        "numba.core.errors",
        "numba.tests.support",
        "numba.core.target_extension",
        "numba.cloudpickle",
        "serialize_usecases",
        "numba.core.serialize"
      ],
      "numba.cloudpickle": [],
      "serialize_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_typedlist.py": [
        "sys",
        "subprocess",
        "itertools",
        "textwrap",
        "numpy",
        "numba",
        "numba.core",
        "numba.typed",
        "numba.core.errors",
        "numba.tests.support",
        "numba.core.unsafe.refcount",
        "numba.experimental",
        "numba.tests.typedlist_usecases"
      ],
      "numba.tests.typedlist_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_boundscheck.py": [
        "numpy",
        "numba.cuda.testing",
        "numba",
        "numba.core.types",
        "numba.tests.support",
        "numba.core",
        "unittest"
      ],
      "numba.cuda.testing": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_repr.py": [
        "unittest",
        "numpy",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_heapq.py": [
        "heapq",
        "itertools",
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_iteration.py": [
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_fastmath.py": [
        "math",
        "numpy",
        "numba.tests.support",
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_numconv.py": [
        "itertools",
        "unittest",
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/threading_backend_usecases.py": [
        "signal",
        "sys",
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_runtests.py": [
        "os",
        "sys",
        "subprocess",
        "numba",
        "unittest",
        "itertools",
        "git",
        "yaml"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_errormodels.py": [
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_caching.py": [
        "importlib",
        "inspect",
        "multiprocessing",
        "os",
        "shutil",
        "stat",
        "subprocess",
        "sys",
        "traceback",
        "unittest",
        "warnings",
        "zipfile",
        "pathlib",
        "llvmlite.binding",
        "numpy",
        "math",
        "numba",
        "numba.core",
        "numba.core.caching",
        "numba.core.errors",
        "numba.parfors",
        "numba.tests.support",
        "numba.core.registry",
        "ipykernel",
        "dummy_module",
        "test_module"
      ],
      "stat": [],
      "ipykernel": [],
      "dummy_module": [],
      "test_module": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_recarray_usecases.py": [
        "sys",
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_target_overloadselector.py": [
        "itertools",
        "collections",
        "unittest",
        "numba.core.base",
        "numba.core.registry",
        "numba.core.imputils",
        "numba.core",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_compile_cache.py": [
        "unittest",
        "contextlib",
        "llvmlite",
        "numba.core",
        "numba.core.registry"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_gdb_bindings.py": [
        "os",
        "platform",
        "re",
        "subprocess",
        "sys",
        "threading",
        "itertools",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.tests.gdb_support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_reductions.py": [
        "itertools",
        "numpy",
        "numba",
        "numba.np.numpy_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dyn_func.py": [
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_refop_pruning.py": [
        "unittest",
        "warnings",
        "contextlib",
        "numpy",
        "llvmlite.binding",
        "numba",
        "numba.core.errors",
        "numba.core.codegen",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_getitem_on_types.py": [
        "unittest",
        "itertools",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unpack_sequence.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_cgutils.py": [
        "contextlib",
        "ctypes",
        "struct",
        "sys",
        "llvmlite.ir",
        "numpy",
        "unittest",
        "numba.core",
        "numba.core.compiler_lock",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_api.py": [
        "warnings",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_misc_coverage_support.py": [
        "unittest",
        "unittest.mock",
        "numba.tests.support",
        "numba",
        "numba.core",
        "numba.misc.coverage_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_compiler_lock.py": [
        "unittest",
        "numba.core.compiler_lock",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_complex.py": [
        "itertools",
        "math",
        "sys",
        "numba",
        "numba.tests.support",
        "complex_usecases",
        "unittest"
      ],
      "complex_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_jit_module.py": [
        "os",
        "sys",
        "inspect",
        "contextlib",
        "numpy",
        "logging",
        "io",
        "unittest",
        "numba.tests.support",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_hashing.py": [
        "unittest",
        "os",
        "sys",
        "subprocess",
        "collections",
        "textwrap",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.cpython.unicode",
        "numba.cpython",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_interpreter.py": [
        "unittest",
        "numba",
        "numba.extending",
        "numba.core",
        "numba.core.errors",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_itanium_mangler.py": [
        "numba",
        "numba.core.types",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors_caching.py": [
        "os.path",
        "subprocess",
        "sys",
        "numpy",
        "numba.tests.support",
        "test_caching"
      ],
      "test_caching": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_sys_stdin_assignment.py": [
        "sys",
        "unittest",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_datamodel.py": [
        "llvmlite",
        "numba.core",
        "numba.core.datamodel.testing",
        "numba.core.datamodel.manager",
        "numba.core.datamodel.models",
        "unittest",
        "numpy",
        "numba"
      ],
      "numba.core.datamodel.manager": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_closure.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core.errors",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dispatcher.py": [
        "multiprocessing",
        "platform",
        "threading",
        "pickle",
        "weakref",
        "itertools",
        "io",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.np.numpy_support",
        "numba.core.dispatcher",
        "numba.extending",
        "numba.testing.main",
        "unittest",
        "jinja2",
        "pygments"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_ufuncs.py": [
        "functools",
        "itertools",
        "sys",
        "warnings",
        "threading",
        "operator",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.np.numpy_support",
        "numba.core.errors",
        "numba.tests.support",
        "numba.core.typing.npydecl",
        "numba.np",
        "numba.core.registry",
        "numba.core.base"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pdlike_usecase.py": [
        "numpy",
        "numba.core",
        "numba.core.datamodel",
        "numba.core.extending",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_range.py": [
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.inline_closurecall"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_cli.py": [
        "os",
        "subprocess",
        "sys",
        "threading",
        "json",
        "tempfile",
        "unittest",
        "numba.tests.support",
        "numba.misc.numba_sysinfo",
        "numba.tests.gdb_support",
        "numba.misc.numba_gdbinfo"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_optimisation_pipelines.py": [
        "unittest",
        "numba.tests.support",
        "numba",
        "numba.core",
        "llvmlite.binding"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_unicode_array.py": [
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.typed",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_compiler_flags.py": [
        "re",
        "numba",
        "numba.core.extending",
        "numba.core.targetconfig",
        "numba.core.compiler",
        "numba.core",
        "numba.core.funcdesc",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/parfor_iss9490_usecase.py": [
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_new_type_system.py": [
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_num_threads.py": [
        "__future__",
        "sys",
        "os",
        "re",
        "multiprocessing",
        "unittest",
        "numpy",
        "numba",
        "numba.np.ufunc.parallel",
        "numba.core.errors",
        "numba.tests.support",
        "numba.tests.test_parallel_backend"
      ],
      "numba.tests.test_parallel_backend": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_nrt_refct.py": [
        "gc",
        "numpy",
        "unittest",
        "numba",
        "numba.core.runtime",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_nested_calls.py": [
        "numba",
        "numba.core",
        "numba.extending",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_chained_assign.py": [
        "numba",
        "unittest",
        "numpy",
        "copy",
        "numba.tests.support",
        "numba.tests.chained_assign_usecases"
      ],
      "numba.tests.chained_assign_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_withlifting.py": [
        "copy",
        "warnings",
        "numpy",
        "numba",
        "numba.core.transforms",
        "numba.core.withcontexts",
        "numba.core.bytecode",
        "numba.core.interpreter",
        "numba.core",
        "numba.core.registry",
        "numba.core.compiler",
        "numba.core.extending",
        "numba.tests.support",
        "numba.core.utils",
        "numba.experimental",
        "unittest",
        "scipy",
        "dis"
      ],
      "numba.core.interpreter": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_errorhandling.py": [
        "numpy",
        "os",
        "warnings",
        "numba",
        "numba.core",
        "numba.experimental",
        "numba.extending",
        "numba.core.compiler",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba.core.compiler_machinery",
        "numba.core.types.functions",
        "numba.tests.support",
        "unittest",
        "numba.tests.errorhandling_usecases",
        "numba.tests.ctypes_usecases",
        "numba.tests"
      ],
      "numba.tests.errorhandling_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_parfors.py": [
        "math",
        "os",
        "re",
        "dis",
        "numbers",
        "platform",
        "sys",
        "subprocess",
        "types",
        "warnings",
        "functools",
        "numpy",
        "numpy.random",
        "operator",
        "collections",
        "copy",
        "itertools",
        "numba.parfors.parfor",
        "numba",
        "numba.core",
        "numba.typed",
        "numba.extending",
        "numba.core.registry",
        "numba.core.annotations",
        "numba.core.ir_utils",
        "numba.np.unsafe.ndarray",
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core.typed_passes",
        "numba.tests.support",
        "numba.core.extending",
        "numba.core.bytecode",
        "cmath",
        "unittest",
        "numba.types",
        "difflib"
      ],
      "difflib": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_entrypoints.py": [
        "sys",
        "unittest",
        "types",
        "warnings",
        "os",
        "subprocess",
        "threading",
        "numba",
        "numba.tests.support",
        "numba.testing.main",
        "importlib",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_pipeline.py": [
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core.untyped_passes",
        "numba.core.typed_passes",
        "numba",
        "numba.core",
        "numba.core.ir",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_sets.py": [
        "unittest",
        "collections",
        "contextlib",
        "itertools",
        "random",
        "numba.core.errors",
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_help.py": [
        "sys",
        "subprocess",
        "types",
        "os.path",
        "numpy",
        "builtins",
        "numba.core",
        "numba.tests.support",
        "numba.misc.help.inspector"
      ],
      "numba.misc.help.inspector": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_dyn_array.py": [
        "contextlib",
        "sys",
        "numpy",
        "random",
        "re",
        "threading",
        "gc",
        "numba.core.errors",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.utils",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_objects.py": [
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_record_dtype.py": [
        "numpy",
        "ctypes",
        "numba",
        "numba.core",
        "numba.core.itanium_mangler",
        "numba.core.errors",
        "unittest",
        "numba.np",
        "numba.tests.support",
        "llvmlite.binding"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_types.py": [
        "collections",
        "gc",
        "os",
        "operator",
        "sys",
        "weakref",
        "numpy",
        "numba.core",
        "numba.core.types.abstract",
        "numba.core.types.functions",
        "numba.core.typing.templates",
        "numba",
        "numba.core.extending",
        "numba.tests.support",
        "numba.tests.enum_usecases",
        "unittest",
        "numba.np",
        "cPickle",
        "pickle",
        "numba.core.typing",
        "numba.tests.ctypes_usecases"
      ],
      "numba.core.types.abstract": [],
      "cPickle": [],
      "/tmp/cs-hpc-demo-1/numba/tests/test_codegen.py": [
        "warnings",
        "base64",
        "ctypes",
        "pickle",
        "re",
        "subprocess",
        "sys",
        "weakref",
        "llvmlite.binding",
        "unittest",
        "numba",
        "numba.core.codegen",
        "numba.core.compiler_lock",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_random.py": [
        "collections",
        "functools",
        "math",
        "multiprocessing",
        "os",
        "random",
        "subprocess",
        "sys",
        "threading",
        "itertools",
        "textwrap",
        "numpy",
        "unittest",
        "numba",
        "numba.core",
        "numba.tests.support",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_array_return.py": [
        "numpy",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/test_nan.py": [
        "unittest",
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/testing/__init__.py": [
        "os",
        "sys",
        "functools",
        "unittest",
        "traceback",
        "fnmatch",
        "os.path",
        "main",
        "numba.core",
        "xmlrunner"
      ],
      "fnmatch": [],
      "main": [],
      "xmlrunner": [],
      "/tmp/cs-hpc-demo-1/numba/testing/loader.py": [
        "unittest",
        "os.path"
      ],
      "/tmp/cs-hpc-demo-1/numba/testing/_runtests.py": [
        "json",
        "re",
        "logging",
        "numba.testing",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/testing/notebook.py": [
        "unittest",
        "ipykernel.tests",
        "nbformat.converter",
        "nbformat.reader",
        "re",
        "json",
        "copy",
        "queue",
        "Queue"
      ],
      "ipykernel.tests": [],
      "nbformat.converter": [],
      "nbformat.reader": [],
      "Queue": [],
      "/tmp/cs-hpc-demo-1/numba/testing/main.py": [
        "collections",
        "contextlib",
        "cProfile",
        "inspect",
        "gc",
        "multiprocessing",
        "os",
        "random",
        "sys",
        "time",
        "unittest",
        "warnings",
        "zlib",
        "traceback",
        "functools",
        "io",
        "loader",
        "numba.core",
        "numba.misc",
        "numba.cuda.testing",
        "Queue",
        "git"
      ],
      "loader": [],
      "/tmp/cs-hpc-demo-1/numba/testing/__main__.py": [
        "sys",
        "numba.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/setobj.py": [
        "collections",
        "contextlib",
        "math",
        "operator",
        "functools",
        "llvmlite",
        "numba.core",
        "numba.core.imputils",
        "numba.misc",
        "numba.cpython",
        "numba.core.errors",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/printimpl.py": [
        "numba.core",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/cmathimpl.py": [
        "cmath",
        "math",
        "numba.core.imputils",
        "numba.core",
        "numba.core.typing",
        "numba.cpython",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/tupleobj.py": [
        "operator",
        "numba.core.imputils",
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/mathimpl.py": [
        "math",
        "operator",
        "sys",
        "numpy",
        "llvmlite.ir",
        "numba.core.imputils",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.core.typing",
        "numba.cpython.unsafe.numbers"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/unicode.py": [
        "sys",
        "operator",
        "numpy",
        "llvmlite.ir",
        "numba.core.cgutils",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core.datamodel",
        "numba.core",
        "numba.core.utils",
        "numba.core.pythonapi",
        "numba._helperlib",
        "numba.cpython.hashing",
        "numba.core.unsafe.bytes",
        "numba.core.errors",
        "numba.cpython.unicode_support",
        "numba.cpython",
        "ctypes"
      ],
      "numba.cpython.hashing": [],
      "numba.cpython.unicode_support": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/heapq.py": [
        "heapq",
        "numba.core",
        "numba.core.errors",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/builtins.py": [
        "collections",
        "math",
        "functools",
        "numpy",
        "operator",
        "warnings",
        "llvmlite",
        "numba.core.imputils",
        "numba.core",
        "numba.core.extending",
        "numba.core.typeconv",
        "numba.core.errors",
        "numba.core.typing.templates",
        "numba.misc.special",
        "numba.core.typing.asnumbatype",
        "numba.core.typing.builtins",
        "numba.extending"
      ],
      "numba.core.typing.builtins": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/randomimpl.py": [
        "math",
        "random",
        "numpy",
        "llvmlite",
        "numba.core.cgutils",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core.typing",
        "numba.core",
        "numba.core.errors",
        "numba.np.random._constants"
      ],
      "numba.np.random._constants": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/slicing.py": [
        "itertools",
        "llvmlite",
        "numba.core",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/numbers.py": [
        "math",
        "numbers",
        "numpy",
        "operator",
        "llvmlite",
        "llvmlite.ir",
        "numba.core.imputils",
        "numba.core",
        "numba.core.extending",
        "numba.cpython.unsafe.numbers",
        "numba.cpython"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/listobj.py": [
        "math",
        "operator",
        "functools",
        "llvmlite",
        "numba.core",
        "numba.core.imputils",
        "numba.core.extending",
        "numba.misc",
        "numba.cpython",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/charseq.py": [
        "operator",
        "numpy",
        "llvmlite",
        "numba.core",
        "numba.core.extending",
        "numba.core.cgutils",
        "numba.cpython"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/rangeobj.py": [
        "operator",
        "numba",
        "numba.core",
        "numba.core.imputils",
        "numba.core.typing",
        "numba.core.extending",
        "numba.parfors.parfor"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/unicode_support.py": [
        "collections",
        "enum",
        "llvmlite.ir",
        "numpy",
        "numba.core",
        "numba.core.imputils",
        "numba.core.extending",
        "numba.core.errors",
        "numba.cpython.unicode"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/iterators.py": [
        "numba.core",
        "numba.core.imputils"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/enumimpl.py": [
        "operator",
        "numba.core.imputils",
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/hashing.py": [
        "math",
        "numpy",
        "sys",
        "ctypes",
        "warnings",
        "collections",
        "llvmlite.binding",
        "llvmlite",
        "numba",
        "numba.core.extending",
        "numba.core",
        "numba.core.unsafe.bytes",
        "numba.cpython.randomimpl",
        "numba.cpython.unicode"
      ],
      "numba.cpython.randomimpl": [],
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor_lowering_utils.py": [
        "collections",
        "numba.core",
        "numba.core.typing"
      ],
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor_lowering.py": [
        "copy",
        "operator",
        "types",
        "warnings",
        "dataclasses",
        "llvmlite.ir",
        "numpy",
        "numba",
        "numba.parfors",
        "numba.core",
        "numba.core.ir_utils",
        "numba.core.typing",
        "numba.parfors.parfor",
        "numba.core.errors",
        "numba.parfors.parfor_lowering_utils",
        "numba.np.ufunc.parallel",
        "numba.core.compiler_machinery"
      ],
      "numba.parfors.parfor_lowering_utils": [],
      "/tmp/cs-hpc-demo-1/numba/parfors/parfor.py": [
        "types",
        "sys",
        "math",
        "os",
        "textwrap",
        "copy",
        "inspect",
        "linecache",
        "functools",
        "collections",
        "contextlib",
        "operator",
        "dataclasses",
        "warnings",
        "llvmlite",
        "numba.core.imputils",
        "numba.core.ir",
        "numba.core",
        "numba",
        "numba.np.npdatetime_helpers",
        "numba.np.numpy_support",
        "numba.core.typing.templates",
        "numba.stencils.stencilparfor",
        "numba.core.extending",
        "numba.core.ir_utils",
        "numba.core.analysis",
        "numba.core.controlflow",
        "numba.core.typing",
        "numba.core.types.functions",
        "numba.parfors.array_analysis",
        "numpy",
        "numba.parfors",
        "numba.cpython.builtins",
        "numba.stencils",
        "numba.core.inline_closurecall"
      ],
      "numba.np.npdatetime_helpers": [],
      "numba.stencils.stencilparfor": [],
      "numba.cpython.builtins": [],
      "numba.stencils": [],
      "/tmp/cs-hpc-demo-1/numba/parfors/__init__.py": [
        "numba.parfors"
      ],
      "/tmp/cs-hpc-demo-1/numba/parfors/array_analysis.py": [
        "numpy",
        "operator",
        "numba.core",
        "numba.core.ir_utils",
        "numba.core.analysis",
        "numba.core.typing",
        "copy",
        "numba.core.extending",
        "llvmlite",
        "numba.stencils.stencil"
      ],
      "/tmp/cs-hpc-demo-1/numba/cext/__init__.py": [
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/scripts/generate_lower_listing.py": [
        "subprocess",
        "os.path",
        "collections",
        "inspect",
        "functools",
        "numba",
        "numba.core.registry",
        "StringIO",
        "io"
      ],
      "StringIO": [],
      "/tmp/cs-hpc-demo-1/numba/scripts/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/typed/typedlist.py": [
        "collections.abc",
        "numba.core.types",
        "numba.core.imputils",
        "numba.core.dispatcher",
        "numba.core",
        "numba",
        "numba.core.extending",
        "numba.typed",
        "numba.core.errors",
        "numba.core.typing.templates",
        "typing",
        "inspect"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/dictimpl.py": [
        "numba.core",
        "numba.core.imputils",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/__init__.py": [
        "importlib"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/listobject.py": [
        "operator",
        "enum",
        "llvmlite",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core",
        "numba.core.types",
        "numba.core.errors",
        "numba.typed.typedobjectutils",
        "numba.cpython",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/dictobject.py": [
        "ctypes",
        "operator",
        "enum",
        "llvmlite",
        "numba",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core",
        "numba.core.types",
        "numba.core.errors",
        "numba.typed.typedobjectutils",
        "numba.typed",
        "numba.cpython.unicode"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/typedobjectutils.py": [
        "operator",
        "warnings",
        "llvmlite",
        "numba.core",
        "numba.core.registry",
        "numba.core.typeconv",
        "numba.core.extending",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/typed/typeddict.py": [
        "collections.abc",
        "numba.core.types",
        "numba.core.imputils",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.typed",
        "numba.core.typing"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc_db.py": [
        "numpy",
        "sys",
        "numba.np",
        "numba.np.math",
        "numba.np.numpy_support"
      ],
      "numba.np.math": [],
      "/tmp/cs-hpc-demo-1/numba/np/npyimpl.py": [
        "math",
        "sys",
        "itertools",
        "collections",
        "llvmlite.ir",
        "numpy",
        "operator",
        "numba.np",
        "numba.np.ufunc.sigparse",
        "numba.core.imputils",
        "numba.core",
        "numba.np.numpy_support",
        "numba.np.arrayobj",
        "numba.core.typing",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/numpy_support.py": [
        "collections",
        "ctypes",
        "re",
        "numpy",
        "numba.core",
        "numba.core.typing.templates",
        "numba.np",
        "numba.core.errors",
        "numba.core.cgutils",
        "numba.core.typing.ctypes_utils"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/np/extensions.py": [
        "numba.np.arraymath"
      ],
      "numba.np.arraymath": [],
      "/tmp/cs-hpc-demo-1/numba/np/arraymath.py": [
        "math",
        "collections",
        "operator",
        "warnings",
        "llvmlite.ir",
        "numpy",
        "numba.core",
        "numba.core.extending",
        "numba.np.numpy_support",
        "numba.core.imputils",
        "numba.np.arrayobj",
        "numba.np.linalg",
        "numba.core.errors",
        "numba.cpython.unsafe.tuple"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/linalg.py": [
        "contextlib",
        "warnings",
        "llvmlite",
        "numpy",
        "operator",
        "numba.core.imputils",
        "numba.core.typing",
        "numba.core.extending",
        "numba.core",
        "numba.core.errors",
        "arrayobj",
        "numba.np",
        "scipy.linalg.cython_blas",
        "scipy.linalg.cython_lapack"
      ],
      "arrayobj": [],
      "/tmp/cs-hpc-demo-1/numba/np/npdatetime_helpers.py": [
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/npyfuncs.py": [
        "math",
        "llvmlite.ir",
        "numpy",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core",
        "numba.np",
        "numba.np.math",
        "numba.np.numpy_support",
        "inspect"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/arrayobj.py": [
        "functools",
        "math",
        "operator",
        "textwrap",
        "llvmlite",
        "llvmlite.ir",
        "numpy",
        "numba",
        "numba.core",
        "numba.np.numpy_support",
        "numba.core.imputils",
        "numba.core.typing",
        "numba.core.types",
        "numba.core.extending",
        "numba.misc",
        "numba.cpython",
        "numba.cpython.charseq",
        "numba.cpython.unsafe.tuple",
        "numba.core.typing.npydecl"
      ],
      "numba.cpython.charseq": [],
      "/tmp/cs-hpc-demo-1/numba/np/npdatetime.py": [
        "numpy",
        "operator",
        "llvmlite.ir",
        "numba.core",
        "numba.core.cgutils",
        "numba.core.imputils",
        "numba.np",
        "numba.extending",
        "numba.core.config",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/dufunc.py": [
        "functools",
        "operator",
        "warnings",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.core.typing",
        "numba.core.typing.templates",
        "numba.cpython.unsafe.tuple",
        "numba.np.ufunc",
        "numba.np.ufunc.ufunc_base",
        "numba.parfors",
        "numba.np",
        "typing",
        "llvmlite",
        "numba.core.compiler_lock",
        "numba.np.arrayobj"
      ],
      "numba.np.ufunc.ufunc_base": [],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/ufuncbuilder.py": [
        "inspect",
        "warnings",
        "contextlib",
        "numba.core",
        "numba.core.decorators",
        "numba.core.descriptors",
        "numba.core.extending",
        "numba.core.errors",
        "numba.core.options",
        "numba.core.registry",
        "numba.core.target_extension",
        "numba.np.numpy_support",
        "numba.np.ufunc",
        "numba.np.ufunc.sigparse",
        "numba.np.ufunc.wrappers",
        "numba.core.caching",
        "numba.core.compiler_lock"
      ],
      "numba.np.ufunc.wrappers": [],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/sigparse.py": [
        "tokenize",
        "string"
      ],
      "tokenize": [],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/__init__.py": [
        "numba.np.ufunc.decorators",
        "numba.np.ufunc._internal",
        "numba.np.ufunc",
        "numba.np.ufunc.parallel",
        "numba.cuda.vectorizers"
      ],
      "numba.np.ufunc.decorators": [],
      "numba.np.ufunc._internal": [],
      "numba.cuda.vectorizers": [],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/gufunc.py": [
        "numba",
        "numba.core",
        "numba.np.ufunc.ufuncbuilder",
        "numba.np.ufunc.sigparse",
        "numba.np.ufunc.ufunc_base",
        "numba.np.numpy_support",
        "numba.core.typing",
        "numba.core.typing.templates",
        "functools",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/array_exprs.py": [
        "ast",
        "collections",
        "contextlib",
        "sys",
        "types",
        "numpy",
        "operator",
        "numba.core",
        "numba.core.typing",
        "numba.np.ufunc.dufunc",
        "numba.np"
      ],
      "numba.np.ufunc.dufunc": [],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/wrappers.py": [
        "collections",
        "numpy",
        "llvmlite.ir",
        "llvmlite",
        "numba.core",
        "numba.core.compiler_lock",
        "numba.core.caching"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/parallel.py": [
        "os",
        "sys",
        "warnings",
        "threading",
        "ctypes",
        "numpy",
        "llvmlite.binding",
        "llvmlite",
        "numba.np.numpy_support",
        "numba.core",
        "numba.core.typing",
        "numba.np.ufunc.wrappers",
        "numba.np.ufunc",
        "numba.extending",
        "numba.core.config",
        "multiprocessing"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/ufunc_base.py": [
        "numba.np",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/ufunc/decorators.py": [
        "inspect",
        "numba.np.ufunc",
        "numba.np.ufunc.parallel",
        "numba.core.registry"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/math/cmathimpl.py": [
        "cmath",
        "math",
        "numba.core.imputils",
        "numba.core",
        "numba.core.typing",
        "numba.cpython",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/math/mathimpl.py": [
        "math",
        "operator",
        "sys",
        "numpy",
        "llvmlite.ir",
        "numba.core.imputils",
        "numba.core",
        "numba.core.extending",
        "numba.core.typing",
        "numba.cpython.unsafe.numbers"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/math/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/np/math/numbers.py": [
        "math",
        "numbers",
        "numpy",
        "llvmlite",
        "llvmlite.ir",
        "numba.core.imputils",
        "numba.core",
        "numba.cpython.unsafe.numbers",
        "numba.cpython"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/unsafe/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/np/unsafe/ndarray.py": [
        "numba.core",
        "numba.core.cgutils",
        "numba.core.extending",
        "numba.core.imputils",
        "numba.core.errors",
        "numba.cpython.unsafe.tuple",
        "numba.np.arrayobj"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/random/_constants.py": [
        "numpy",
        "ctypes"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/random/generator_methods.py": [
        "numpy",
        "numba.core",
        "numba.core.extending",
        "numba.np.numpy_support",
        "numba.np.random.generator_core",
        "numba.core.errors",
        "numba.core.types.containers",
        "numba.np.random.distributions",
        "numba.np.random"
      ],
      "numba.core.types.containers": [],
      "numba.np.random.distributions": [],
      "/tmp/cs-hpc-demo-1/numba/np/random/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/np/random/random_methods.py": [
        "numpy",
        "numba",
        "numba.core.extending",
        "numba.np.random._constants",
        "numba.np.random.generator_core"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/random/distributions.py": [
        "numpy",
        "numba.core.extending",
        "numba.np.random._constants",
        "numba.np.random.generator_core",
        "numba",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/random/generator_core.py": [
        "llvmlite",
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/polynomial_functions.py": [
        "numpy",
        "numpy.polynomial",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/np/polynomial/polynomial_core.py": [
        "numba.extending",
        "numba.core",
        "warnings",
        "numba.core.errors",
        "numpy.polynomial.polynomial",
        "contextlib",
        "numpy",
        "llvmlite"
      ],
      "numpy.polynomial.polynomial": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/tuple.py": [
        "numba.core",
        "numba.core.cgutils",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/cpython/unsafe/numbers.py": [
        "numba.core",
        "numba.core.extending",
        "llvmlite"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_break_on_symbol_version.py": [
        "numba",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_basic.py": [
        "numba",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/__init__.py": [
        "os.path",
        "unittest",
        "unittest.suite",
        "numba.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_break_on_symbol.py": [
        "numba",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_pretty_print.py": [
        "numba",
        "numpy",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "numba.misc.numba_gdbinfo",
        "unittest",
        "re"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_conditional_breakpoint.py": [
        "numba",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/gdb/test_array_arg.py": [
        "numba",
        "numpy",
        "numba.tests.gdb_support",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_setuptools.py": [
        "setuptools",
        "source_module"
      ],
      "source_module": [],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/source_module.py": [
        "numpy",
        "numba.pycc"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_distutils.py": [
        "setuptools",
        "source_module"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_setuptools_nested.py": [
        "setuptools",
        "nested.source_module"
      ],
      "nested.source_module": [],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/setup_distutils_nested.py": [
        "setuptools",
        "nested.source_module"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_rec_array.py": [
        "unittest",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_interval_example.py": [
        "unittest",
        "numba",
        "numba.extending",
        "numba.core",
        "contextlib"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_llvm_pass_timings.py": [
        "unittest",
        "numba.tests.support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_literal_container_usage.py": [
        "unittest",
        "numba.tests.support",
        "numba",
        "numpy",
        "numba.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_literally_usage.py": [
        "unittest",
        "numba.tests.support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/__init__.py": [
        "os.path",
        "unittest",
        "unittest.suite",
        "numba.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_numpy_generators.py": [
        "unittest",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_typed_list_usage.py": [
        "unittest",
        "numba.tests.support",
        "numba",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_structref_usage.py": [
        "unittest",
        "numpy",
        "numba",
        "numba.core",
        "numba.experimental",
        "numba.tests.support",
        "numba.core.extending",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_parallel_chunksize.py": [
        "unittest",
        "numba.tests.support",
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_typed_dict_usage.py": [
        "unittest",
        "numba.tests.support",
        "numpy",
        "numba",
        "numba.core",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_examples.py": [
        "sys",
        "unittest",
        "numba.tests.support",
        "numba.core.config",
        "numba.np.numpy_support",
        "timeit",
        "numpy",
        "numba",
        "math",
        "threading",
        "matplotlib.pylab"
      ],
      "matplotlib.pylab": [],
      "/tmp/cs-hpc-demo-1/numba/tests/doc_examples/test_jitclass.py": [
        "unittest",
        "numba.tests.support",
        "numpy",
        "numba",
        "numba.experimental",
        "typing",
        "numba.typed"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_ufuncbuilding.py": [
        "pickle",
        "unittest",
        "numpy",
        "numpy.testing",
        "numba.np.ufunc.ufuncbuilder",
        "numba",
        "numba.np.ufunc",
        "numba.np.ufunc.dufunc",
        "numba.tests.support",
        "numba.core",
        "numba.tests.npyufunc.ufuncbuilding_usecases"
      ],
      "numpy.testing": [],
      "numba.tests.npyufunc.ufuncbuilding_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_errors.py": [
        "contextlib",
        "sys",
        "numpy",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/__init__.py": [
        "os.path",
        "unittest",
        "unittest.suite",
        "numba.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_vectorize_decor.py": [
        "math",
        "numpy",
        "numba",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/cache_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_update_inplace.py": [
        "__future__",
        "unittest",
        "numpy",
        "numba",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_ufunc_issues.py": [
        "time",
        "ctypes",
        "numpy",
        "numba.tests.support",
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_dufunc.py": [
        "functools",
        "itertools",
        "pickle",
        "textwrap",
        "warnings",
        "numpy",
        "numba",
        "numba.tests.support",
        "numba.core.errors",
        "unittest",
        "numba.np.ufunc",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_env_variable.py": [
        "numba.np.ufunc.parallel",
        "os",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_parallel_low_work.py": [
        "numpy",
        "numba",
        "numba.np.ufunc",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_ufunc.py": [
        "numpy",
        "numba",
        "numba.np.ufunc",
        "numba.core.errors",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_caching.py": [
        "sys",
        "os.path",
        "re",
        "subprocess",
        "numpy",
        "numba.tests.support",
        "numba.tests.test_caching",
        "numba.core",
        "unittest"
      ],
      "numba.tests.test_caching": [],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/ufuncbuilding_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/npyufunc/test_gufunc.py": [
        "unittest",
        "pickle",
        "numpy",
        "numba",
        "numba.core.errors",
        "numba.np.ufunc",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/nested/source_module.py": [
        "numpy",
        "numba.pycc"
      ],
      "/tmp/cs-hpc-demo-1/numba/tests/pycc_distutils_usecase/nested/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/reduction.py": [
        "numba.np.numpy_support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/kernels/transpose.py": [
        "numba",
        "numba.cuda.cudadrv.driver",
        "math",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/__init__.py": [
        "numba.cuda.testing",
        "numba.testing",
        "numba",
        "os.path"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/compiler.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/kernel.py": [
        "contextlib",
        "functools",
        "sys",
        "threading",
        "numpy",
        "cudadrv.devicearray",
        "kernelapi",
        "errors",
        "args"
      ],
      "kernelapi": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/reduction.py": [
        "functools"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/vector_types.py": [
        "numba",
        "numba.cuda.stubs"
      ],
      "numba.cuda.stubs": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/__init__.py": [
        "sys",
        "api",
        "vector_types",
        "reduction",
        "cudadrv.devicearray",
        "cudadrv",
        "cudadrv.devices",
        "cudadrv.runtime",
        "numba.core",
        "numba.cuda.simulator"
      ],
      "vector_types": [],
      "reduction": [],
      "cudadrv.devices": [],
      "cudadrv.runtime": [],
      "numba.cuda.simulator": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/api.py": [
        "contextlib",
        "cudadrv.devices",
        "kernel",
        "numba.core.sigutils",
        "warnings",
        "args"
      ],
      "kernel": [],
      "numba.core.sigutils": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/kernelapi.py": [
        "contextlib",
        "sys",
        "threading",
        "traceback",
        "numba.core",
        "numpy",
        "numba.np",
        "vector_types",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/enums.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/error.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/__init__.py": [
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/nvvm.py": [
        "logging",
        "re",
        "sys",
        "warnings",
        "ctypes",
        "threading",
        "llvmlite",
        "error",
        "libs",
        "numba.core",
        "numba.cuda.cudadrv.runtime"
      ],
      "error": [],
      "libs": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/runtime.py": [
        "ctypes",
        "functools",
        "sys",
        "numba.core",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.error",
        "numba.cuda.cudadrv.libs",
        "numba.cuda.cudadrv.rtapi",
        "numba.cuda.cudadrv"
      ],
      "numba.cuda.cudadrv.error": [],
      "numba.cuda.cudadrv.rtapi": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/nvrtc.py": [
        "ctypes",
        "enum",
        "numba.core",
        "numba.cuda.cudadrv.error",
        "functools",
        "os",
        "threading",
        "warnings",
        "numba.cuda.cudadrv.libs"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/ndarray.py": [
        "numba.cuda.cudadrv",
        "numba.core.registry"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/dummyarray.py": [
        "collections",
        "itertools",
        "functools",
        "operator",
        "ctypes",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/drvapi.py": [
        "ctypes",
        "numba.cuda.cudadrv"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/rtapi.py": [
        "ctypes"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/driver.py": [
        "sys",
        "os",
        "ctypes",
        "weakref",
        "functools",
        "warnings",
        "logging",
        "threading",
        "asyncio",
        "pathlib",
        "itertools",
        "abc",
        "contextlib",
        "importlib",
        "numpy",
        "collections",
        "numba",
        "numba.core",
        "error",
        "drvapi",
        "numba.cuda.cudadrv",
        "cuda",
        "cubinlinker",
        "ptxcompiler"
      ],
      "asyncio": [],
      "drvapi": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/devices.py": [
        "functools",
        "threading",
        "contextlib",
        "driver"
      ],
      "driver": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/devicearray.py": [
        "math",
        "functools",
        "operator",
        "copy",
        "ctypes",
        "numpy",
        "numba",
        "numba.cuda.cudadrv",
        "numba.core",
        "numba.np.unsafe.ndarray",
        "numba.np.numpy_support",
        "numba.np",
        "numba.cuda.api_util",
        "numba.core.errors",
        "warnings",
        "numba.cuda.kernels.transpose"
      ],
      "numba.cuda.kernels.transpose": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/cudadrv/libs.py": [
        "os",
        "sys",
        "ctypes",
        "numba.misc.findlib",
        "numba.cuda.cuda_paths",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.error"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/error.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/__init__.py": [
        "numba.cuda.simulator.cudadrv"
      ],
      "numba.cuda.simulator.cudadrv": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/nvvm.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/runtime.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/dummyarray.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/drvapi.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/driver.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/devices.py": [
        "numpy",
        "collections"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/devicearray.py": [
        "contextlib",
        "numba.np.numpy_support",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/simulator/cudadrv/libs.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/support.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/test_cudasim_issues.py": [
        "threading",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.cuda.simulator",
        "unittest",
        "numba.cuda.tests.cudasim"
      ],
      "numba.cuda.tests.cudasim": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudasim/__init__.py": [
        "numba.testing",
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_dummyarray.py": [
        "unittest",
        "itertools",
        "numpy",
        "numba.cuda.cudadrv.dummyarray",
        "numba.cuda.testing"
      ],
      "numba.cuda.cudadrv.dummyarray": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_nvvm.py": [
        "numba.cuda.cudadrv",
        "numba.cuda.testing",
        "numba.core",
        "llvmlite",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/__init__.py": [
        "numba.cuda.testing",
        "numba.testing",
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_import.py": [
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_function_resolution.py": [
        "numba.cuda.testing",
        "operator",
        "numba.core",
        "numba.cuda.cudadrv",
        "numba.cuda.descriptor"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/nocuda/test_library_lookup.py": [
        "sys",
        "os",
        "multiprocessing",
        "warnings",
        "numba.core.config",
        "numba.core.errors",
        "numba.cuda.cudadrv",
        "numba.cuda.testing",
        "numba.cuda.cuda_paths"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_ipc.py": [
        "multiprocessing",
        "itertools",
        "traceback",
        "pickle",
        "numpy",
        "numba",
        "numba.cuda.cudadrv",
        "numba.cuda.testing",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize.py": [
        "numpy",
        "collections",
        "itertools",
        "numba",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_forall.py": [
        "numpy",
        "numba",
        "unittest",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cuda_array_interface.py": [
        "numpy",
        "numba",
        "numba.cuda.cudadrv",
        "numba.cuda.testing",
        "numba.tests.support",
        "unittest.mock"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_atomics.py": [
        "numpy",
        "textwrap",
        "numba",
        "numba.cuda.testing",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_debuginfo.py": [
        "numba.tests.support",
        "numba.cuda.testing",
        "numba",
        "numba.core",
        "itertools",
        "re",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_iterators.py": [
        "numba",
        "numba.cuda.testing",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_retrieve_autoconverted_arrays.py": [
        "numpy",
        "numba",
        "numba.cuda.args",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_py2_div_issue.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_freevar.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_localmem.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.cuda.testing",
        "extensions_usecases"
      ],
      "extensions_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_const_string.py": [
        "re",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "llvmlite",
        "numba.cuda.descriptor",
        "numba.cuda.cudadrv.nvvm"
      ],
      "numba.cuda.cudadrv.nvvm": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_print.py": [
        "numba.cuda.testing",
        "subprocess",
        "sys",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_laplace.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_debug.py": [
        "numpy",
        "numba.core.utils",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_powi.py": [
        "math",
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_operator.py": [
        "numpy",
        "numba.cuda.testing",
        "numba",
        "numba.core.types",
        "numba.cuda",
        "operator",
        "itertools",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_transpose.py": [
        "numpy",
        "numba",
        "numba.cuda.kernels.transpose",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_minmax.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_nondet.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sync.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core.config"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_lang.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multithreads.py": [
        "traceback",
        "threading",
        "multiprocessing",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest",
        "concurrent.futures"
      ],
      "concurrent.futures": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_errors.py": [
        "numba",
        "numba.core.errors",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_extending.py": [
        "numba.cuda.testing",
        "numpy",
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.core.typing.templates",
        "numba.cuda.cudadecl",
        "numba.cuda.cudaimpl"
      ],
      "numba.cuda.cudadecl": [],
      "numba.cuda.cudaimpl": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_complex.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_warning.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba.core.errors",
        "warnings"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_slicing.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multiprocessing.py": [
        "os",
        "multiprocessing",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest",
        "numba.cuda.cudadrv.error"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_montecarlo.py": [
        "math",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array.py": [
        "numpy",
        "numba.cuda.testing",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/cache_with_cpu_usecases.py": [
        "sys",
        "numba",
        "numba.cuda.testing",
        "numba.cuda.tests.cudapy.cache_usecases"
      ],
      "numba.cuda.tests.cudapy.cache_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sm.py": [
        "numba",
        "numba.core.errors",
        "numba.core",
        "numba.cuda.testing",
        "numpy",
        "numba.np",
        "extensions_usecases"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_intrinsics.py": [
        "itertools",
        "numpy",
        "operator",
        "re",
        "numba",
        "numba.cuda",
        "numba.core.errors",
        "numba.core.types",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/recursion_usecases.py": [
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_mandel.py": [
        "numba",
        "numba.cuda.compiler",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_boolean.py": [
        "numpy",
        "numba.cuda.testing",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc_scalar.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_recursion.py": [
        "numba",
        "numba.core.errors",
        "numba.cuda.testing",
        "numpy",
        "unittest",
        "numba.cuda.tests.cudapy"
      ],
      "numba.cuda.tests.cudapy": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_compiler.py": [
        "math",
        "numba",
        "numba.cuda",
        "numba.cuda.cudadrv",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/__init__.py": [
        "numba.cuda.testing",
        "numba.testing",
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_globals.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_idiv.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_device_func.py": [
        "re",
        "types",
        "numpy",
        "numba.cuda.testing",
        "numba",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_constmem.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core.config"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cffi.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.tests.support",
        "cffi"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_overload.py": [
        "numba",
        "numba.core.errors",
        "numba.core.extending",
        "numba.core.typing.typeof",
        "numba.cuda.testing",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_decor.py": [
        "numpy",
        "numba",
        "numba.tests.npyufunc.test_vectorize_decor",
        "numba.cuda.testing",
        "unittest"
      ],
      "numba.tests.npyufunc.test_vectorize_decor": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_alignment.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_reduction.py": [
        "numpy",
        "numba",
        "numba.core.config",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array_methods.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_enums.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.tests.enum_usecases"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_scalar_arg.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_matmul.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_datetime.py": [
        "numpy",
        "numba",
        "numba.np.numpy_support",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/cache_usecases.py": [
        "numba",
        "numba.cuda.testing",
        "numpy",
        "sys"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cuda_jit_no_types.py": [
        "numba",
        "numpy",
        "numba.cuda.testing",
        "numba.tests.support",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_multigpu.py": [
        "numba",
        "numpy",
        "numba.cuda.testing",
        "threading",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_complex_kernel.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_lineinfo.py": [
        "numba",
        "numba.core.errors",
        "numba.cuda.testing",
        "numba.tests.support",
        "re",
        "unittest",
        "warnings"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_inspect.py": [
        "numpy",
        "io",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_casting.py": [
        "numpy",
        "numba.cuda",
        "numba.core.types",
        "numba",
        "numba.core",
        "numba.cuda.testing",
        "numba.types",
        "itertools",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_blackscholes.py": [
        "numpy",
        "math",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_exception.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_serialize.py": [
        "pickle",
        "numpy",
        "numba",
        "numba.core",
        "numba.cuda.testing",
        "unittest",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_fastmath.py": [
        "typing",
        "dataclasses",
        "numba",
        "numba.cuda.compiler",
        "math",
        "operator",
        "numpy",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_userexc.py": [
        "numba.cuda.testing",
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_libdevice.py": [
        "numpy",
        "numba.core",
        "numba.cuda.testing",
        "numba",
        "numba.cuda",
        "numba.cuda.libdevicefuncs"
      ],
      "numba.cuda.libdevicefuncs": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_sm_creation.py": [
        "numpy",
        "numba",
        "numba.core.errors",
        "numba.cuda.testing",
        "extensions_usecases"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_optimization.py": [
        "numpy",
        "numba.cuda.testing",
        "numba",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_caching.py": [
        "multiprocessing",
        "os",
        "shutil",
        "subprocess",
        "sys",
        "unittest",
        "warnings",
        "numba",
        "numba.core.errors",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba.tests.test_caching",
        "numba.core",
        "numba.cuda.codegen"
      ],
      "numba.cuda.codegen": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vector_type.py": [
        "numpy",
        "numba.core",
        "numba.cuda.testing",
        "numba",
        "numba.cuda.simulator.vector_types",
        "numba.cuda.vector_types"
      ],
      "numba.cuda.simulator.vector_types": [],
      "numba.cuda.vector_types": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_warp_ops.py": [
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_cooperative_groups.py": [
        "__future__",
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_complex.py": [
        "math",
        "itertools",
        "numpy",
        "numba.cuda.testing",
        "numba.core",
        "numba",
        "numba.tests.complex_usecases",
        "numba.np"
      ],
      "numba.tests.complex_usecases": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_array_args.py": [
        "numpy",
        "collections",
        "numba",
        "numba.core.errors",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_vectorize_device.py": [
        "numba",
        "numpy",
        "numba.cuda.testing",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/extensions_usecases.py": [
        "numba",
        "numba.core",
        "numba.core.extending",
        "numba.cuda.cudaimpl"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_dispatcher.py": [
        "numpy",
        "threading",
        "numba",
        "numba.core.errors",
        "numba.cuda.testing",
        "math"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_ufuncs.py": [
        "functools",
        "numpy",
        "unittest",
        "numba",
        "numba.tests.support",
        "numba.tests.test_ufuncs"
      ],
      "numba.tests.test_ufuncs": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc_scheduling.py": [
        "numba.cuda.deviceufunc",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_math.py": [
        "numpy",
        "numba.cuda.testing",
        "numba.np",
        "numba",
        "math"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_frexp_ldexp.py": [
        "numpy",
        "math",
        "numba",
        "numba.types",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_record_dtype.py": [
        "numpy",
        "numba",
        "numba.core",
        "numba.cuda.testing",
        "unittest",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_gufunc.py": [
        "numpy",
        "collections",
        "numba",
        "numba.cuda.testing",
        "unittest",
        "warnings",
        "numba.core.errors",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudapy/test_random.py": [
        "math",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.cuda.random"
      ],
      "numba.cuda.random": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_laplace.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "numba",
        "matplotlib.pyplot"
      ],
      "matplotlib.pyplot": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_vecadd.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_cg.py": [
        "unittest",
        "numba.cuda.testing",
        "numba",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_cpu_gpu_compat.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "math",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_montecarlo.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba",
        "numpy",
        "numba.cuda.random"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/__init__.py": [
        "numba.testing",
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_reduction.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "numba",
        "numba.types"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_matmul.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba",
        "numpy",
        "math"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_ffi.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba",
        "numpy",
        "os",
        "cffi"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_ufunc.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_sessionize.py": [
        "unittest",
        "numba.cuda.testing",
        "numba.tests.support",
        "numpy",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/test_random.py": [
        "unittest",
        "numba.cuda.testing",
        "numba",
        "numba.cuda.random",
        "numpy"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/data/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_streams.py": [
        "asyncio",
        "functools",
        "threading",
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_array_slicing.py": [
        "itertools",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "unittest.mock"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_ptds.py": [
        "multiprocessing",
        "logging",
        "traceback",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba",
        "numba.core",
        "io",
        "numpy",
        "threading"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_reset_device.py": [
        "threading",
        "numba",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.testing",
        "queue"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_linker.py": [
        "numpy",
        "warnings",
        "numba.cuda.testing",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.error",
        "numba.cuda",
        "numba.tests.support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_driver.py": [
        "ctypes",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_context_stack.py": [
        "numbers",
        "ctypes",
        "weakref",
        "numba",
        "numba.cuda.testing",
        "numba.cuda.cudadrv"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_runtime.py": [
        "multiprocessing",
        "os",
        "numba.core",
        "numba.cuda.cudadrv.runtime",
        "numba.cuda.testing",
        "unittest.mock",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_ndarray.py": [
        "itertools",
        "numpy",
        "numba.cuda.cudadrv",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_detect.py": [
        "os",
        "sys",
        "subprocess",
        "threading",
        "numba",
        "numba.cuda.testing",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/__init__.py": [
        "numba.cuda.testing",
        "numba.testing",
        "os"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_managed_alloc.py": [
        "numpy",
        "ctypes",
        "numba.cuda.cudadrv.driver",
        "numba",
        "numba.cuda.testing",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_inline_ptx.py": [
        "llvmlite",
        "numba.cuda.cudadrv",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_array_attr.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_profiler.py": [
        "unittest",
        "numba.cuda.testing",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_deallocations.py": [
        "contextlib",
        "numpy",
        "numba",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_memory.py": [
        "ctypes",
        "numpy",
        "numba.cuda.cudadrv",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_devicerecord.py": [
        "numpy",
        "ctypes",
        "numba.cuda.cudadrv.devicearray",
        "numba.cuda.testing",
        "numba.np",
        "numba"
      ],
      "numba.cuda.cudadrv.devicearray": [],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_nvvm_driver.py": [
        "warnings",
        "llvmlite",
        "numba.cuda.cudadrv",
        "numba.cuda.testing",
        "numba.cuda.cudadrv.nvvm"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_mvc.py": [
        "multiprocessing",
        "traceback",
        "numba.cuda.testing",
        "numba.tests.support",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_host_alloc.py": [
        "numpy",
        "numba.cuda.cudadrv",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_pinned.py": [
        "numpy",
        "platform",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_auto_context.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_select_device.py": [
        "threading",
        "queue",
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_events.py": [
        "numpy",
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_cuda_libraries.py": [
        "numba.cuda.testing",
        "numba.misc.findlib"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_emm_plugins.py": [
        "ctypes",
        "numpy",
        "weakref",
        "numba",
        "numba.core",
        "numba.cuda.testing",
        "numba.tests.support"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_is_fp16.py": [
        "numba",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/cudadrv/test_init.py": [
        "multiprocessing",
        "os",
        "numba",
        "numba.cuda.cudadrv.driver",
        "numba.cuda.cudadrv.error",
        "numba.cuda.testing"
      ],
      "/tmp/cs-hpc-demo-1/numba/cuda/tests/doc_examples/ffi/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/typeconv.py": [
        "numba.core.typeconv",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/__init__.py": [
        "castgraph"
      ],
      "castgraph": [],
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/rules.py": [
        "itertools",
        "typeconv",
        "numba.core"
      ],
      "typeconv": [],
      "/tmp/cs-hpc-demo-1/numba/core/typeconv/castgraph.py": [
        "collections",
        "functools",
        "enum"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/ir_print.py": [
        "numba.core",
        "numba.core.rewrites"
      ],
      "numba.core.rewrites": [],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/registry.py": [
        "collections",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_raise.py": [
        "numba.core",
        "numba.core.rewrites"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/__init__.py": [
        "registry",
        "numba.core.rewrites"
      ],
      "registry": [],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_getitem.py": [
        "numba.core",
        "numba.core.rewrites"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/rewrites/static_binop.py": [
        "numba.core",
        "numba.core.rewrites"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/abstract.py": [
        "abc",
        "typing",
        "itertools",
        "weakref",
        "functools",
        "numpy",
        "numba.core.utils",
        "numba.core.typing",
        "numba.core.types",
        "numba.np",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/functions.py": [
        "traceback",
        "collections",
        "itertools",
        "logging",
        "textwrap",
        "shutil",
        "abstract",
        "common",
        "misc",
        "numba.core",
        "numba.core.typeconv",
        "numba.core.target_extension",
        "numba.core.typing.templates",
        "numba.core.types"
      ],
      "abstract": [],
      "common": [],
      "misc": [],
      "/tmp/cs-hpc-demo-1/numba/core/types/misc.py": [
        "numba.core.types.abstract",
        "numba.core.types.common",
        "numba.core.typeconv",
        "numba.core.errors",
        "numba.core.ir",
        "numba.core.utils",
        "numba.core"
      ],
      "numba.core.types.common": [],
      "/tmp/cs-hpc-demo-1/numba/core/types/function_type.py": [
        "abc",
        "abstract",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/containers.py": [
        "collections.abc",
        "types",
        "abstract",
        "common",
        "misc",
        "typeconv",
        "errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/npytypes.py": [
        "collections",
        "warnings",
        "functools",
        "llvmlite",
        "abstract",
        "common",
        "numba.core.typeconv",
        "numba.core",
        "misc",
        "containers",
        "numpy",
        "numba.core.registry",
        "numba.np.numpy_support",
        "numba.core.errors"
      ],
      "containers": [],
      "/tmp/cs-hpc-demo-1/numba/core/types/__init__.py": [
        "struct",
        "numpy",
        "numba.core",
        "abstract",
        "containers",
        "functions",
        "iterators",
        "misc",
        "npytypes",
        "scalars",
        "function_type",
        "new_scalars"
      ],
      "functions": [],
      "iterators": [],
      "npytypes": [],
      "scalars": [],
      "function_type": [],
      "new_scalars": [],
      "/tmp/cs-hpc-demo-1/numba/core/types/common.py": [
        "abstract",
        "numba.core.errors",
        "misc",
        "iterators"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/iterators.py": [
        "common",
        "errors",
        "numba.core.types"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/types/scalars.py": [
        "enum",
        "numpy",
        "abstract",
        "functools",
        "numba.core",
        "numba.core.typeconv",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrt.py": [
        "collections",
        "weakref",
        "numba.core.runtime",
        "llvmlite",
        "numba.core.compiler_lock",
        "numba.core.typing.typeof",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/runtime/__init__.py": [
        "nrt"
      ],
      "nrt": [],
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrtdynmod.py": [
        "numba.core",
        "llvmlite"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/runtime/nrtopt.py": [
        "re",
        "collections",
        "llvmlite",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/runtime/context.py": [
        "functools",
        "collections",
        "llvmlite",
        "numba.core",
        "numba.core.utils",
        "numba.core.runtime.nrtdynmod"
      ],
      "numba.core.runtime.nrtdynmod": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/cmathdecl.py": [
        "cmath",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/bufproto.py": [
        "array",
        "numba.core",
        "numba.core.errors"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/mathdecl.py": [
        "math",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/dictdecl.py": [
        "templates"
      ],
      "templates": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/listdecl.py": [
        "operator",
        "numba.core",
        "templates",
        "numba.core.typing"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/builtins.py": [
        "itertools",
        "numpy",
        "operator",
        "numba.core",
        "numba",
        "numba.parfors.parfor",
        "numba.core.typing.templates",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/asnumbatype.py": [
        "inspect",
        "typing",
        "numba.core.typing.typeof",
        "numba.core",
        "numba.core.utils"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/__init__.py": [
        "context",
        "templates"
      ],
      "context": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/setdecl.py": [
        "operator",
        "numba.core",
        "templates",
        "numba.core.typing"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/npydecl.py": [
        "warnings",
        "numpy",
        "operator",
        "numba.core",
        "numba.core.typing.templates",
        "numba.np.numpy_support",
        "numba.core.errors",
        "numba"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/templates.py": [
        "abc",
        "functools",
        "sys",
        "inspect",
        "os.path",
        "collections",
        "collections.abc",
        "types",
        "numba",
        "numba.core",
        "numba.core.errors",
        "numba.core.cpu_options",
        "operator",
        "numba.core.typed_passes",
        "numba.core.target_extension",
        "numba.core.inline_closurecall"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/arraydecl.py": [
        "numpy",
        "operator",
        "collections",
        "numba.core",
        "numba.core.typing.templates",
        "numba.core.typing",
        "numba.core.errors",
        "numba.core.cgutils",
        "npydecl"
      ],
      "npydecl": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/context.py": [
        "collections",
        "collections.abc",
        "typing",
        "types",
        "weakref",
        "threading",
        "contextlib",
        "operator",
        "numba.core",
        "numba.core.typeconv",
        "numba.core.typing",
        "numba.core.utils",
        "typeof",
        "numba.core.target_extension",
        "numba.core.unsafe"
      ],
      "typeof": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/collections.py": [
        "operator",
        "templates",
        "builtins"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/ctypes_utils.py": [
        "ctypes",
        "sys",
        "numba.core",
        "numba.core.typing",
        "typeof"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/enumdecl.py": [
        "operator",
        "numba.core",
        "numba.core.typing.templates"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/cffi_utils.py": [
        "types",
        "ctypes",
        "functools",
        "numpy",
        "numba.core",
        "numba.core.errors",
        "numba.core.typing",
        "numba.np",
        "cffi"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/typing/typeof.py": [
        "collections",
        "functools",
        "ctypes",
        "enum",
        "numpy",
        "numpy.random.bit_generator",
        "numba.core",
        "numba.np",
        "numba.core.typing",
        "ctypes_utils",
        "numba.typed"
      ],
      "numpy.random.bit_generator": [],
      "ctypes_utils": [],
      "/tmp/cs-hpc-demo-1/numba/core/typing/npdatetime.py": [
        "itertools",
        "operator",
        "numba.core",
        "numba.core.typing.templates",
        "numba.np",
        "numba.np.numpy_support"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/annotations/type_annotations.py": [
        "collections",
        "collections.abc",
        "contextlib",
        "copy",
        "inspect",
        "os",
        "re",
        "sys",
        "textwrap",
        "io",
        "numba.core.dispatcher",
        "numba.core",
        "jinja2"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/annotations/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/core/annotations/pretty_annotate.py": [
        "warnings",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "jinja2"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/refcount.py": [
        "llvmlite",
        "numba.core",
        "numba.core.extending",
        "numba.core.runtime.nrtdynmod"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/eh.py": [
        "numba.core",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/nrt.py": [
        "numba.core",
        "numba.core.typing",
        "numba.core.extending"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/__init__.py": [],
      "/tmp/cs-hpc-demo-1/numba/core/unsafe/bytes.py": [
        "numba.core.extending",
        "llvmlite",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/models.py": [
        "functools",
        "collections",
        "llvmlite",
        "numba.core.datamodel.registry",
        "numba.core",
        "numba.np"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/registry.py": [
        "functools",
        "manager"
      ],
      "manager": [],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/__init__.py": [
        "manager",
        "packer",
        "registry",
        "models"
      ],
      "packer": [],
      "models": [],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/packer.py": [
        "collections",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/testing.py": [
        "llvmlite",
        "numba.core",
        "unittest"
      ],
      "/tmp/cs-hpc-demo-1/numba/core/datamodel/manager.py": [
        "weakref",
        "collections",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/__init__.py": [
        "numba.experimental.jitclass.decorators",
        "numba.experimental.jitclass"
      ],
      "numba.experimental.jitclass.decorators": [],
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/boxing.py": [
        "functools",
        "llvmlite",
        "numba.core",
        "numba.core.decorators",
        "numba.core.pythonapi",
        "numba.core.typing.typeof",
        "numba.experimental.jitclass"
      ],
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/overloads.py": [
        "functools",
        "inspect",
        "operator",
        "numba.core.extending",
        "numba.core.types"
      ],
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/base.py": [
        "inspect",
        "operator",
        "types",
        "typing",
        "collections",
        "collections.abc",
        "llvmlite",
        "numba",
        "numba.core",
        "numba.core.datamodel",
        "numba.core.registry",
        "numba.core.typing",
        "numba.core.typing.asnumbatype",
        "numba.core.serialize",
        "numba.experimental.jitclass"
      ],
      "/tmp/cs-hpc-demo-1/numba/experimental/jitclass/decorators.py": [
        "numba.core",
        "numba.experimental.jitclass.base"
      ],
      "/tmp/cs-hpc-demo-1/numba/misc/help/inspector.py": [
        "argparse",
        "pkgutil",
        "warnings",
        "types",
        "numba.core",
        "numba._version",
        "numba.core.registry",
        "numba.tests.support",
        "html"
      ],
      "pkgutil": [],
      "numba._version": [],
      "/tmp/cs-hpc-demo-1/numba/misc/help/__init__.py": [],
      "/tmp/cs-hpc-demo-1/buildscripts/github/patch_wheel_dylib.py": [
        "sys",
        "re",
        "os",
        "subprocess"
      ],
      "/tmp/cs-hpc-demo-1/docs/source/conf.py": [
        "docutils",
        "docutils.statemachine",
        "sphinx.util.docutils",
        "sys",
        "os",
        "numba",
        "numba.scripts.generate_lower_listing",
        "numba.misc.help.inspector"
      ],
      "docutils": [],
      "docutils.statemachine": [],
      "sphinx.util.docutils": [],
      "numba.scripts.generate_lower_listing": [],
      "/tmp/cs-hpc-demo-1/docs/dagmap/render.py": [
        "os.path",
        "json",
        "collections",
        "yaml",
        "graphviz",
        "jinja2",
        "argparse",
        "sys"
      ],
      "/tmp/cs-hpc-demo-1/docs/source/developer/compiler_pass_example.py": [
        "numba",
        "numba.core",
        "numba.core.compiler",
        "numba.core.compiler_machinery",
        "numba.core.untyped_passes",
        "numbers"
      ],
      "/tmp/cs-hpc-demo-1/docs/source/developer/inline_example.py": [
        "numba",
        "numba.core"
      ],
      "/tmp/cs-hpc-demo-1/docs/source/developer/inline_overload_example.py": [
        "numba",
        "numba.extending"
      ],
      "/tmp/cs-hpc-demo-1/docs/source/_ext/ghfiles.py": [
        "os.path",
        "subprocess",
        "shlex",
        "sphinx.util",
        "docutils"
      ],
      "shlex": [],
      "sphinx.util": [],
      "/tmp/cs-hpc-demo-1/docs/source/extending/mynorm.py": [
        "numpy",
        "numba",
        "numba.extending",
        "numba.core.errors",
        "scipy.linalg"
      ],
      "scipy.linalg": [],
      "/tmp/cs-hpc-demo-1/docs/source/proposals/np-where-override.py": [
        "numpy",
        "numba.core",
        "numba.extending"
      ]
    }
  },
  "profile": {
    "error": "expected an indented block after function definition on line 28 (main.py, line 29)"
  },
  "compliance": {
    "domain": "hpc",
    "targets": [],
    "findings": [
      {
        "rule": "vectorize",
        "status": "unknown",
        "note": "Exploit SIMD/BLAS where possible.",
        "risk": "Low GFLOPS"
      },
      {
        "rule": "memory",
        "status": "unknown",
        "note": "Ensure contiguous memory and cache-friendly access.",
        "risk": "Cache misses"
      }
    ],
    "summary": {
      "passed": 0,
      "warn": 2,
      "failed": 0
    }
  },
  "benchmark": {
    "before": {
      "domain": "hpc",
      "project_path": "/tmp/cs-hpc-demo-1",
      "baseline_path": null,
      "result": {
        "domain": "hpc",
        "metric": "linpack_gflops",
        "value": 72.0,
        "details": {
          "runtime_sec": 1.02,
          "cpu_util": 35.0,
          "mem_mb": 132.0
        }
      },
      "started": 1760343060.909495,
      "finished": 1760343060.909502,
      "duration_sec": 0.0
    },
    "after": {
      "domain": "hpc",
      "project_path": "/tmp/cs-hpc-demo-1",
      "baseline_path": null,
      "result": {
        "domain": "hpc",
        "metric": "linpack_gflops",
        "value": 72.0,
        "details": {
          "runtime_sec": 1.02,
          "cpu_util": 35.0,
          "mem_mb": 132.0
        }
      },
      "started": 1760343060.910054,
      "finished": 1760343060.910058,
      "duration_sec": 0.0
    },
    "compare": {
      "metric": "linpack_gflops",
      "before": 72.0,
      "after": 72.0,
      "delta": 0.0,
      "improved": false
    }
  },
  "suggestions": [
    {
      "message": " Syntax error: expected an indented block after function definition on line 28 (main.py, line 29)",
      "patch": "",
      "reason": "Code could not be parsed. Error: expected an indented block after function definition on line 28 (main.py, line 29)",
      "audit": {
        "type": "syntax_error"
      }
    }
  ]
}